// Variable that will hold the SharePoint ClientContext object
var context;

// Variable that will hold the SharePoint App Web object
var web;
//var eventListId = 'ACF59F6D-49A3-448D-8505-1C71631B594F';
var eventListId = '';
//var testId;
//Change these names according to your site
var uniDomainList = 'UniversityDomain';
var unisubDomainList = 'UniversitySubDomain';
var organizationtype = "OrganizationType";
var domainTitle = "DomianLookup_x003a_Title";
var RoleSplst = "Occupation";
var CountrySplst = "Country";
var CitySplst = "City";
var CitySplst_CountryLookup = "CountryID";
var RegionSplst = "Region";
var AffiliationSplst = "Affiliation";
var EventSplst = "EventList";


//Column Names for Site EventList
var SpAppEventID = "AppEventID";
var SpTitle = "Title";
var SpStartDate = "StartDate";
var SpEndDate = "EndDate";
var SpEventDiscipline = "EventDiscipline";
var SpCustomCreatedBy = "CustomCreatedBy";
var SpEventStatus = "EventStatus";
var SpSiteName = "SiteName";
var SpRecurrenceEventId = "RecurrenceEventId";
var SpIsRecurring = "IsRecurring";
//Column Names for Site EventList

//Column Names for Site Affiliation
var SpAppOrgID = "AppOrgID";
var SpAffTitle = "Title";
//Column Names for Site Affiliation

var Global_Counter_FoRecursion = 0;
var Global_Counter_FoEvents = 0;
var Global_Counter_ForOrganization = 0;
var Global_Counter_ForSiteUsers = 0;
var GC_ForSiteAppUsersRequest = 0;
//Variable that will hold the SharePoint user
var user;
var useremail;
var userid;
var userloginname;
var eventOrganizer = false;
var siteRepresentative = false;
var eventOrganizerStatus;
var siteRepresentativeStatus;
var isattendee = false;
var global_UserOccupation = "";


var dont_Reply_Email_Address = 'spt@xellems.onmicrosoft.com';
var default_From_EmailAddress = 'spt@xellems.onmicrosoft.com';
var SuperAdminEmail = 'spt@xellpak.onmicrosoft.com';
//var dont_Reply_Email_Address = 'stpxell@stpxell.onmicrosoft.com';
//var default_From_EmailAddress = 'stpxell@stpxell.onmicrosoft.com';

//var dont_Reply_Email_Address = 'spt@xellpak.onmicrosoft.com';
//var default_From_EmailAddress = 'spt@xellpak.onmicrosoft.com';

//var dont_Reply_Email_Address = 'alihafeez@pern.onmicrosoft.com';
//var default_From_EmailAddress = 'alihafeez@pern.onmicrosoft.com';
//dont remove this


var currentEventIdformailing = 0;
var eventFieldofInterest = "";



var imageUploadLib = "FacebookEventImages";//"Style Library";
//var defaultImgUrl = "https://stpxell-public.sharepoint.com/FacebookEventImages/AppIcon.png";
var defaultImgUrl = "https://xellems-public.sharepoint.com/FacebookEventImages/HECLogo.png";

 




var rep;
var siterep;
var eventId_ReOccurance = 0;
//Variable that will hold the SharePoint user name
var userName;
var employeeName;
var repName;
var siterepName;

// Variable that will hold various SharePoint List objects 
var list;
var eventList;
var assetList;
var uniorgList;
var siteList;
var facilitiesList;
var efacilitiesList;
var rfacilitiesList;

var siterepList;
var repList;
var ScheduledList;

var attendeeCount;
var repCount;
var siterepCount;

// Variable that will hold various SharePoint ListItem objects
var currentItem;
var listItem;
var assetItem;
var uniorgItem;
var siteItem;
var facilitiesItem;

var efacilitiesItem;
var rfacilitiesItem;


var scheventItem;

var empStatus;
var EventSiteId;


//Variables that will hold the Sharepoint list ID
var assetsID;
var uniorgID;
var siteID;
var eventID;
var facilitiesID;
var efacilitiesID;
var rfacilitiesID;


var schEventID;

var uploadedImageUrl = "-1";

// Variable that will hold the contents of a file selected by the user for uploading
var contents;
var hostweburl;
var appweburl;
var testweb;



var EMSUserListName = "EMSUsers";
var SitePrefix = "Prefix";//for Site EMSUsers List
var SitePrimaryAffiliation = "PrimaryAffiliation";//for Site EMSUsers List
var SiteisVerified = "IsVerified";//for Site EMSUsers List
var SitePassportNumber = "Passport";//for Site EMSUsers List
var SiteTitle = "Title";//for Site EMSUsers List
var SiteColPrefix = "Prefix";
var EMSUserPrimaryAffiliation;
///////////////////////////////////////////
//////////EMS PERN ///////////////////////
//var SiteColStatus = "lzvk";
//var SiteColName = "caeo";
//var SiteColLName = "LastName";
//var SiteColCNIC = "a15y";

//var SiteColProfession = "Profession"; //single line text

//var SiteContactNumber = "llxk";
//var SiteColCountry = "Country"; //single drop down
//var SiteColCity = "City"; //single city
//var SiteColAddress = "p2r2"; //single line

//var SiteColInterest = "Interest"; //multiselect field
//var SiteColSubInterest = "InterestSubCategory"; //multiselect field

//var SiteColRegion = "Region"; //single
//var SiteColUniTitle = "Affiliation"; //multiselect field


///////////////////////////////////////////
//////////EMS Ehsan Fields///////////////////////
//var SiteColStatus = "g5f7";
//var SiteColName = "u1ho";
//var SiteColLName = "LastName";
//var SiteColCNIC = "CNIC";

//var SiteColProfession = "Profession"; //single line text

//var SiteContactNumber = "ContactNumber";
//var SiteColCountry = "Country"; //single drop down
//var SiteColCity = "City"; //single city
//var SiteColAddress = "Address"; //single line

//var SiteColInterest = "Interest"; //multiselect field
//var SiteColSubInterest = "InterestSubCategory"; //multiselect field

//var SiteColRegion = "Region"; //single
//var SiteColUniTitle = "Affiliation"; //multiselect field


///////////////////////////////////////////
////////EMS Public Fields///////////////////////
//var SiteColStatus = "afdf";
//var SiteColName = "sryd";
//var SiteColLName = "LastName";
//var SiteColCNIC = "_x0071_ea1";

//var SiteColProfession = "Profession"; //single line text

//var SiteContactNumber = "ContactNumber";
//var SiteContactNumber = "bdxj";
//var SiteColCountry = "Country"; //single drop down
//var SiteColCity = "City"; //single city
//var SiteColAddress = "_x0068_ts8"; //single line

//var SiteColInterest = "Interest"; //multiselect field
//var SiteColSubInterest = "InterestSubCategory"; //multiselect field

//var SiteColRegion = "Region"; //single
//var SiteColUniTitle = "Affiliation"; //multiselect field

///////////////////////////////////////////
////////XELL EMS  Fields///////////////////////
var SiteColStatus = "afdf";
var SiteColName = "sryd";
var SiteColLName = "LastName";
var SiteColPrefix = "Prefix";


var SiteColCNIC = "_x0071_ea1";

var SiteColProfession = "Profession"; //single line text

//var SiteContactNumber = "ContactNumber";
var SiteContactNumber = "bdxj";
var SiteColCountry = "Country"; //single drop down
var SiteColCity = "City"; //single city
var SiteColAddress = "_x0068_ts8"; //single line

var SiteColInterest = "Interest"; //multiselect field
var SiteColSubInterest = "InterestSubCategory"; //multiselect field

var SiteColRegion = "Region"; //single
var SiteColUniTitle = "Affiliation"; //multiselect field



///////////////////////////////////////////
////////EMS PUBLIC STPXELL  Fields///////////////////////
//var SiteColStatus = "afdf";
//var SiteColName = "sryd";
//var SiteColLName = "LastName";
//var SiteColPrefix = "Prefix";


//var SiteColCNIC = "_x0071_ea1";

//var SiteColProfession = "Profession"; //single line text

////var SiteContactNumber = "ContactNumber";
//var SiteContactNumber = "bdxj";
//var SiteColCountry = "Country"; //single drop down
//var SiteColCity = "City"; //single city
//var SiteColAddress = "_x0068_ts8"; //single line

//var SiteColInterest = "Interest"; //multiselect field
//var SiteColSubInterest = "InterestSubCategory"; //multiselect field

//var SiteColRegion = "Region"; //single
//var SiteColUniTitle = "Affiliation"; //multiselect field



////////////////////////////////////////////////////////////

//////////////EMS Rafiq Fields///////////////////////
//var SiteColStatus = "ApplicationStatus";
//var SiteColName = "crmr";
//var SiteColLName = "LastName";
//var SiteColCNIC = "bpku";

//var SiteColProfession = "Profession"; //single line text

//var SiteContactNumber = "qtwc";
//var SiteColCountry = "Country"; //single drop down
//var SiteColCity = "City"; //single city
//var SiteColAddress = "aonj"; //single line

//var SiteColInterest = "Interest"; //multiselect field
//var SiteColSubInterest = "InterestSubCategory"; //multiselect field

//var SiteColRegion = "Region"; //single
//var SiteColUniTitle = "Affiliation"; //multiselect field



///////////////////EMS Stage Settings/////////////////////////////////////

//var SiteColStatus = "ApplicationStatus";
//var SiteColName = "crmr";
//var SiteColLName = "LastName";
//var SiteColCNIC = "bpku";

//var SiteColProfession = "Profession"; //single line text

//var SiteContactNumber = "qtwc";
//var SiteColCountry = "Country"; //single drop down
//var SiteColCity = "City"; //single city
//var SiteColAddress = "aonj"; //single line

//var SiteColInterest = "Interest"; //multiselect field
//var SiteColSubInterest = "InterestSubCategory"; //multiselect field

//var SiteColRegion = "Region"; //single
//var SiteColUniTitle = "Affiliation"; //multiselect field


////////////////////////////////////////////////////////////

//var SiteColInterest = "sp2w";
//var SiteColRegion = "Region";
//var SiteColLName = "LastName";
//var SiteColStatus = "jdbi";
//var SiteColName = "e1ir";
//var SiteColInterest = "FieldInterest";
//var SiteColRegion = "Province_x002f_Region";
//var SiteColUni = "UniOrg";




// variables to hold schedule events objects 
var sections = [];
var schevents = [];
var events = [];
var neweventObject = null;
var modifyeventObject = null;
var neweventStartDatetime = null;
var neweventEndDatetime = null;
var copiedObject = {};

// variables to hold schedule events objects 
var sections = [];
var schevents = [];
var events = [];
var neweventObject = null;
var modifyeventObject = null;
var eventtypelist = ["Conference", "Lecture", "Interview", "Meeting", "PhD Defence", "Seminar", "Training", "Workshop"];
var neweventStartDatetime = null;
var neweventEndDatetime = null;
var copiedObject = {};

// variable to hold Host url
var hostSiteUrl;

var eventfieldlist = [
    "Agricultural & Veterinary Animal Sciences",
    "Biological and Medical Sciences",
    "Business & Administration & Management",
    "Engineering & Technology",
    "Physical Sciences",
    "Social Sciences"
];

var radial1, radial2, radial3;
var chart1, chart2, chart3, chartBarforLectures;
var border1;
var vertical1, vertical2, vertical3;

var myUserRole = "";


var SpAffiliationlst = [];
var SpUniDomain = [];
var SpUniSubDomain = [];
var SpCountrylst = [];
var SpCitylst = [];
var SpRegionlst = [];

// This code runs when the DOM is ready and creates a context object which is needed to use the SharePoint object model

// This code runs when the DOM is ready and creates a context object which is needed to use the SharePoint object model
$(document).ready(function () {
    var newEventType = document.getElementById("newEventType");
    var editEventType = document.getElementById("editEventType");
    var chartsEventTypeDDL = document.getElementById('barcharEventType');
    var optSelect = document.createElement('option');
    optSelect.innerHTML = 'Select Event Type';
    optSelect.value = -1;
    chartsEventTypeDDL.appendChild(optSelect);
    //adding deciplin etc 

    $(".zz1_GlobalNav_3").click(function () {
        $(".zz1_GlobalNav_3").removeClass("zz1_ActiveNav");
        $(this).addClass("zz1_ActiveNav");
    });


    for (var i = 0; i < eventtypelist.length; i++) {

        var option = document.createElement('option');
        option.innerHTML = eventtypelist[i];
        option.value = i;
        newEventType.appendChild(option);
        var option2 = document.createElement('option');
        option2.innerHTML = eventtypelist[i];
        option2.value = i;
        editEventType.appendChild(option2);

        //element for chartsEventTypeDDL
        var option3 = document.createElement('option');
        option3.innerHTML = eventtypelist[i];
        option3.value = i;
        chartsEventTypeDDL.appendChild(option3);
    }


    //for (var i = 0; i < eventfieldlist.length; i++) {

    //    var option = document.createElement('option');
    //    option.innerHTML = eventfieldlist[i];
    //    option.value = i;
    //    newEventDecipline.appendChild(option);
    //    var option2 = document.createElement('option');
    //    option2.innerHTML = eventfieldlist[i];
    //    option2.value = i;
    //    editEventDecipline.appendChild(option2);
    //}
    //BindEventType();
    $('#newStartDate').datetimepicker({
        showOn: "both",
        buttonImage: "../images/calendar.gif",
        buttonImageOnly: true,
        nextText: "",
        prevText: "",
        changeMonth: true,
        changeYear: true,
        dateFormat: "MM dd, yy",
        timeFormat: "hh:mm"
    });
    $('#newEndDate').datetimepicker({
        showOn: "both",
        buttonImage: "../images/calendar.gif",
        buttonImageOnly: true,
        nextText: "",
        prevText: "",
        changeMonth: true,
        changeYear: true,
        dateFormat: "MM dd, yy",
        timeFormat: "hh:mm"
    });

    $('#editStartDate').datetimepicker({
        showOn: "both",
        buttonImage: "../images/calendar.gif",
        buttonImageOnly: true,
        nextText: "",
        prevText: "",
        changeMonth: true,
        changeYear: true,
        dateFormat: "MM dd, yy",
        timeFormat: "hh:mm"
    });
    $('#editEndDate').datetimepicker({
        showOn: "both",
        buttonImage: "../images/calendar.gif",
        buttonImageOnly: true,
        nextText: "",
        prevText: "",
        changeMonth: true,
        changeYear: true,
        dateFormat: "MM dd, yy",
        timeFormat: "hh:mm"
    });

    SP.SOD.executeFunc('sp.js', 'SP.ClientContext', function () {


        hideAllPanels();

        context = SP.ClientContext.get_current();
        web = context.get_web();
        userName = web.get_currentUser();
        userName.retrieve();

        context.load(web, 'EffectiveBasePermissions');
        context.executeQueryAsync(function () {
            // Success returned from executeQueryAsync
            initializePeoplePicker('peoplePickerDiv');
            initializePeoplePicker('peoplePickerDiv2');
            initializePeoplePicker('peoplePickerDiv3');

            if (web.get_effectiveBasePermissions().has(SP.PermissionKind.manageWeb)) {
                hideAllPanels();
                //Critical code, dont remove this 
                eventOrganizer = false;
                siteRepresentative = false;
                $('#Home').fadeIn(500, null);

                user = userName.get_title();
                useremail = userName.get_email();
                userloginname = userName.get_loginName();
                userid = userName.get_id();

                var objSuperuser = null;
                objSuperuser = [{ Id: userid, title: useremail, userloginname: userloginname }];
                getEmsUserproperties(objSuperuser , 'SuperAdmin');

                isattendee = false;

                //Set UserName, Email Address, Role

                //$('#spnUserName').text("Welcome: " + user);
                //$('#spnUserEmail').text(useremail);
                $('#spnUserRole').text("Super Admin");
                EMSUsers(useremail, "SuperAdmin");
            }
            else {
                isattendee = true;
                useremail = userName.get_email();

                //code for getting role permissions
                var userrolelist = web.get_lists().getByTitle("UserRoles");
                var camlQuery = new SP.CamlQuery();
                camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title'  /><Value Type='Text'>"
                    + useremail
                    + "</Value></Eq></Where></Query></View>");
                var userrolelistItems = userrolelist.getItems(camlQuery);
                context.load(userrolelistItems);
                context.executeQueryAsync(
                    function () {
                        //Success returned from executeQueryAsync
                        var userrolelistEnumerator = userrolelistItems.getEnumerator();
                        while (userrolelistEnumerator.moveNext()) {
                            var userrolelistItem = userrolelistEnumerator.get_current();
                            var userRoleId = userrolelistItem.get_id();
                            eventOrganizer = userrolelistItem.get_fieldValues()["EventOrganizer"];
                            eventOrganizerStatus = userrolelistItem.get_fieldValues()["EventOrganizerStatus"];
                            siteRepresentative = userrolelistItem.get_fieldValues()["Rep"];
                            siteRepresentativeStatus = userrolelistItem.get_fieldValues()["RepStatus"];

                            hideAllPanels();
                            EMSUsers(useremail, "Attendee");

                            if (eventOrganizer == true && eventOrganizerStatus == 'Approved' && siteRepresentative == true && siteRepresentativeStatus == 'Approved') {
                                $(".attedeEventsCreate").show();
                                $(".attedeUniOrgCreate").show();
                                $(".attedeSitesCreate").show();
                                $(".attedeRoomsCreate").show();
                                $(".attedeSiteEvent").show();
                                $(".attendeeManageSiteUsers").show();

                                $('#EmployeeHome').show();
                                user = userName.get_title();
                                useremail = userName.get_email();
                                userloginname = userName.get_loginName();
                                userid = userName.get_id();

                                //$('#spnAtt_UserName').text("Welcome : " + user);
                                //$('#spnAtt_UserEmail').text(useremail);
                                $('#spnUserRole').text("Event Organizer" + "/" + "Site Representative");

                                //$('#spnUserName').text("Welcome : "+ user);
                                //$('#spnUserEmail').text(useremail);
                                //$('#spnUserRole').text("Event Organizer" + "/" + "Site Representative");

                            } else if (siteRepresentative == true && siteRepresentativeStatus == 'Approved') {
                                $(".attedeEventsCreate").hide();
                                $(".attedeUniOrgCreate").show();
                                $(".attedeSitesCreate").show();
                                $(".attedeRoomsCreate").show();
                                $(".attedeSiteEvent").show();
                                $(".attendeeManageSiteUsers").show();
                                $('#EmployeeHome').show();
                                user = userName.get_title();
                                useremail = userName.get_email();
                                userloginname = userName.get_loginName();
                                userid = userName.get_id();

                                //$('#spnUserName').text("Welcome : " + user);
                                //$('#spnUserEmail').text(useremail);
                                //$('#spnUserRole').text("Site Representative");
                                //$('#spnAtt_UserName').text("Welcome : " + user);
                                //$('#spnAtt_UserEmail').text(useremail);
                                $('#spnUserRole').text("Site Representative");

                            } else if (eventOrganizer == true && eventOrganizerStatus == 'Approved') {

                                $(".attedeEventsCreate").show();
                                $(".attedeUniOrgCreate").hide();
                                $(".attedeSitesCreate").hide();
                                $(".attedeRoomsCreate").hide();
                                $(".attedeSiteEvent").hide();
                                $(".attendeeManageSiteUsers").hide();
                                $('#EmployeeHome').show();
                                user = userName.get_title();
                                useremail = userName.get_email();
                                userloginname = userName.get_loginName();
                                userid = userName.get_id();

                                //$('#spnAtt_UserName').text("Welcome : " + user);
                                //$('#spnAtt_UserEmail').text(useremail);
                                $('#spnUserRole').text("Event Organizer");
                                //$('#spnUserName').text("Welcome : " + user);
                                //$('#spnUserEmail').text(useremail);
                                //$('#spnUserRole').text(("Site Representative");

                            }
                            else {

                                //default attendee view
                                $(".attedeEventsCreate").hide();
                                $(".attedeUniOrgCreate").hide();
                                $(".attedeSitesCreate").hide();
                                $(".attedeRoomsCreate").hide();
                                $(".attedeSiteEvent").hide();
                                $(".attendeeManageSiteUsers").hide();
                                $('#EmployeeHome').show();
                                user = userName.get_title();
                                useremail = userName.get_email();
                                userloginname = userName.get_loginName();
                                userid = userName.get_id();

                                //$('#spnAtt_UserName').text("Welcome : " + user);
                                //$('#spnAtt_UserEmail').text(useremail);
                                $('#spnUserRole').text("Attendee");
                                //$('#spnUserName').text("Welcome : " + user);
                                //$('#spnUserEmail').text(useremail);
                                //$('#spnUserRole').text("Attendee");
                            }
                            isattendee = false;
                        }
                        if (isattendee) {

                            //default attendee view
                            $(".attedeEventsCreate").hide();
                            $(".attedeUniOrgCreate").hide();
                            $(".attedeSitesCreate").hide();
                            $(".attedeRoomsCreate").hide();
                            $(".attedeSiteEvent").hide();
                            $(".attendeeManageSiteUsers").hide();
                            $('#EmployeeHome').show();
                            user = userName.get_title();
                            useremail = userName.get_email();
                            userloginname = userName.get_loginName();
                            userid = userName.get_id();

                            //$('#spnAtt_UserName').text("Welcome : " + user);
                            //$('#spnAtt_UserEmail').text(useremail);
                            $('#spnUserRole').text("Attendee");

                        }
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        $(".attedeEventsCreate").hide();
                        $(".attedeUniOrgCreate").hide();
                        $(".attedeSitesCreate").hide();
                        $(".attedeRoomsCreate").hide();
                        $(".attedeSiteEvent").hide();
                        $(".attendeeManageSiteUsers").hide();
                        $('#EmployeeHome').show();
                        user = userName.get_title();
                        useremail = userName.get_email();
                        userloginname = userName.get_loginName();
                        userid = userName.get_id();
                        var errArea = document.getElementById("errGeneral");
                        var divMessage = document.createElement("DIV");
                        divMessage.setAttribute("style", "padding:5px;");
                        divMessage.appendChild(document.createTextNode("Failed to get started. Error: " + args.get_message()));
                        errArea.appendChild(divMessage);
                        if (web.get_effectiveBasePermissions().has(SP.PermissionKind.manageWeb)) {
                            $('#Home').fadeIn(500, null);
                        } else {
                            $('#EmployeeHome').fadeIn(500, null);
                        }
                    });
            }
            GetEventListId();// For ICS File
            var query = window.location.search.substring(1);
            if (query != '') {
                var urlFlag = false;
                var hostUrl;
                urlFlag = checkQueryStringParameter("SPHostUrl");
                if (urlFlag) {
                    showEventCalender();
                }
            } else {
                showEventCalender();
            }

        },
        function (sender, args) {

            // Failure returned from executeQueryAsync
            var errArea = document.getElementById("errGeneral");
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get started. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            if (web.get_effectiveBasePermissions().has(SP.PermissionKind.manageWeb)) {
                $('#Home').fadeIn(500, null);
            } else {
                $('#EmployeeHome').fadeIn(500, null);
            }
        });
    });

    $('#evetnsTable tbody').on('click', 'tr.group', function () {
        var currentOrder = table.order()[0];
        if (currentOrder[0] === 1 && currentOrder[1] === 'asc') {
            table.order([1, 'desc']).draw();
        }
        else {
            table.order([1, 'asc']).draw();
        }
    });
});
///////////////////////////////

function initialize() {
    chart1 = null;

    chart1 = new cfx.Chart();
    chart2 = new cfx.Chart();
    chartBarforLectures = new cfx.Chart();
    doInitializeDash();
    chartBarforLectures.create('divChart3');
    chart1.create('divChart1');
    chart2.create('divChart2');

}
////////////////////////////////////////////////////////////
//Functions to Sync Users

function checkQueryStringParameter(paramToRetrieve) {
    var params = document.URL.split("?")[1].split("&");
    for (var i = 0; i < params.length; i = i + 1) {
        var singleParam = params[i].split("=");
        if (singleParam[0] == paramToRetrieve)
            return true;
    }
    return false;
}
function syncApplicationdata() {
    syncDomainData();
    syncSubDomainData();

    syncOrganizationTypeData();
}
function syncDomainData() {
    var domainData = [];
    var domainExistingData = [];
    var OrganizationtypeList = web.get_lists().getByTitle('UniversityDomain');
    var hostUrl;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostSiteUrl = localStorage.getItem("SPHostUrl");
        hostUrl = hostSiteUrl;
    } else {
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        localStorage.setItem("SPHostUrl", hostSiteUrl);
    }
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(uniDomainList);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                domainData.push({ Title: listItem.get_fieldValues()["Title"] });

            }
            var _NewQueryPart = "";
            if (domainData.length > 0) {


                for (i = 0; i < domainData.length; i++) {
                    _NewQueryPart += "<Value Type='Text'>" + domainData[i].Title + "</Value>";
                }
                var orgList2 = web.get_lists().getByTitle('UniversityDomain');
                var rQuery2 = new SP.CamlQuery();
                rQuery2.set_viewXml("<View><Query><Where><In><FieldRef Name='Title' /><Values>" + _NewQueryPart + "</Values></In></Where></Query></View>");
                var orgType2 = orgList2.getItems(rQuery2);
                context.load(orgType2);
                context.executeQueryAsync(
                    function () {
                        var orgList2Enumrator = orgType2.getEnumerator();
                        while (orgList2Enumrator.moveNext()) {
                            var Orglist2Item = orgList2Enumrator.get_current();
                            domainExistingData.push({ Title: Orglist2Item.get_fieldValues()["Title"] });
                        }

                        if (domainExistingData.length > 0) {

                            for (var i = 0; i < domainData.length; i++) {
                                if (IsExist(domainExistingData, domainData[i].Title)) {
                                    //alert('Already Exist!');
                                    //updation Logic Goes here
                                }
                                else {
                                    var itemCreateInfo = new SP.ListItemCreationInformation();
                                    var orgItem = OrganizationtypeList.addItem(itemCreateInfo);
                                    orgItem.set_item("Title", domainData[i].Title);
                                    orgItem.update();
                                    context.load(orgItem);
                                    context.executeQueryAsync(function () {

                                    });
                                }
                            }
                        }
                        else {
                            for (var i = 0; i < domainData.length; i++) {
                                var itemCreateInfo = new SP.ListItemCreationInformation();
                                var orgItem = OrganizationtypeList.addItem(itemCreateInfo);
                                orgItem.set_item("Title", domainData[i].Title);
                                orgItem.update();
                                context.load(orgItem);
                                context.executeQueryAsync(function () {
                                });
                            }
                        }

                    }

                    ,
                    function () {
                        alert('Error');
                    }
                    );


            }
        },
        function () {
            alert('Error');
        }
        );
}

function syncSubDomainData() {
    var domainData = [];
    var domainExistingData = [];
    var OrganizationtypeList = web.get_lists().getByTitle('UniversitySubDomain');
    var hostUrl;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostSiteUrl = localStorage.getItem("SPHostUrl");
        hostUrl = hostSiteUrl;
    } else {
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        localStorage.setItem("SPHostUrl", hostSiteUrl);
    }
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(unisubDomainList);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                domainData.push({ Title: listItem.get_fieldValues()["Title"] });

            }
            var _NewQueryPart = "";
            if (domainData.length > 0) {


                for (i = 0; i < domainData.length; i++) {
                    _NewQueryPart += "<Value Type='Text'>" + domainData[i].Title + "</Value>";
                }
                var orgList2 = web.get_lists().getByTitle('UniversitySubDomain');
                var rQuery2 = new SP.CamlQuery();
                rQuery2.set_viewXml("<View><Query><Where><In><FieldRef Name='Title' /><Values>" + _NewQueryPart + "</Values></In></Where></Query></View>");
                var orgType2 = orgList2.getItems(rQuery2);
                context.load(orgType2);
                context.executeQueryAsync(
                    function () {
                        var orgList2Enumrator = orgType2.getEnumerator();
                        while (orgList2Enumrator.moveNext()) {
                            var Orglist2Item = orgList2Enumrator.get_current();
                            domainExistingData.push({ Title: Orglist2Item.get_fieldValues()["Title"] });
                        }

                        if (domainExistingData.length > 0) {

                            for (var i = 0; i < domainData.length; i++) {
                                if (IsExist(domainExistingData, domainData[i].Title)) {
                                    //alert('Already Exist!');
                                    //updation Logic Goes here
                                }
                                else {
                                    var itemCreateInfo = new SP.ListItemCreationInformation();
                                    var orgItem = OrganizationtypeList.addItem(itemCreateInfo);
                                    orgItem.set_item("Title", domainData[i].Title);
                                    orgItem.update();
                                    context.load(orgItem);
                                    context.executeQueryAsync(function () {

                                    });
                                }
                            }
                        }
                        else {
                            for (var i = 0; i < domainData.length; i++) {
                                var itemCreateInfo = new SP.ListItemCreationInformation();
                                var orgItem = OrganizationtypeList.addItem(itemCreateInfo);
                                orgItem.set_item("Title", domainData[i].Title);
                                orgItem.update();
                                context.load(orgItem);
                                context.executeQueryAsync(function () {
                                });
                            }
                        }

                    }

                    ,
                    function () {
                        alert('Error');
                    }
                    );


            }
        },
        function () {
            alert('Error');
        }
        );


}
function syncOrganizationTypeData() {
    var OrganizationData = [];
    var ExistingOrgdata = [];
    var hostUrl;
    var orgid = 0;
    var urlFlag = false;
    var OrganizationtypeList = web.get_lists().getByTitle('OrganizationType');
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostSiteUrl = localStorage.getItem("SPHostUrl");
        hostUrl = hostSiteUrl;
    } else {
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        localStorage.setItem("SPHostUrl", hostSiteUrl);
    }
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(organizationtype);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                //Collect All Items
                OrganizationData.push({ Title: listItem.get_fieldValues()["Title"] });

            }
            var _NewQueryPart = "";
            if (OrganizationData.length > 0) {
                for (i = 0; i < OrganizationData.length; i++) {
                    _NewQueryPart += "<Value Type='Text'>" + OrganizationData[i].Title + "</Value>";
                }
                var orgList2 = web.get_lists().getByTitle('OrganizationType');
                var rQuery2 = new SP.CamlQuery();
                rQuery2.set_viewXml("<View><Query><Where><In><FieldRef Name='Title' /><Values>" + _NewQueryPart + "</Values></In></Where></Query></View>");
                var orgType2 = orgList2.getItems(rQuery2);
                context.load(orgType2);
                context.executeQueryAsync(
                    function () {
                        var orgList2Enumrator = orgType2.getEnumerator();
                        while (orgList2Enumrator.moveNext()) {
                            var Orglist2Item = orgList2Enumrator.get_current();
                            ExistingOrgdata.push({ Title: Orglist2Item.get_fieldValues()["Title"] });
                        }

                        if (ExistingOrgdata.length > 0) {

                            for (var i = 0; i < OrganizationData.length; i++) {
                                if (IsExist(ExistingOrgdata, OrganizationData[i].Title)) {
                                    //alert('Already Exist!');
                                    //updation Logic Goes here
                                }
                                else {
                                    var itemCreateInfo = new SP.ListItemCreationInformation();
                                    var orgItem = OrganizationtypeList.addItem(itemCreateInfo);
                                    orgItem.set_item("Title", OrganizationData[i].Title);
                                    orgItem.update();
                                    context.load(orgItem);
                                    context.executeQueryAsync(function () {

                                    });
                                }
                            }
                        }
                        else {
                            for (var i = 0; i < OrganizationData.length; i++) {
                                var itemCreateInfo = new SP.ListItemCreationInformation();
                                var orgItem = OrganizationtypeList.addItem(itemCreateInfo);
                                orgItem.set_item("Title", OrganizationData[i].Title);
                                orgItem.update();
                                context.load(orgItem);
                                context.executeQueryAsync(function () {
                                });
                            }

                        }

                    }

                    ,
                    function () {
                        alert('Error');
                    }
                    );



            }
        },
        function () {
            alert('Error');
        }
        );
}

function IsExist(_lookup, Lookupvalue) {
    var stuatus = false;
    for (i = 0; i < _lookup.length; i++) {
        if (_lookup[i].Title == Lookupvalue) {
            stuatus = true;
            break;
        }


    }
    return stuatus;
}
function syncOrganizationTypeDataOlder() {

    var hostUrl;
    var orgid = 0;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostSiteUrl = localStorage.getItem("SPHostUrl");
        hostUrl = hostSiteUrl;
    } else {
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        localStorage.setItem("SPHostUrl", hostSiteUrl);
    }
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(organizationtype);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var OrgTypelistItem = listItemEnumerator.get_current();
                OrgList = web.get_lists().getByTitle('OrganizationType');
                var rQuery = new SP.CamlQuery();
                rQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
                    + OrgTypelistItem.get_fieldValues()["Title"]
                    + "</Value></Eq></Where></Query></View>");
                var orgType = OrgList.getItems(rQuery);
                context.load(orgType);
                context.executeQueryAsync(
                    function () {
                        var OrglistItemEnumerator = orgType.getEnumerator();
                        while (OrglistItemEnumerator.moveNext()) {
                            var OrglistItem = OrglistItemEnumerator.get_current();
                            orgid = OrglistItem.get_fieldValues()["ID"];
                        }
                        if (orgid < 1) {
                            var OrgTypeList = web.get_lists().getByTitle('OrganizationType');

                            var itemCreateInfo = new SP.ListItemCreationInformation();
                            var OrgTypeItem = OrgTypeList.addItem(itemCreateInfo);
                            OrgTypeItem.set_item("Title", OrgTypelistItem.get_fieldValues()["Title"]);

                            OrgTypeItem.update();
                            context.load(OrgTypeItem);
                            context.executeQueryAsync(function () {

                            },
                            function () {
                                alert('Error');
                            });
                        }
                        else {
                            var OrgTypeList = web.get_lists().getByTitle('OrganizationType');
                            var OrgCurrentitem = OrgTypeList.getItemById(orgid);
                            context.load(OrgCurrentitem);
                            OrgCurrentitem.set_item("Title", OrgTypelistItem.get_fieldValues()["Title"]);
                            OrgCurrentitem.update();
                            context.load(OrgCurrentitem);
                            context.executeQueryAsync(function () {
                                alert('Updated');
                            },
                            function () {
                                alert('Error');
                            });

                        }

                    },
                    function () {
                        alert('Error');
                    }
                    );
            }
        },
        function () {
            alert('Error');
        }
        );
}


function syncSiteAppusers() {
    showLoader();
    var datausers = [];
    var siteEmsUserlst = [];

    hideAllPanels();
    var hostUrl;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostSiteUrl = localStorage.getItem("SPHostUrl");
        hostUrl = hostSiteUrl;
        //window.location = "../Pages/Default.aspx?SPHostUrl=" + hostSiteUrl;
    } else {
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        localStorage.setItem("SPHostUrl", hostSiteUrl);
    }

    $('#SiteAppuserContentdiv').show();

    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(
         function () {

             // Iterate through the user list
             var listItemEnumerator = targetUserResult.getEnumerator();
             while (listItemEnumerator.moveNext()) {
                 var listItem = listItemEnumerator.get_current();

                 var role = "";
                 if (listItem.get_fieldValues()[SiteColProfession] != null) {
                     role = listItem.get_fieldValues()[SiteColProfession].get_lookupValue();
                 } else {
                     role = "";
                 }
                 var uniOrgTitle = "";
                 if ((listItem.get_fieldValues()[SiteColUniTitle] != null) && (listItem.get_fieldValues()[SiteColUniTitle].length != 0)) {
                     var x = listItem.get_fieldValues()[SiteColUniTitle].length;
                     for (var i = 0; i < x; i++) {
                         uniOrgTitle += (listItem.get_fieldValues()[SiteColUniTitle][i]).get_lookupValue() + " ; ";

                     }
                 } else {
                     uniOrgTitle = "";
                 }
                 var fieldInterest = "";
                 if ((listItem.get_fieldValues()[SiteColInterest] != null) && (listItem.get_fieldValues()[SiteColInterest].length != 0)) {

                     var x = listItem.get_fieldValues()[SiteColInterest].length;
                     for (var i = 0; i < x; i++) {
                         fieldInterest += (listItem.get_fieldValues()[SiteColInterest][i]).get_lookupValue() + " ; ";
                     }
                 } else {
                     fieldInterest = "";
                 }
                 var fieldSubInterest = "";
                 if ((listItem.get_fieldValues()[SiteColSubInterest] != null) && (listItem.get_fieldValues()[SiteColSubInterest].length != 0)) {
                     var x = listItem.get_fieldValues()[SiteColSubInterest].length;
                     for (var i = 0; i < x; i++) {
                         fieldSubInterest += (listItem.get_fieldValues()[SiteColSubInterest][i]).get_lookupValue() + " ; ";
                     }
                 } else {
                     fieldSubInterest = "";
                 }
                 var provinceRegion = "";
                 if (listItem.get_fieldValues()[SiteColRegion] != null) {
                     provinceRegion = listItem.get_fieldValues()[SiteColRegion].get_lookupValue();
                 } else {
                     provinceRegion = "";
                 }
                 var Country = "";
                 if (listItem.get_fieldValues()[SiteColCountry] != null) {
                     Country = listItem.get_fieldValues()[SiteColCountry].get_lookupValue();
                 } else {
                     Country = "";
                 }
                 var City = "";
                 if (listItem.get_fieldValues()[SiteColCity] != null) {
                     City = listItem.get_fieldValues()[SiteColCity].get_lookupValue();
                 } else {
                     City = "";
                 }
                 siteEmsUserlst.push({ title: listItem.get_fieldValues()[SiteTitle], prefix: listItem.get_fieldValues()[SiteColPrefix], FirstName: listItem.get_fieldValues()[SiteColName], LastName: listItem.get_fieldValues()[SiteColLName], Address: listItem.get_fieldValues()[SiteColAddress], CNIC: listItem.get_fieldValues()[SiteColCNIC], PassportNumber: listItem.get_fieldValues()[SitePassportNumber], Occupation: role, ContactNumber: listItem.get_fieldValues()[SiteContactNumber], Status: listItem.get_fieldValues()[SiteColStatus], FieldInterest: fieldInterest, FieldSubInterest: fieldSubInterest, Country: Country, City: City, RegionProvince: provinceRegion, PrimaryAffiliation: listItem.get_fieldValues()[SitePrimaryAffiliation], IsVerified: listItem.get_fieldValues()[SiteisVerified], UniOrgTitle: uniOrgTitle });
             }
             if (siteEmsUserlst.length > 0) {
                 var siteUsersIterator = 0;
                 Global_Counter_ForSiteUsers = siteEmsUserlst.length - 1;
                 SyncAllSiteUsersToApp(siteEmsUserlst, siteUsersIterator);
             }
             else {
                 var appEmsUserlst = [];
                 EMSUsersDataTable(appEmsUserlst);
             }
         },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            //alert("Error :" + args.get_message());
            hideLoader();
        });
}


function SyncAllSiteUsersToApp(siteEmsUserlst, siteUsersIterator) {

    SpAffiliationlst = [];
    getSplists(AffiliationSplst, SpAffiliationlst, 'ManageUsers');
    var emsuser = [];
    // Get all the Rooms associated with the siteId gotten in eventobject
    var emsUserList1 = web.get_lists().getByTitle('EMSUsers');
    //Create a CAML query that retrieves the sites for this organization
    var emsUserQuery = new SP.CamlQuery();
    emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title'  /><Value Type='Text'>" + siteEmsUserlst[siteUsersIterator].title + "</Value></Eq></Where></Query></View>");
    var emsUserListItems = emsUserList1.getItems(emsUserQuery);
    context.load(emsUserListItems);
    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
            while (emsUserlistItemEnumerator.moveNext()) {
                var emsUserlistItem = emsUserlistItemEnumerator.get_current();
                emsuser.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
            }
            if (emsuser.length > 0) {
                var emsuserList3 = web.get_lists().getByTitle('EMSUsers');
                var emsusercurrentItem2 = emsuserList3.getItemById(emsuser[0].Id);
                context.load(emsusercurrentItem2);
                context.executeQueryAsync(
                    function () {
                        // Success returned from executeQueryAsync
                        emsusercurrentItem2.set_item("Title", siteEmsUserlst[siteUsersIterator].title);
                        if ((siteEmsUserlst[siteUsersIterator].prefix != null) && (siteEmsUserlst[siteUsersIterator].prefix != "")) {
                            emsusercurrentItem2.set_item("prefix", siteEmsUserlst[siteUsersIterator].prefix);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].FirstName != null) && (siteEmsUserlst[siteUsersIterator].FirstName != "")) {
                            emsusercurrentItem2.set_item("FirstName", siteEmsUserlst[siteUsersIterator].FirstName);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].LastName != null) && (siteEmsUserlst[siteUsersIterator].LastName != "")) {
                            emsusercurrentItem2.set_item("LastName", siteEmsUserlst[siteUsersIterator].LastName);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].Address != null) && (siteEmsUserlst[siteUsersIterator].Address != "")) {
                            emsusercurrentItem2.set_item("Address", siteEmsUserlst[siteUsersIterator].Address);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].CNIC != null) && (siteEmsUserlst[siteUsersIterator].CNIC != "")) {
                            emsusercurrentItem2.set_item("CNIC", siteEmsUserlst[siteUsersIterator].CNIC);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].PassportNumber != null) && (siteEmsUserlst[siteUsersIterator].PassportNumber != "")) {
                            emsusercurrentItem2.set_item("PassportNumber", siteEmsUserlst[siteUsersIterator].PassportNumber);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].Occupation != null) && (siteEmsUserlst[siteUsersIterator].Occupation != "")) {
                            emsusercurrentItem2.set_item("Occupation", siteEmsUserlst[siteUsersIterator].Occupation);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].ContactNumber != null) && (siteEmsUserlst[siteUsersIterator].ContactNumber != "")) {
                            emsusercurrentItem2.set_item("ContactNumber", siteEmsUserlst[siteUsersIterator].ContactNumber);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].FieldInterest != null) && (siteEmsUserlst[siteUsersIterator].FieldInterest != "")) {
                            emsusercurrentItem2.set_item("FieldInterest", siteEmsUserlst[siteUsersIterator].FieldInterest);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].FieldSubInterest != null) && (siteEmsUserlst[siteUsersIterator].FieldSubInterest != "")) {
                            emsusercurrentItem2.set_item("FieldSubInterest", siteEmsUserlst[siteUsersIterator].FieldSubInterest);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].Country != null) && (siteEmsUserlst[siteUsersIterator].Country != "")) {
                            emsusercurrentItem2.set_item("Country", siteEmsUserlst[siteUsersIterator].Country);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].City != null) && (siteEmsUserlst[siteUsersIterator].City != "")) {
                            emsusercurrentItem2.set_item("City", siteEmsUserlst[siteUsersIterator].City);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].RegionProvince != null) && (siteEmsUserlst[siteUsersIterator].RegionProvince != "")) {
                            emsusercurrentItem2.set_item("Region_x002f_Province", siteEmsUserlst[siteUsersIterator].RegionProvince);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].PrimaryAffiliation != null) && (siteEmsUserlst[siteUsersIterator].PrimaryAffiliation != "")) {
                            emsusercurrentItem2.set_item("PrimaryAffiliation", siteEmsUserlst[siteUsersIterator].PrimaryAffiliation);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].IsVerified != null) && (siteEmsUserlst[siteUsersIterator].IsVerified != "")) {
                            emsusercurrentItem2.set_item("IsVerified", siteEmsUserlst[siteUsersIterator].IsVerified);
                        }
                        if ((siteEmsUserlst[siteUsersIterator].UniOrgTitle != null) && (siteEmsUserlst[siteUsersIterator].UniOrgTitle != "")) {
                            emsusercurrentItem2.set_item("UniOrgTitle", siteEmsUserlst[siteUsersIterator].UniOrgTitle);
                        }
                        emsusercurrentItem2.set_item("Status", siteEmsUserlst[siteUsersIterator].Status);

                        emsusercurrentItem2.update();
                        context.load(emsusercurrentItem2);
                        context.executeQueryAsync(function () {
                            // Success returned from executeQueryAsync

                            if (Global_Counter_ForSiteUsers > 0) {
                                Global_Counter_ForSiteUsers--;
                                siteUsersIterator++;
                                SyncAllSiteUsersToApp(siteEmsUserlst, siteUsersIterator);
                            } else {
                                Global_Counter_ForSiteUsers--;
                            }
                            if (Global_Counter_ForSiteUsers < 0) {
                                DisplayManageAppUsers();
                                //EMSUsersDataTable(emsUsersForPrimaryAffiliation);
                            }
                        },
                            function (sender, args) {
                                // Failure returned from executeQueryAsync
                                //alert("Error :" + args.get_message());
                                hideLoader();
                            });
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        //alert("Error in getting EMSUsers records: " + args.get_message());
                        hideLoader();
                    });

            } else {
                var emsUserList = web.get_lists().getByTitle('EMSUsers');
                var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                var emsUserItem = emsUserList.addItem(emsUseritemCreateInfo);

                emsUserItem.set_item("Title", siteEmsUserlst[siteUsersIterator].title);
                if ((siteEmsUserlst[siteUsersIterator].prefix != null) && (siteEmsUserlst[siteUsersIterator].prefix != "")) {
                    emsUserItem.set_item("prefix", siteEmsUserlst[siteUsersIterator].prefix);
                }
                if ((siteEmsUserlst[siteUsersIterator].FirstName != null) && (siteEmsUserlst[siteUsersIterator].FirstName != "")) {
                    emsUserItem.set_item("FirstName", siteEmsUserlst[siteUsersIterator].FirstName);
                }
                if ((siteEmsUserlst[siteUsersIterator].LastName != null) && (siteEmsUserlst[siteUsersIterator].LastName != "")) {
                    emsUserItem.set_item("LastName", siteEmsUserlst[siteUsersIterator].LastName);
                }
                if ((siteEmsUserlst[siteUsersIterator].Address != null) && (siteEmsUserlst[siteUsersIterator].Address != "")) {
                    emsUserItem.set_item("Address", siteEmsUserlst[siteUsersIterator].Address);
                }

                if ((siteEmsUserlst[siteUsersIterator].CNIC != null) && (siteEmsUserlst[siteUsersIterator].CNIC != "")) {
                    emsUserItem.set_item("CNIC", siteEmsUserlst[siteUsersIterator].CNIC);
                }
                if ((siteEmsUserlst[siteUsersIterator].PassportNumber != null) && (siteEmsUserlst[siteUsersIterator].PassportNumber != "")) {
                    emsUserItem.set_item("PassportNumber", siteEmsUserlst[siteUsersIterator].PassportNumber);
                }
                if ((siteEmsUserlst[siteUsersIterator].Occupation != null) && (siteEmsUserlst[siteUsersIterator].Occupation != "")) {
                    emsUserItem.set_item("Occupation", siteEmsUserlst[siteUsersIterator].Occupation);
                }

                if ((siteEmsUserlst[siteUsersIterator].ContactNumber != null) && (siteEmsUserlst[siteUsersIterator].ContactNumber != "")) {
                    emsUserItem.set_item("ContactNumber", siteEmsUserlst[siteUsersIterator].ContactNumber);
                }

                if ((siteEmsUserlst[siteUsersIterator].FieldInterest != null) && (siteEmsUserlst[siteUsersIterator].FieldInterest != "")) {
                    emsUserItem.set_item("FieldInterest", siteEmsUserlst[siteUsersIterator].FieldInterest);
                }

                if ((siteEmsUserlst[siteUsersIterator].FieldSubInterest != null) && (siteEmsUserlst[siteUsersIterator].FieldSubInterest != "")) {
                    emsUserItem.set_item("FieldSubInterest", siteEmsUserlst[siteUsersIterator].FieldSubInterest);
                }

                if ((siteEmsUserlst[siteUsersIterator].Country != null) && (siteEmsUserlst[siteUsersIterator].Country != "")) {
                    emsUserItem.set_item("Country", siteEmsUserlst[siteUsersIterator].Country);
                }

                if ((siteEmsUserlst[siteUsersIterator].City != null) && (siteEmsUserlst[siteUsersIterator].City != "")) {
                    emsUserItem.set_item("City", siteEmsUserlst[siteUsersIterator].City);
                }
                if ((siteEmsUserlst[siteUsersIterator].RegionProvince != null) && (siteEmsUserlst[siteUsersIterator].RegionProvince != "")) {
                    emsUserItem.set_item("Region_x002f_Province", siteEmsUserlst[siteUsersIterator].RegionProvince);
                }
                if ((siteEmsUserlst[siteUsersIterator].PrimaryAffiliation != null) && (siteEmsUserlst[siteUsersIterator].PrimaryAffiliation != "")) {
                    emsUserItem.set_item("PrimaryAffiliation", siteEmsUserlst[siteUsersIterator].PrimaryAffiliation);
                }
                if ((siteEmsUserlst[siteUsersIterator].IsVerified != null) && (siteEmsUserlst[siteUsersIterator].IsVerified != "")) {
                    emsUserItem.set_item("IsVerified", siteEmsUserlst[siteUsersIterator].IsVerified);
                }
                if ((siteEmsUserlst[siteUsersIterator].UniOrgTitle != null) && (siteEmsUserlst[siteUsersIterator].UniOrgTitle != "")) {
                    emsUserItem.set_item("UniOrgTitle", siteEmsUserlst[siteUsersIterator].UniOrgTitle);
                }
                emsUserItem.set_item("Status", siteEmsUserlst[siteUsersIterator].Status);
                //emsUserItem.set_item("Status", 'Approved');
                emsUserItem.update();
                context.load(emsUserItem);
                context.executeQueryAsync(function () {
                    // Success returned from executeQueryAsync
                    schEventID = emsUserItem.get_id();

                    if (Global_Counter_ForSiteUsers > 0) {
                        Global_Counter_ForSiteUsers--;
                        siteUsersIterator++;
                        SyncAllSiteUsersToApp(siteEmsUserlst, siteUsersIterator);
                    } else {
                        Global_Counter_ForSiteUsers--;
                    }
                    if (Global_Counter_ForSiteUsers < 0) {
                        DisplayManageAppUsers();
                        //EMSUsersDataTable(emsUsersForPrimaryAffiliation);
                    }
                },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        //alert("Failure " + args.get_message());
                        hideLoader();
                    });
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            //alert("Error :" + args.get_message());
            hideLoader();
        });
}


function DisplayManageAppUsers() {

    var emsUsers = [];
    var hasEmsuser = false;
    var appuserTable = document.getElementById("errAllSiteAppUsers");
    //Remove all nodes from the SiteList <DIV> so we have a clean space to write to
    while (appuserTable.hasChildNodes()) {
        appuserTable.removeChild(appuserTable.lastChild);
    }
    var emsuserlist = web.get_lists().getByTitle('EMSUsers');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var emsuserlistItems = emsuserlist.getItems(camlQuery);
    context.load(emsuserlistItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var emsuserlistItemEnumerator = emsuserlistItems.getEnumerator();
            while (emsuserlistItemEnumerator.moveNext()) {
                var emsuserlistItem = emsuserlistItemEnumerator.get_current();
                emsUsers.push(CreateEmsUserDataElement(emsuserlistItem));
                hasEmsuser = true;
            }
            $('#SiteAppusersDiv').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="SiteAppusersTable"></table>');
            var datat = $('#SiteAppusersTable').dataTable({
                "data": emsUsers,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#SiteAppusersTable tbody .rowEditUser').on('click', function () {

                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        ModifyUserProfile(resultArray[5], 'AdminView');
                    });
                },
                "columns": [

                { "title": '<input type="checkbox" id="appchkid" onclick="IsCheckedAll(\'SiteAppusersTable\',\'appchkid\');" />', "width": "4%" },
                     { "title": "ID", "class": "rowEditUser hideColumn", "width": "1%" },
                     { "title": "CNIC / Passport #", "class": "rowEditUser", "width": "5%" },
                     { "title": "First Name", "class": "rowEditUser", "width": "10%" },
                     { "title": "Last Name", "class": "rowEditUser", "width": "10%" },
                     { "title": "Email", "class": "rowEditUser", "width": "10%" },
                     { "title": "Address", "class": "rowEditUser", "width": "10%" },
                     { "title": "Phone", "class": "rowEditUser", "width": "5%" },
                     { "title": "Affiliation", "class": "rowEditUser hideColumn", "width": "15%" },
                     { "title": "Role", "class": "rowEditUser", "width": "5%" },
                     { "title": "Discipline", "class": "rowEditUser hideColumn", "width": "15%" },
                     { "title": "Specialization", "class": "rowEditUser hideColumn", "width": "20%" },
                     { "title": "Primary Affiliation", "class": "rowEditUser ", "width": "20%" },
                     { "title": "Status", "class": "rowEditUser", "width": "5%" }


                ],
                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Users by any attribute i.e Name Email Role etc. ",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });

            $("#appchkid").addClass("checkboxAll");

            if (!hasEmsuser) {
                var noSites = document.createElement("div");
                noSites.appendChild(document.createTextNode("There are no app users."));
                appuserTable.appendChild(noSites);
            }
            hideLoader();
            $('#AllSiteAppUsers').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get app users. Error: " + args.get_message()));
            appuserTable.appendChild(divMessage);
            hideLoader();
            $('#AllSiteAppUsers').fadeIn(500, null);
            
        });
}



function syncusers() {

    var datausers = [];
    var errArea = document.getElementById("errAllUsers");
    // clearing prev error mesges
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    var errappArea = document.getElementById("errAllAppUsers");
    // clearing prev error mesges
    while (errappArea.hasChildNodes()) {
        errappArea.removeChild(errappArea.lastChild);
    }
    hideAllPanels();
    var hostUrl;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostSiteUrl = localStorage.getItem("SPHostUrl");
        hostUrl = hostSiteUrl;
        //window.location = "../Pages/Default.aspx?SPHostUrl=" + hostSiteUrl;
    } else {
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        localStorage.setItem("SPHostUrl", hostSiteUrl);
    }

    $('#Mycontentdiv').show();

    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(
         function () {
             var userTable = document.getElementById("userList");
             // Remove all nodes from the userList <DIV> so we have a clean space to write to
             while (userTable.hasChildNodes()) {
                 userTable.removeChild(userTable.lastChild);
             }
             // Iterate through the user list
             var listItemEnumerator = targetUserResult.getEnumerator();
             while (listItemEnumerator.moveNext()) {
                 var listItem = listItemEnumerator.get_current();
                 datausers.push(CreateUsersDataElement(listItem));
             }
             $('#usersDiv').html('<table cellpadding="0" cellspacing="0" border="0" class="display" id="usersTable"></table>');

             var datat = $('#usersTable').dataTable({
                 //"sScrollX": "100%",
                 //"bScrollCollapse": true,
                 "data": datausers,
                 bProcessing: true,
                 "fnDrawCallback": function () {
                     $('#usersTable tbody .rowEditUser').on('click', function () {
                         var resultArray = $(this).closest('tr').find('td').map(function () {
                             return $(this).text();
                         }).get();


                     });
                 },
                 "columns": [

                 { "title": '<input type="checkbox" id="sitechkid" onclick="IsCheckedAll(\'usersTable\',\'sitechkid\');" />', "class": "checkboxAll", "width": "4%" },
                     { "title": "ID", "class": "rowEditUser hideColumn", "width": "1%" },
                     { "title": "ID#", "class": "rowEditUser", "width": "5%" },
                     { "title": "First Name", "class": "rowEditUser", "width": "10%" },
                     { "title": "Last Name", "class": "rowEditUser", "width": "10%" },
                     { "title": "Email", "class": "rowEditUser", "width": "10%" },
                     { "title": "Address", "class": "rowEditUser", "width": "10%" },
                     { "title": "Phone", "class": "rowEditUser", "width": "5%" },
                     { "title": "Affiliation", "class": "rowEditUser", "width": "15%" },
                     { "title": "Role", "class": "rowEditUser", "width": "5%" },
                     { "title": "Discipline", "class": "rowEditUser", "width": "10%" },
                     { "title": "Specialization", "class": "rowEditUser", "width": "20%" },
                     { "title": "Status", "class": "rowEditUser", "width": "5%" }
                     //{ "title": "", "class": "UserApproved" }



                 ],
                 language: {
                     "search": "_INPUT_",
                     "searchPlaceholder": "Search by any attribute i.e Name Email Address or Discispline etc. ",
                     "paginate": {
                         "first": "<<",
                         "last": ">>",
                         "next": ">",
                         "previous": "<"
                     },
                     "lengthMenu": "_MENU_",
                     "info": "View _START_ - _END_ of _TOTAL_"
                 },
                 "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                 "initComplete": function (settings, json) {
                     var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                     $(this).siblings(".pCustomTitle").html(pHeadingObj);
                 },
                 "pagingType": "input"
             });


             $("#sitechkid").addClass("checkboxAll");
             displayAppUsers();

             $('#AllUsers').fadeIn(500, null);
         },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get Users. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            $('#AllUsers').fadeIn(500, null);
        });


}


function ManageSiteUsers() {
    var errArea = document.getElementById("errAllSiteEventsAttendee");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    AllAttendeeControlHide();
    $('#AllAppUsersVerification').show();

    var _SiteRepIdlst = "";
    var _Orglst = "";
    var unireplist = "";

    var organizationlst = [];
    var uniRep = new SP.CamlQuery();
    uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    unireplist = web.get_lists().getByTitle('SiteRepresentatives');
    var unireplistItems = unireplist.getItems(uniRep);
    context.load(unireplistItems);
    context.executeQueryAsync(
          function () {

              var listItemEnumerator = unireplistItems.getEnumerator();
              while (listItemEnumerator.moveNext()) {
                  var listItem = listItemEnumerator.get_current();
                  _SiteRepIdlst += "<Value Type='Counter'>" + listItem.get_fieldValues()["SiteLookup"].get_lookupValue() + "</Value>";
              }
              if (_SiteRepIdlst == null || _SiteRepIdlst == "")
                  _SiteRepIdlst = "<Value Type='Counter'>0</Value>";


              //var tbodyelemnt = document.createElement("tbody");
              //var siteList = document.getElementById("AllSitesAttendee");

              var siteQuery = new SP.CamlQuery();
              siteQuery.set_viewXml("<View><Query><Where><In><FieldRef Name='ID' /><Values>" + _SiteRepIdlst + "</Values></In></Where></Query></View>");
              list = web.get_lists().getByTitle('PSites');
              var sitelistItems = list.getItems(siteQuery);
              context.load(sitelistItems);
              context.executeQueryAsync(
                  function () {
                      // Success returned from executeQueryAsync
                      var sitelistItemEnumerator = sitelistItems.getEnumerator();
                      while (sitelistItemEnumerator.moveNext()) {
                          var sitelistItem = sitelistItemEnumerator.get_current();
                          if (sitelistItem.get_fieldValues()["OrgLookup"].get_lookupValue() != null) {
                              _Orglst += "<Value Type='Counter'>" + sitelistItem.get_fieldValues()["OrgLookup"].get_lookupValue() + "</Value>";
                          }
                          else
                              _Orglst = "<Value Type='Counter'>0</Value>";
                          //sitesData.push(CreateSitesDataElement(sitelistItem));
                          //hasSites = true;
                      }
                      if (_Orglst == null || _Orglst == "")
                          _Orglst = "<Value Type='Counter'>0</Value>";

                      var eventQuery = new SP.CamlQuery();


                      eventQuery.set_viewXml("<View><Query><Where><In><FieldRef Name='ID'  /><Values>" + _Orglst + "</Values></In></Where></Query></View>");


                      //eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup'  LookupId='TRUE' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
                      list = web.get_lists().getByTitle('Organizations');
                      var listItems = list.getItems(eventQuery);
                      context.load(listItems);
                      context.executeQueryAsync(
                          function () {
                              // Success returned from executeQueryAsync
                              var eventTable = document.getElementById("SiteEventListAttendee");
                              // Remove all nodes from the EventList <DIV> so we have a clean space to write to
                              while (eventTable.hasChildNodes()) {
                                  eventTable.removeChild(eventTable.lastChild);
                              }
                              // Iterate through the event list
                              var eventlistItemEnumerator = listItems.getEnumerator();
                              while (eventlistItemEnumerator.moveNext()) {
                                  var eventlistItem = eventlistItemEnumerator.get_current();
                                  var eventid = eventlistItem.get_fieldValues()["ID"];

                                  organizationlst.push({ ID: eventlistItem.get_fieldValues()["ID"], Title: eventlistItem.get_fieldValues()["Title"] });
                              }

                              if (organizationlst.length > 0) {
                                  var organizationIterator = 0;
                                  Global_Counter_ForOrganization = organizationlst.length - 1;
                                  getEMSUsersForPrimaryAffiliation(organizationlst, organizationIterator);
                              } else {
                                  var emsUsersForPrimaryAffiliation = [];
                                  EMSUsersDataTable(emsUsersForPrimaryAffiliation);
                              }
                              //SiteEventDataTable(eventlst,);


                              //                                dataEventsAttendee.push(CreatSiteEventsDataElement(eventlistItem, reservedRooms));
                              //    hasEvents = true;
                              //}


                          },
                    function (sender, args) {

                    });
                  },
        function (sender, args) {

        });
          },
        function (sender, args) {

        });
}










function VerifyUserProfile(resultArray) {

    var user = [];
    user[0] = resultArray[0];
    user[2] = resultArray[2];
    user[3] = resultArray[3];
    user[4] = resultArray[4];
    
    ChangeSiteAppStatuses('New', user, 'Verifyusers');

    var emsuserList3 = web.get_lists().getByTitle('EMSUsers');
    var emsusercurrentItem2 = emsuserList3.getItemById(id);
    context.load(emsusercurrentItem2);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            emsusercurrentItem2.set_item("IsVerified", 'True');

            emsusercurrentItem2.update();
            context.load(emsusercurrentItem2);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                ManageSiteUsers();
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });

        },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting EMSUsers records: " + args.get_message());
    });

}



function SynSiteEmsUsersToApp(request, objuser) {
    var userid = 0;

    var emsUserList = web.get_lists().getByTitle('EMSUsers');

    //Create a CAML query that retrieves the sites for this organization
    var emsUserQuery = new SP.CamlQuery();
    emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
        + objuser[3]
        + "</Value></Eq></Where></Query></View>");
    var emsUserListItems = emsUserList.getItems(emsUserQuery);
    context.load(emsUserListItems);
    var emsUserlistItem;
    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
            while (emsUserlistItemEnumerator.moveNext()) {
                emsUserlistItem = emsUserlistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //userid.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                userid = emsUserlistItem.get_fieldValues()["ID"];
            }
            if (userid > 0) {


                if (objuser[1] != null) {
                    emsUserlistItem.set_item("CNIC", objuser[1]);
                }


                //emsUserlistItem.set_item("Name1", objuser[2]);
                emsUserlistItem.set_item("prefix", objuser[2]);
                emsUserlistItem.set_item("FirstName", objuser[2]);
                emsUserlistItem.set_item("LastName", objuser[2]);
                if (objuser[5] != null) {
                    emsUserlistItem.set_item("ContactNumber", objuser[5]);
                }
                //emsUserlistItem.set_item("UniOrgTitle", objuser[6]);
                emsUserlistItem.set_item("Country", objuser[2]);
                emsUserlistItem.set_item("City", objuser[2]);
                emsUserlistItem.set_item("Region_x002f_Province", objuser[3]);
                emsUserlistItem.set_item("PassportNumber", objuser[2]);
                emsUserlistItem.set_item("PrimaryAffiliation", objuser[2]);
                emsUserlistItem.set_item("IsVerified", objuser[2]);

                //emsUserlistItem.set_item("ProvinceRegion", objuser[4]);




                if (objuser[7].role != null) {
                    emsUserlistItem.set_item("Occupation", objuser[7].role);
                }
                emsUserlistItem.set_item("FieldInterest", objuser[8]);
                emsUserlistItem.set_item("FieldSubInterest", objuser[9]);


                if (request == 'Approved') {
                    emsUserlistItem.set_item("Status", 'Approved');
                }
                else if (request == 'Added') {
                    emsUserlistItem.set_item("Status", 'Added');
                }


                emsUserlistItem.update();
                context.load(emsUserlistItem);
                context.executeQueryAsync(function () {
                    // Success returned from executeQueryAsync
                    syncusers();
                },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });


            } else {
                var isSync = true;
                ChangeEmsUsersStatus(request, objuser, isSync);

            }
        },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Error :" + args.get_message());
                        });


}

function displayAppUsers() {
    var emsUsers = [];
    var hasEmsuser = false;
    var appuserTable = document.getElementById("errAllAppUsers");
    //Remove all nodes from the SiteList <DIV> so we have a clean space to write to
    while (appuserTable.hasChildNodes()) {
        appuserTable.removeChild(appuserTable.lastChild);
    }
    var emsuserlist = web.get_lists().getByTitle('EMSUsers');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var emsuserlistItems = emsuserlist.getItems(camlQuery);
    context.load(emsuserlistItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var emsuserlistItemEnumerator = emsuserlistItems.getEnumerator();
            while (emsuserlistItemEnumerator.moveNext()) {
                var emsuserlistItem = emsuserlistItemEnumerator.get_current();
                emsUsers.push(CreateEmsUserDataElement(emsuserlistItem));
                hasEmsuser = true;
            }
            $('#AppusersDiv').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="AppUserTable"></table>');
            var datat = $('#AppUserTable').dataTable({
                "data": emsUsers,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#AppUserTable tbody .rowEditUser').on('click', function () {

                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        //if (resultArray[resultArray.length - 1] == 'Added') {
                        //    //AssignUserRoles(resultArray);
                        //}
                        ModifyUserProfile(resultArray[5], 'AdminView');
                    });
                },
                "columns": [

                { "title": '<input type="checkbox" id="appchkid" onclick="IsCheckedAll(\'AppUserTable\',\'appchkid\');" />', "width": "4%" },
                     { "title": "ID", "class": "rowEditUser hideColumn", "width": "1%" },
                     { "title": "ID#", "class": "rowEditUser", "width": "5%" },
                     { "title": "First Name", "class": "rowEditUser", "width": "10%" },
                     { "title": "Last Name", "class": "rowEditUser", "width": "10%" },
                     { "title": "Email", "class": "rowEditUser", "width": "10%" },
                     { "title": "Address", "class": "rowEditUser", "width": "10%" },
                     { "title": "Phone", "class": "rowEditUser", "width": "5%" },
                     { "title": "Affiliation", "class": "rowEditUser", "width": "15%" },
                     { "title": "Role", "class": "rowEditUser", "width": "5%" },
                     { "title": "Discipline", "class": "rowEditUser", "width": "15%" },
                     { "title": "Specialization", "class": "rowEditUser", "width": "20%" },
                     { "title": "Status", "class": "rowEditUser", "width": "5%" }


                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Users by any attribute i.e Name Email Role etc. ",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });

            //$('#AppUserTable tbody .rowEditUser').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    if (resultArray[resultArray.length - 1] == 'Added') {
            //        AssignUserRoles(resultArray);
            //    }
            //});

            //$('#AppUserTable tbody .UserAddedRejected').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    if (resultArray[resultArray.length - 1] == 'Approved') {
            //        ChangeEmsUsersStatus('Approved', resultArray, false);
            //    }
            //    if (resultArray[resultArray.length - 1] == 'Added') {
            //        ChangeEmsUsersStatus('Rejected', resultArray, false);
            //    }
            //});
            $("#appchkid").addClass("checkboxAll");

            if (!hasEmsuser) {
                var noSites = document.createElement("div");
                noSites.appendChild(document.createTextNode("There are no app users."));
                appuserTable.appendChild(noSites);
            }
            $('#AllAppUsers').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get app users. Error: " + args.get_message()));
            appuserTable.appendChild(divMessage);
            $('#AllAppUsers').fadeIn(500, null);
        });


}

function ModifyUserProfile(userprofileEmailId, request) {
    var userprofileEmail;
    $('#request').val(request);
    if (request == 'EmpView') {
        userprofileEmail = useremail;
        $('#lblSuperAdmin').hide();
        $('#chksuperadmin').hide();
        $('#lbladmin').hide();
        $('#chkadmin').hide();
        $('#chkeventOrganizer').hide();
        $('#chkrep').hide();
        $('#imgEventOrganizer').hide();
        $('#imgSiteRep').hide();
        $('#EventOrgStatus').show();
        $('#repStatus').show();
        $('#AddNewRole').show();
        $('#fsUserRoles').show();
        $('#chkeventOrganizer').prop('checked', false);
        $('#chkrep').prop('checked', false);
    } else {
        userprofileEmail = userprofileEmailId;
        $('#fsUserRoles').show();
        if (userprofileEmail == 'AdminEmail') {
            userprofileEmail = useremail;
            $('#fsUserRoles').hide();
        }
        $('#lblSuperAdmin').show();
        $('#chksuperadmin').show();
        $('#lbladmin').show();
        $('#chkadmin').show();
        $('#chkeventOrganizer').show();
        $('#chkrep').show();
        $('#imgEventOrganizer').show();
        $('#imgSiteRep').show();
        $('#EventOrgStatus').hide();
        $('#repStatus').hide();
        $('#AddNewRole').hide();
        $('#chkeventOrganizer').prop('checked', false);
        $('#chkrep').prop('checked', false);
    }
    $('#chksuperadmin').removeAttr("disabled");
    getUserrolesByEmail(userprofileEmail);

    showLoader();
    FillUserProfileDropDowns('ddlCountry', CountrySplst);
    FillUserProfileDropDowns('ddlRegionProvince', RegionSplst);
    FillUserProfileDropDowns('ddlPrimaryAffiliation', AffiliationSplst);
    //FillUserProfileDropDowns('ddlCity', CitySplst);
    FillUniversityDomainDropDown('lstAffiliation', AffiliationSplst);
    FillUniversityDomainDropDown('EditUserUniversityDomain', uniDomainList);
    FillUniversitySubDomainDropDown(-1, 'EditUserUniversitySubDomain', unisubDomainList, false);
    FillOrganizationTypeDropDown('ddlRole', RoleSplst);

    setTimeout(function () {


        //showLoader();
        list = web.get_lists().getByTitle('EMSUsers');

        //Create a CAML query that retrieves the sites for this organization
        var emsUserQuery = new SP.CamlQuery();
        emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title'  /><Value Type='Text'>"
            + userprofileEmail
            + "</Value></Eq></Where></Query></View>");
        var emsUserListItems = list.getItems(emsUserQuery);
        context.load(emsUserListItems);
        context.executeQueryAsync(
            function () {

                // Iterate through the event list
                var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
                while (emsUserlistItemEnumerator.moveNext()) {
                    var emsUserlistItem = emsUserlistItemEnumerator.get_current();

                    $("#ddlCountry option:contains(" + emsUserlistItem.get_fieldValues()["Country"] + ")").attr('selected', 'selected');
                    var countryName = emsUserlistItem.get_fieldValues()["Country"];

                    if (countryName == 'Pakistan') {
                        FillCityDropDown($('#ddlCountry').val(), 'ddlCity', CitySplst, true, emsUserlistItem.get_fieldValues()["City"]);
                        $('#CNIC').val(emsUserlistItem.get_fieldValues()["CNIC"]);
                        $('#ddlRegionProvince').val(emsUserlistItem.get_fieldValues()["Region_x002f_Province"]);
                        $('#lblRegion').show();
                        $('#ddlRegionProvince').show();
                        $('#lblCNIC').show();
                        $('#CNIC').show();
                        $('#lblPassport').hide();
                        $('#passportNumber').hide();
                    } else {
                        $('#passportNumber').val(emsUserlistItem.get_fieldValues()["PassportNumber"]);
                        $('#lblRegion').hide();
                        $('#ddlRegionProvince').hide();
                        $('#lblCNIC').hide();
                        $('#CNIC').hide();
                        $('#lblPassport').show();
                        $('#passportNumber').show();
                    }


                    $('#Email').val(emsUserlistItem.get_fieldValues()["Title"]);
                    //$('#FirstName').val(emsUserlistItem.get_fieldValues()["Name1"]);
                    $('#FirstName').val(emsUserlistItem.get_fieldValues()["FirstName"]);
                    //$('#Prefix').val(emsUserlistItem.get_fieldValues()["Prefix"]);
                    $("#ddlPrefix option[value='" + $.trim(emsUserlistItem.get_fieldValues()["prefix"]) + "']").prop("selected", true);
                    $('#LastName').val(emsUserlistItem.get_fieldValues()["LastName"]);
                    $('#CNIC').val(emsUserlistItem.get_fieldValues()["CNIC"]);
                    $('#Address').val(emsUserlistItem.get_fieldValues()["Address"]);
                    $('#Phone').val(emsUserlistItem.get_fieldValues()["ContactNumber"]);
                    $('#ddlRole').val(emsUserlistItem.get_fieldValues()["Occupation"]);
                    //$('#ddlCountry').val(emsUserlistItem.get_fieldValues()["Country"]);

                    $('#ddlPrimaryAffiliation').val(emsUserlistItem.get_fieldValues()["PrimaryAffiliation"]);

                    $('#ddlRegionProvince').val(emsUserlistItem.get_fieldValues()["Region_x002f_Province"]);


                    var lstAffiliation = emsUserlistItem.get_fieldValues()["UniOrgTitle"];
                    if (lstAffiliation != null) {
                        var arrAffiliation = lstAffiliation.split(';');
                        for (var i = 0; i < (arrAffiliation.length - 1); i++) {
                            $("#lstAffiliation option[value='" + $.trim(arrAffiliation[i]) + "']").prop("selected", true);
                        }
                    }

                    var lstUserUniversityDomain = emsUserlistItem.get_fieldValues()["FieldInterest"];
                    if (lstUserUniversityDomain != null) {
                        var arrUserUniversityDomain = lstUserUniversityDomain.split(';');
                        for (i = 0; i < (arrUserUniversityDomain.length - 1); i++) {
                            $("#EditUserUniversityDomain option[value='" + $.trim(arrUserUniversityDomain[i]) + "']").prop("selected", true);
                        }
                    }

                    var lstUserUniversitySubDomain = emsUserlistItem.get_fieldValues()["FieldSubInterest"];
                    if (lstUserUniversitySubDomain != null) {
                        var arrUserUniversitySubDomain = lstUserUniversitySubDomain.split(';');
                        for (i = 0; i < (arrUserUniversitySubDomain.length - 1); i++) {
                            $("#EditUserUniversitySubDomain option[value='" + $.trim(arrUserUniversitySubDomain[i]) + "']").prop("selected", true);
                        }
                    }

                    //alert($('#ddlRole').val());
                    if ($('#ddlRole').val() == "Student" && request == 'EmpView') {
                        $('#ddlRole').attr("disabled", "true");
                        $('#fsUserRoles').hide();
                    }
                    if (userprofileEmail.toLowerCase() == SuperAdminEmail) {
                        $('#chksuperadmin').attr("disabled", "true");
                    }

                    hideLoader();
                    $('#ModifyUserProfile').dialog({
                        width: 1200,

                        height: 'auto',
                        modal: true,
                        fluid: true,
                        show: {
                            effect: "Scale",
                            duration: 1000
                        },
                        hide: {
                            effect: "Explode",
                            duration: 1000
                        },
                        beforeClose: function (event, ui) {
                            //CancelUserProfile();
                        }
                    });

                    //GetSelectedDomainItems(userid, 'UnivesityDomainMapList', 'editUniversityDomain', 'UniId');
                }
            },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting User Profile: " + args.get_message());
        });

    }, 3000);





}

function CreateEmsUserDataElement(emsuserlistItem) {
    var data = [];
    var email = emsuserlistItem.get_fieldValues()["Title"];
    //var username = emsuserlistItem.get_fieldValues()["Name1"];
    var username = emsuserlistItem.get_fieldValues()["FirstName"];
    var lastname = emsuserlistItem.get_fieldValues()["LastName"];
    var status = emsuserlistItem.get_fieldValues()["Status"];
    var fieldInterest = emsuserlistItem.get_fieldValues()["FieldInterest"];

    var fieldSubInterest = emsuserlistItem.get_fieldValues()["FieldSubInterest"];
    var cnic = emsuserlistItem.get_fieldValues()["CNIC"];
    var role = emsuserlistItem.get_fieldValues()["Occupation"];
    var phone = emsuserlistItem.get_fieldValues()["ContactNumber"];
    var primaryAffiliation = "";

    for (var i = 0; i < SpAffiliationlst.length; i++) {
        var primaryAffItem = SpAffiliationlst[i];
        if (emsuserlistItem.get_fieldValues()["PrimaryAffiliation"] == primaryAffItem.lstItem.get_fieldValues()["AppOrgID"]) {
            //targetUseritem.set_item(SitePrimaryAffiliation, primaryAffItem.lstItem.get_fieldValues()["AppOrgID"]);
            //targetUseritem.set_item(SitePrimaryAffiliation, SpAffiliationlst[i].lstItem);
            primaryAffiliation = primaryAffItem.lstItem.get_fieldValues()["Title"];
        }
    }

    //var provinceRegion = emsuserlistItem.get_fieldValues()["ProvinceRegion"];
    var uniOrgTitle = emsuserlistItem.get_fieldValues()["UniOrgTitle"];

    var address = emsuserlistItem.get_fieldValues()["Address"];
    var city = emsuserlistItem.get_fieldValues()["City"];
    var provinceRegion = emsuserlistItem.get_fieldValues()["Region_x002f_Province"];
    var country = emsuserlistItem.get_fieldValues()["Country"];
    var Address = "";
    if (city)
        Address = address + ", " + city + ", " + provinceRegion + ", " + country;


    var id = emsuserlistItem.get_fieldValues()["ID"];

    data.push('<input type="checkbox" id="' + id + '"  onclick="IsAllRowsChecked(\'AppUserTable\',\'appchkid\');"  />');

    if (id != null && id != undefined) {
        data.push(id);
    }
    else {
        data.push('N/A');
    }
    if (cnic != null && cnic != undefined) {
        data.push(cnic);
    }
    else {
        data.push('N/A');
    }

    if (username != null && username != undefined) {
        data.push(username);
    }
    else {
        data.push('N/A');
    }
    if (lastname != null && lastname != undefined) {
        data.push(lastname);
    }
    else {
        data.push('N/A');
    }
    if (email != null && email != undefined) {
        data.push(email);
    }
    else {
        data.push('N/A');
    }
    //if (provinceRegion != null && provinceRegion != undefined) {
    //    data.push(provinceRegion);
    //}
    //else {
    //    data.push('N/A');
    //}
    if (Address != null && Address != undefined) {
        data.push(Address);
    }
    else {
        data.push('N/A');
    }

    if (phone != null && phone != undefined) {
        data.push(phone);
    }
    else {
        data.push('N/A');
    }

    if (uniOrgTitle != null && uniOrgTitle != undefined) {
        data.push(uniOrgTitle);
    }
    else {
        data.push('N/A');
    }

    if (role != null && role != undefined) {
        data.push(role);
    }
    else {
        data.push('N/A');
    }

    if (fieldInterest != null && fieldInterest != undefined) {
        data.push(fieldInterest);
    }
    else {
        data.push('N/A');
    }

    if (fieldSubInterest != null && fieldSubInterest != undefined) {
        data.push(fieldSubInterest);
    }
    else {
        data.push('N/A');
    }

    if (primaryAffiliation != null && primaryAffiliation != undefined) {
        data.push(primaryAffiliation);
    }
    else {
        data.push('N/A');
    }
    

    if (status != null && status != undefined) {
        data.push(status);
    }
    else {
        data.push('N/A');
    }

    //if (status == 'Approved') {
    //    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-ok" aria-hidden="true"> Add</span></button>');
    //}
    //else if (status == 'Added') {
    //    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true"> Reject</span></button>');
    //}
    //else
    //    data.push('');

    return data;
}

function ChangeSiteEmsUsersStatus(siteUserid, request) {
    var hostUrl;
    hostUrl = getSpHostUrl();
    hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    //var camlQuery = SP.CamlQuery.createAllItemsQuery();
    //var targetUserResult = targetUsersList.getItems(camlQuery);
    var targetUseritem = targetUsersList.getItemById(siteUserid);
    appWebContext.load(targetUseritem);
    appWebContext.executeQueryAsync(
        function () {
            targetUseritem.set_item(SiteColStatus, request);
            targetUseritem.update();
            appWebContext.load(targetUseritem);
            appWebContext.executeQueryAsync(function () {
                if (GC_ForSiteAppUsersRequest > 0) {
                    GC_ForSiteAppUsersRequest--;
                } else {
                    GC_ForSiteAppUsersRequest--;
                }
                if (GC_ForSiteAppUsersRequest < 0) {
                    syncSiteAppusers();
                }
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                //alert("Error :" + args.get_message());
                GC_ForSiteAppUsersRequest--;
            });
            });
}

function ChangeEmsUsersStatus(request, user, isSync) {
    if (request == 'New') {
        var emsuser = [];
        // Get all the Rooms associated with the siteId gotten in eventobject
        var emsUserList1 = web.get_lists().getByTitle('EMSUsers');

        //Create a CAML query that retrieves the sites for this organization
        var emsUserQuery = new SP.CamlQuery();
        emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>" + user[4] + "</Value></Eq></Where></Query></View>");
        var emsUserListItems = emsUserList1.getItems(emsUserQuery);
        context.load(emsUserListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
                while (emsUserlistItemEnumerator.moveNext()) {
                    var emsUserlistItem = emsUserlistItemEnumerator.get_current();
                    emsuser.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                }
                if (emsuser.length > 0) {
                    var emsuserList3 = web.get_lists().getByTitle('EMSUsers');
                    var emsusercurrentItem2 = emsuserList3.getItemById(emsuser[0].Id);
                    context.load(emsusercurrentItem2);
                    context.executeQueryAsync(
                        function () {
                            // Success returned from executeQueryAsync

                            if (request == 'Rejected') {
                                emsusercurrentItem2.set_item("Status", 'Approved');
                            }
                            else if (request == 'New') {
                                emsusercurrentItem2.set_item("Status", 'Approved');
                            }
                            emsusercurrentItem2.update();
                            context.load(emsusercurrentItem2);
                            context.executeQueryAsync(function () {
                                // Success returned from executeQueryAsync
                                syncSiteAppusers();
                            },
                            function (sender, args) {
                                // Failure returned from executeQueryAsync
                                alert("Error :" + args.get_message());
                            });

                        },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error in getting EMSUsers records: " + args.get_message());
                    });

                } else {

                    var emsUserList = web.get_lists().getByTitle('EMSUsers');
                    var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                    var emsUserItem = emsUserList.addItem(emsUseritemCreateInfo);

                    //emsUserItem.set_item("Name1", user[1]);
                    //emsUserItem.set_item("Title", user[2]);                    
                    //emsUserItem.set_item("UniOrgTitle", user[3]);
                    //emsUserItem.set_item("FieldInterest", user[4]);
                    //emsUserItem.set_item("FieldSubInterest", user[5]);

                    //emsUserItem.set_item("ProvinceRegion", user[5]);



                    if ((user[1] != null) && (user[1] != "")) {
                        emsUserItem.set_item("CNIC", user[1]);
                    }


                    emsUserItem.set_item("Name1", user[2]);
                    emsUserItem.set_item("Title", user[3]);

                    if ((user[4] != null) && (user[4] != "")) {
                        emsUserItem.set_item("ProvinceRegion", user[4]);
                    }

                    if ((user[5] != null) && (user[5] != "")) {
                        emsUserItem.set_item("ContactNumber", user[5]);
                    }

                    if ((user[6] != null) && (user[6] != "")) {
                        emsUserItem.set_item("UniOrgTitle", user[6]);
                    }

                    if ((user[7] != null) && (user[7] != "")) {
                        emsUserItem.set_item("Occupation", user[7]);
                    }

                    if ((user[8] != null) && (user[8] != "")) {
                        emsUserItem.set_item("FieldInterest", user[8]);
                    }

                    if ((user[9] != null) && (user[9] != "")) {
                        emsUserItem.set_item("FieldSubInterest", user[9]);
                    }



                    emsUserItem.set_item("Status", 'Approved');


                    emsUserItem.update();

                    context.load(emsUserItem);
                    context.executeQueryAsync(function () {
                        // Success returned from executeQueryAsync
                        schEventID = emsUserItem.get_id();
                        syncSiteAppusers();
                    },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Failure " + args.get_message());
                        });
                }

            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });



    }
    else if (request == 'Approved' && isSync == false) {

        var email = user[4];
        var username = user[2];
        var status = user[user.length - 1];
        var appuser = user;
        if (status == "Approved") {
        addPermission(email, username, appuser);
        }


    }
    else if (request == 'Rejected') {
        var emsuserList2 = web.get_lists().getByTitle("EMSUsers");
        var emsusercurrentItem1 = emsuserList2.getItemById(user[0]);
        emsusercurrentItem1.deleteObject();
        // changes site status to rejected
        var userEmail = user[4];
        changeSiteemsuserlist(userEmail, 'Rejected');
        deleteEmsUserRoles(userEmail);
        }
    else if (request == 'Added' || (request == 'Approved' && isSync == true)) {
        var emsUserList = web.get_lists().getByTitle('EMSUsers');
        var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
        var emsUserItem = emsUserList.addItem(emsUseritemCreateInfo);
        if (user[1] == null) {
            emsUserItem.set_item("CNIC", "N/A");
        }
        else {
            emsUserItem.set_item("CNIC", user[1]);
        }
        
        emsUserItem.set_item("Name1", user[2]);
        emsUserItem.set_item("Title", user[3]);
        if (user[4] == null) {
            emsUserItem.set_item("ProvinceRegion", "N/A");
        }
        else {
            emsUserItem.set_item("ProvinceRegion", user[4]);
        }

        if (user[5] == null) {
            emsUserItem.set_item("ContactNumber", "N/A");
        }
        else {
            emsUserItem.set_item("ContactNumber", user[5]);
        }

        if (user[6] == null) {
            emsUserItem.set_item("UniOrgTitle", "N/A");
        }
        else {
            emsUserItem.set_item("UniOrgTitle", user[6]);
        }

        if (user[7] == null) {
            emsUserItem.set_item("Occupation", "N/A");
        }
        else {
            emsUserItem.set_item("Occupation", user[7]);
        }

        if (user[8] == null) {
            emsUserItem.set_item("FieldInterest", "N/A");
        }
        else {
            emsUserItem.set_item("FieldInterest", user[8]);
        }

        if (user[9] == null) {
            emsUserItem.set_item("FieldSubInterest", "N/A");
        }
        else {
            emsUserItem.set_item("FieldSubInterest", user[9]);
        }

        emsUserItem.set_item("Status", request);


        emsUserItem.update();

        context.load(emsUserItem);
        context.executeQueryAsync(function () {
            // Success returned from executeQueryAsync
            schEventID = emsUserItem.get_id();
            syncSiteAppusers();
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });


    }
}

function ChangeSiteAppStatuses(request, user, callingfunction) {
    if (request == 'New') {
        var emsuser = [];
        // Get all the Rooms associated with the siteId gotten in eventobject
        var emsUserList1 = web.get_lists().getByTitle('EMSUsers');
        //Create a CAML query that retrieves the sites for this organization
        var emsUserQuery = new SP.CamlQuery();
        emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
            + user[4]
            + "</Value></Eq></Where></Query></View>");
        var emsUserListItems = emsUserList1.getItems(emsUserQuery);
        context.load(emsUserListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
                while (emsUserlistItemEnumerator.moveNext()) {
                    var emsUserlistItem = emsUserlistItemEnumerator.get_current();
                    emsuser.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                }
                if (emsuser.length > 0) {
                    var emsuserList3 = web.get_lists().getByTitle('EMSUsers');
                    var emsusercurrentItem2 = emsuserList3.getItemById(emsuser[0].Id);
                    context.load(emsusercurrentItem2);
                    context.executeQueryAsync(
                        function () {
                            // Success returned from executeQueryAsync
                            emsusercurrentItem2.set_item("Title", emsuser[0].title);
                            emsusercurrentItem2.set_item("Status", 'Approved');
                            emsusercurrentItem2.update();
                            context.load(emsusercurrentItem2);
                            context.executeQueryAsync(function () {
                                //syncSiteAppusers();
                                    if (callingfunction == 'ManageUser')
                                    {
                                        if (GC_ForSiteAppUsersRequest > 0) {
                                            GC_ForSiteAppUsersRequest--;
                                        } else {
                                            GC_ForSiteAppUsersRequest--;
                                        }
                                        if (GC_ForSiteAppUsersRequest < 0) {
                                            syncSiteAppusers();
                                        }
                                    }
                                },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    GC_ForSiteAppUsersRequest--;
                                    //alert("Error :" + args.get_message());
                                });
                        },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            //alert("Error in getting EMSUsers records: " + args.get_message());
                            GC_ForSiteAppUsersRequest--;
                        });
                    } else {
                    var emsUserList = web.get_lists().getByTitle('EMSUsers');
                    var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                    var emsUserItem = emsUserList.addItem(emsUseritemCreateInfo);

                    emsUserItem.set_item("Title", emsuser[0].title);
                    emsUserItem.set_item("Status", 'Approved');
                    emsUserItem.update();
                    context.load(emsUserItem);
                    context.executeQueryAsync(function () {
                        // Success returned from executeQueryAsync
                        schEventID = emsUserItem.get_id();
                        if (GC_ForSiteAppUsersRequest > 0) {
                            GC_ForSiteAppUsersRequest--;
                        } else {
                            GC_ForSiteAppUsersRequest--;
                        }
                        if (GC_ForSiteAppUsersRequest < 0) {
                            syncSiteAppusers();
                        }
                    },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            //alert("Failure " + args.get_message());
                            GC_ForSiteAppUsersRequest--;
                        });
                }
                },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                //alert("Error :" + args.get_message());
                GC_ForSiteAppUsersRequest--;
            });
    }
    else if (request == 'Approved') {
        var email = user[4];
        var username = user[2];
        //var username = user[2] + " " + user[3];
        var appuser = user;
        addPermission(email, username, appuser);
    }
    else if (request == 'Rejected') {
        var emsuserList2 = web.get_lists().getByTitle("EMSUsers");
        var emsusercurrentItem1 = emsuserList2.getItemById(user[0]);
        emsusercurrentItem1.deleteObject();
        var userEmail = user[4];
        changeSiteemsuserlist(userEmail, 'Rejected');
        deleteEmsUserRoles(userEmail);
    }
}


function ChangeEmsUsersProfile(request, user, isSync) {
    var hostUrl;
    hostUrl = getSpHostUrl();
    //var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    //var camlQuery = SP.CamlQuery.createAllItemsQuery();
    //var targetUserResult = targetUsersList.getItems(camlQuery);
    var listItem = targetUsersList.getItemById(user[0]);
    appWebContext.load(listItem);
    appWebContext.executeQueryAsync(
        function () {
            var role = "";
            if (listItem.get_fieldValues()[SiteColProfession] != null) {
                role = listItem.get_fieldValues()[SiteColProfession].get_lookupValue();
            } else {
                role = "";
            }
            var uniOrgTitle = "";
            if ((listItem.get_fieldValues()[SiteColUniTitle] != null) && (listItem.get_fieldValues()[SiteColUniTitle].length != 0)) {
                var x = listItem.get_fieldValues()[SiteColUniTitle].length;
                for (var i = 0; i < x; i++) {
                    uniOrgTitle += (listItem.get_fieldValues()[SiteColUniTitle][i]).get_lookupValue() + " ; ";

                }
            } else { uniOrgTitle = ""; }
            var fieldInterest = "";
            if ((listItem.get_fieldValues()[SiteColInterest] != null) && (listItem.get_fieldValues()[SiteColInterest].length != 0)) {

                var x = listItem.get_fieldValues()[SiteColInterest].length;
                for (var i = 0; i < x; i++) {
                    fieldInterest += (listItem.get_fieldValues()[SiteColInterest][i]).get_lookupValue() + " ; ";
                }
            } else { fieldInterest = ""; }
            var fieldSubInterest = "";
            if ((listItem.get_fieldValues()[SiteColSubInterest] != null) && (listItem.get_fieldValues()[SiteColSubInterest].length != 0)) {
                var x = listItem.get_fieldValues()[SiteColSubInterest].length;
                for (var i = 0; i < x; i++) {
                    fieldSubInterest += (listItem.get_fieldValues()[SiteColSubInterest][i]).get_lookupValue() + " ; ";
                }
            } else { fieldSubInterest = ""; }
            var provinceRegion = "";
            if (listItem.get_fieldValues()[SiteColRegion] != null) {
                provinceRegion = listItem.get_fieldValues()[SiteColRegion].get_lookupValue();
            } else { provinceRegion = ""; }
            var Country = "";
            if (listItem.get_fieldValues()[SiteColCountry] != null) {
                Country = listItem.get_fieldValues()[SiteColCountry].get_lookupValue();
            } else { Country = ""; }
            var City = "";
            if (listItem.get_fieldValues()[SiteColCity] != null) {
                City = listItem.get_fieldValues()[SiteColCity].get_lookupValue();
            } else { City = ""; }
            var objSiteEmsUser = [];
            objSiteEmsUser.push({ title: listItem.get_fieldValues()[SiteTitle], prefix: listItem.get_fieldValues()[SiteColPrefix], FirstName: listItem.get_fieldValues()[SiteColName], LastName: listItem.get_fieldValues()[SiteColLName], Address: listItem.get_fieldValues()[SiteColAddress], CNIC: listItem.get_fieldValues()[SiteColCNIC], PassportNumber: listItem.get_fieldValues()[SitePassportNumber], Occupation: role, ContactNumber: listItem.get_fieldValues()[SiteContactNumber], Status: listItem.get_fieldValues()[SiteColStatus], FieldInterest: fieldInterest, FieldSubInterest: fieldSubInterest, Country: Country, City: City, RegionProvince: provinceRegion, PrimaryAffiliation: listItem.get_fieldValues()[SitePrimaryAffiliation], IsVerified: listItem.get_fieldValues()[SiteisVerified], UniOrgTitle: uniOrgTitle });

            if (request == 'New') {
                var emsuser = [];
                // Get all the Rooms associated with the siteId gotten in eventobject
                var emsUserList1 = web.get_lists().getByTitle('EMSUsers');
                //Create a CAML query that retrieves the sites for this organization
                var emsUserQuery = new SP.CamlQuery();
                emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
                    + user[4]
                    + "</Value></Eq></Where></Query></View>");
                var emsUserListItems = emsUserList1.getItems(emsUserQuery);
                context.load(emsUserListItems);
                context.executeQueryAsync(
                    function () {
                        // Iterate through the event list
                        var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
                        while (emsUserlistItemEnumerator.moveNext()) {
                            var emsUserlistItem = emsUserlistItemEnumerator.get_current();
                            emsuser.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                        }
                        if (emsuser.length > 0) {
                            var emsuserList3 = web.get_lists().getByTitle('EMSUsers');
                            var emsusercurrentItem2 = emsuserList3.getItemById(emsuser[0].Id);
                            context.load(emsusercurrentItem2);
                            context.executeQueryAsync(
                                function () {
                                    // Success returned from executeQueryAsync
                                    emsusercurrentItem2.set_item("Title", objSiteEmsUser[0].title);
                                    if ((objSiteEmsUser[0].prefix != null) && (objSiteEmsUser[0].prefix != "")) {
                                        emsusercurrentItem2.set_item("prefix", objSiteEmsUser[0].prefix);
                                    }
                                    if ((objSiteEmsUser[0].FirstName != null) && (objSiteEmsUser[0].FirstName != "")) {
                                        emsusercurrentItem2.set_item("FirstName", objSiteEmsUser[0].FirstName);
                                    }
                                    if ((objSiteEmsUser[0].LastName != null) && (objSiteEmsUser[0].LastName != "")) {
                                        emsusercurrentItem2.set_item("LastName", objSiteEmsUser[0].LastName);
                                    }
                                    if ((objSiteEmsUser[0].Address != null) && (objSiteEmsUser[0].Address != "")) {
                                        emsusercurrentItem2.set_item("Address", objSiteEmsUser[0].Address);
                                    }

                                    if ((objSiteEmsUser[0].CNIC != null) && (objSiteEmsUser[0].CNIC != "")) {
                                        emsusercurrentItem2.set_item("CNIC", objSiteEmsUser[0].CNIC);
                                    }
                                    if ((objSiteEmsUser[0].PassportNumber != null) && (objSiteEmsUser[0].PassportNumber != "")) {
                                        emsusercurrentItem2.set_item("PassportNumber", objSiteEmsUser[0].PassportNumber);
                                    }
                                    if ((objSiteEmsUser[0].Occupation != null) && (objSiteEmsUser[0].Occupation != "")) {
                                        emsusercurrentItem2.set_item("Occupation", objSiteEmsUser[0].Occupation);
                                    }

                                    if ((objSiteEmsUser[0].ContactNumber != null) && (objSiteEmsUser[0].ContactNumber != "")) {
                                        emsusercurrentItem2.set_item("ContactNumber", objSiteEmsUser[0].ContactNumber);
                                    }

                                    if ((objSiteEmsUser[0].FieldInterest != null) && (objSiteEmsUser[0].FieldInterest != "")) {
                                        emsusercurrentItem2.set_item("FieldInterest", objSiteEmsUser[0].FieldInterest);
                                    }

                                    if ((objSiteEmsUser[0].FieldSubInterest != null) && (objSiteEmsUser[0].FieldSubInterest != "")) {
                                        emsusercurrentItem2.set_item("FieldSubInterest", objSiteEmsUser[0].FieldSubInterest);
                                    }

                                    if ((objSiteEmsUser[0].Country != null) && (objSiteEmsUser[0].Country != "")) {
                                        emsusercurrentItem2.set_item("Country", objSiteEmsUser[0].Country);
                                    }

                                    if ((objSiteEmsUser[0].City != null) && (objSiteEmsUser[0].City != "")) {
                                        emsusercurrentItem2.set_item("City", objSiteEmsUser[0].City);
                                    }
                                    if ((objSiteEmsUser[0].RegionProvince != null) && (objSiteEmsUser[0].RegionProvince != "")) {
                                        emsusercurrentItem2.set_item("Region_x002f_Province", objSiteEmsUser[0].RegionProvince);
                                    }
                                    if ((objSiteEmsUser[0].PrimaryAffiliation != null) && (objSiteEmsUser[0].PrimaryAffiliation != "")) {
                                        emsusercurrentItem2.set_item("PrimaryAffiliation", objSiteEmsUser[0].PrimaryAffiliation);
                                    }
                                    if ((objSiteEmsUser[0].IsVerified != null) && (objSiteEmsUser[0].IsVerified != "")) {
                                        emsusercurrentItem2.set_item("IsVerified", objSiteEmsUser[0].IsVerified);
                                    }
                                    if ((objSiteEmsUser[0].UniOrgTitle != null) && (objSiteEmsUser[0].UniOrgTitle != "")) {
                                        emsusercurrentItem2.set_item("UniOrgTitle", objSiteEmsUser[0].UniOrgTitle);
                                    }
                                    emsusercurrentItem2.set_item("Status", 'Approved');
                                    emsusercurrentItem2.update();
                                    context.load(emsusercurrentItem2);
                                    context.executeQueryAsync(function () {
                                        syncSiteAppusers();
                                    },
                                        function (sender, args) {
                                            // Failure returned from executeQueryAsync
                                            alert("Error :" + args.get_message());
                                        });
                                },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    alert("Error in getting EMSUsers records: " + args.get_message());
                                });

                        } else {
                            var emsUserList = web.get_lists().getByTitle('EMSUsers');
                            var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                            var emsUserItem = emsUserList.addItem(emsUseritemCreateInfo);

                            emsUserItem.set_item("Title", objSiteEmsUser[0].title);
                            if ((objSiteEmsUser[0].prefix != null) && (objSiteEmsUser[0].prefix != "")) {
                                emsUserItem.set_item("prefix", objSiteEmsUser[0].prefix);
                            }
                            if ((objSiteEmsUser[0].FirstName != null) && (objSiteEmsUser[0].FirstName != "")) {
                                emsUserItem.set_item("FirstName", objSiteEmsUser[0].FirstName);
                            }
                            if ((objSiteEmsUser[0].LastName != null) && (objSiteEmsUser[0].LastName != "")) {
                                emsUserItem.set_item("LastName", objSiteEmsUser[0].LastName);
                            }
                            if ((objSiteEmsUser[0].Address != null) && (objSiteEmsUser[0].Address != "")) {
                                emsUserItem.set_item("Address", objSiteEmsUser[0].Address);
                            }

                            if ((objSiteEmsUser[0].CNIC != null) && (objSiteEmsUser[0].CNIC != "")) {
                                emsUserItem.set_item("CNIC", objSiteEmsUser[0].CNIC);
                            }
                            if ((objSiteEmsUser[0].PassportNumber != null) && (objSiteEmsUser[0].PassportNumber != "")) {
                                emsUserItem.set_item("PassportNumber", objSiteEmsUser[0].PassportNumber);
                            }
                            if ((objSiteEmsUser[0].Occupation != null) && (objSiteEmsUser[0].Occupation != "")) {
                                emsUserItem.set_item("Occupation", objSiteEmsUser[0].Occupation);
                            }

                            if ((objSiteEmsUser[0].ContactNumber != null) && (objSiteEmsUser[0].ContactNumber != "")) {
                                emsUserItem.set_item("ContactNumber", objSiteEmsUser[0].ContactNumber);
                            }

                            if ((objSiteEmsUser[0].FieldInterest != null) && (objSiteEmsUser[0].FieldInterest != "")) {
                                emsUserItem.set_item("FieldInterest", objSiteEmsUser[0].FieldInterest);
                            }

                            if ((objSiteEmsUser[0].FieldSubInterest != null) && (objSiteEmsUser[0].FieldSubInterest != "")) {
                                emsUserItem.set_item("FieldSubInterest", objSiteEmsUser[0].FieldSubInterest);
                            }

                            if ((objSiteEmsUser[0].Country != null) && (objSiteEmsUser[0].Country != "")) {
                                emsUserItem.set_item("Country", objSiteEmsUser[0].Country);
                            }

                            if ((objSiteEmsUser[0].City != null) && (objSiteEmsUser[0].City != "")) {
                                emsUserItem.set_item("City", objSiteEmsUser[0].City);
                            }
                            if ((objSiteEmsUser[0].RegionProvince != null) && (objSiteEmsUser[0].RegionProvince != "")) {
                                emsUserItem.set_item("Region_x002f_Province", objSiteEmsUser[0].RegionProvince);
                            }
                            if ((objSiteEmsUser[0].PrimaryAffiliation != null) && (objSiteEmsUser[0].PrimaryAffiliation != "")) {
                                emsUserItem.set_item("PrimaryAffiliation", objSiteEmsUser[0].PrimaryAffiliation);
                            }
                            if ((objSiteEmsUser[0].IsVerified != null) && (objSiteEmsUser[0].IsVerified != "")) {
                                emsUserItem.set_item("IsVerified", objSiteEmsUser[0].IsVerified);
                            }
                            if ((objSiteEmsUser[0].UniOrgTitle != null) && (objSiteEmsUser[0].UniOrgTitle != "")) {
                                emsUserItem.set_item("UniOrgTitle", objSiteEmsUser[0].UniOrgTitle);
                            }
                            emsUserItem.set_item("Status", 'Approved');
                            emsUserItem.update();
                            context.load(emsUserItem);
                            context.executeQueryAsync(function () {
                                // Success returned from executeQueryAsync
                                schEventID = emsUserItem.get_id();
                                syncSiteAppusers();
                            },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    alert("Failure " + args.get_message());
                                });
                        }

                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error :" + args.get_message());
                    });
            }
            else if (request == 'Approved' && isSync == false) {
                var email = user[4];
                var username = user[2];
                //var username = user[2] + " " + user[3];
                var status = user[user.length - 1];
                var appuser = user;
                addPermission(email, username, appuser);
            }
            else if (request == 'Rejected') {
                var emsuserList2 = web.get_lists().getByTitle("EMSUsers");
                var emsusercurrentItem1 = emsuserList2.getItemById(user[0]);
                emsusercurrentItem1.deleteObject();
                var userEmail = user[4];
                changeSiteemsuserlist(userEmail, 'Rejected');
                deleteEmsUserRoles(userEmail);
            }
            else if (request == 'Added' || (request == 'Approved' && isSync == true)) {
                var emsuser1 = [];
                // Get all the Rooms associated with the siteId gotten in eventobject
                var emsUserList2 = web.get_lists().getByTitle('EMSUsers');
                //Create a CAML query that retrieves the sites for this organization
                var emsUserQuery1 = new SP.CamlQuery();
                emsUserQuery1.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
                    + user[4]
                    + "</Value></Eq></Where></Query></View>");
                var emsUserListItems1 = emsUserList2.getItems(emsUserQuery1);
                context.load(emsUserListItems1);
                context.executeQueryAsync(
                    function () {
                        // Iterate through the event list
                        var emsUserlistItemEnumerator = emsUserListItems1.getEnumerator();
                        while (emsUserlistItemEnumerator.moveNext()) {
                            var emsUserlistItem = emsUserlistItemEnumerator.get_current();
                            // populated the rooms for the specific site
                            emsuser1.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                        }
                        if (emsuser1.length > 0) {
                            var emsuserList3 = web.get_lists().getByTitle('EMSUsers');
                            var emsusercurrentItem2 = emsuserList3.getItemById(emsuser1[0].Id);
                            context.load(emsusercurrentItem2);
                            context.executeQueryAsync(
                                function () {
                                    // Success returned from executeQueryAsync

                                    emsusercurrentItem2.set_item("Title", objSiteEmsUser[0].title);
                                    if ((objSiteEmsUser[0].prefix != null) && (objSiteEmsUser[0].prefix != "")) {
                                        emsusercurrentItem2.set_item("prefix", objSiteEmsUser[0].prefix);
                                    }
                                    if ((objSiteEmsUser[0].FirstName != null) && (objSiteEmsUser[0].FirstName != "")) {
                                        emsusercurrentItem2.set_item("FirstName", objSiteEmsUser[0].FirstName);
                                    }
                                    if ((objSiteEmsUser[0].LastName != null) && (objSiteEmsUser[0].LastName != "")) {
                                        emsusercurrentItem2.set_item("LastName", objSiteEmsUser[0].LastName);
                                    }
                                    if ((objSiteEmsUser[0].Address != null) && (objSiteEmsUser[0].Address != "")) {
                                        emsusercurrentItem2.set_item("Address", objSiteEmsUser[0].Address);
                                    }

                                    if ((objSiteEmsUser[0].CNIC != null) && (objSiteEmsUser[0].CNIC != "")) {
                                        emsusercurrentItem2.set_item("CNIC", objSiteEmsUser[0].CNIC);
                                    }
                                    if ((objSiteEmsUser[0].PassportNumber != null) && (objSiteEmsUser[0].PassportNumber != "")) {
                                        emsusercurrentItem2.set_item("PassportNumber", objSiteEmsUser[0].PassportNumber);
                                    }
                                    if ((objSiteEmsUser[0].Occupation != null) && (objSiteEmsUser[0].Occupation != "")) {
                                        emsusercurrentItem2.set_item("Occupation", objSiteEmsUser[0].Occupation);
                                    }

                                    if ((objSiteEmsUser[0].ContactNumber != null) && (objSiteEmsUser[0].ContactNumber != "")) {
                                        emsusercurrentItem2.set_item("ContactNumber", objSiteEmsUser[0].ContactNumber);
                                    }

                                    if ((objSiteEmsUser[0].FieldInterest != null) && (objSiteEmsUser[0].FieldInterest != "")) {
                                        emsusercurrentItem2.set_item("FieldInterest", objSiteEmsUser[0].FieldInterest);
                                    }

                                    if ((objSiteEmsUser[0].FieldSubInterest != null) && (objSiteEmsUser[0].FieldSubInterest != "")) {
                                        emsusercurrentItem2.set_item("FieldSubInterest", objSiteEmsUser[0].FieldSubInterest);
                                    }

                                    if ((objSiteEmsUser[0].Country != null) && (objSiteEmsUser[0].Country != "")) {
                                        emsusercurrentItem2.set_item("Country", objSiteEmsUser[0].Country);
                                    }

                                    if ((objSiteEmsUser[0].City != null) && (objSiteEmsUser[0].City != "")) {
                                        emsusercurrentItem2.set_item("City", objSiteEmsUser[0].City);
                                    }
                                    if ((objSiteEmsUser[0].RegionProvince != null) && (objSiteEmsUser[0].RegionProvince != "")) {
                                        emsusercurrentItem2.set_item("Region_x002f_Province", objSiteEmsUser[0].RegionProvince);
                                    }
                                    if ((objSiteEmsUser[0].PrimaryAffiliation != null) && (objSiteEmsUser[0].PrimaryAffiliation != "")) {
                                        emsusercurrentItem2.set_item("PrimaryAffiliation", objSiteEmsUser[0].PrimaryAffiliation);
                                    }
                                    if ((objSiteEmsUser[0].IsVerified != null) && (objSiteEmsUser[0].IsVerified != "")) {
                                        emsusercurrentItem2.set_item("IsVerified", objSiteEmsUser[0].IsVerified);
                                    }
                                    if ((objSiteEmsUser[0].UniOrgTitle != null) && (objSiteEmsUser[0].UniOrgTitle != "")) {
                                        emsusercurrentItem2.set_item("UniOrgTitle", objSiteEmsUser[0].UniOrgTitle);
                                    }
                                    emsusercurrentItem2.set_item("Status", request);


                                    emsusercurrentItem2.update();
                                    context.load(emsusercurrentItem2);
                                    context.executeQueryAsync(function () {
                                        // Success returned from executeQueryAsync
                                        syncSiteAppusers();
                                    },
                                        function (sender, args) {
                                            // Failure returned from executeQueryAsync
                                            alert("Error :" + args.get_message());
                                        });

                                },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    alert("Error in getting EMSUsers records: " + args.get_message());
                                });

                        } else {

                            var emsUserList = web.get_lists().getByTitle('EMSUsers');
                            var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                            var emsUserItem = emsUserList.addItem(emsUseritemCreateInfo);


                            emsUserItem.set_item("Title", objSiteEmsUser[0].title);
                            if ((objSiteEmsUser[0].prefix != null) && (objSiteEmsUser[0].prefix != "")) {
                                emsUserItem.set_item("prefix", objSiteEmsUser[0].prefix);
                            }
                            if ((objSiteEmsUser[0].FirstName != null) && (objSiteEmsUser[0].FirstName != "")) {
                                emsUserItem.set_item("FirstName", objSiteEmsUser[0].FirstName);
                            }
                            if ((objSiteEmsUser[0].LastName != null) && (objSiteEmsUser[0].LastName != "")) {
                                emsUserItem.set_item("LastName", objSiteEmsUser[0].LastName);
                            }
                            if ((objSiteEmsUser[0].Address != null) && (objSiteEmsUser[0].Address != "")) {
                                emsUserItem.set_item("Address", objSiteEmsUser[0].Address);
                            }

                            if ((objSiteEmsUser[0].CNIC != null) && (objSiteEmsUser[0].CNIC != "")) {
                                emsUserItem.set_item("CNIC", objSiteEmsUser[0].CNIC);
                            }
                            if ((objSiteEmsUser[0].PassportNumber != null) && (objSiteEmsUser[0].PassportNumber != "")) {
                                emsUserItem.set_item("PassportNumber", objSiteEmsUser[0].PassportNumber);
                            }
                            if ((objSiteEmsUser[0].Occupation != null) && (objSiteEmsUser[0].Occupation != "")) {
                                emsUserItem.set_item("Occupation", objSiteEmsUser[0].Occupation);
                            }

                            if ((objSiteEmsUser[0].ContactNumber != null) && (objSiteEmsUser[0].ContactNumber != "")) {
                                emsUserItem.set_item("ContactNumber", objSiteEmsUser[0].ContactNumber);
                            }

                            if ((objSiteEmsUser[0].FieldInterest != null) && (objSiteEmsUser[0].FieldInterest != "")) {
                                emsUserItem.set_item("FieldInterest", objSiteEmsUser[0].FieldInterest);
                            }

                            if ((objSiteEmsUser[0].FieldSubInterest != null) && (objSiteEmsUser[0].FieldSubInterest != "")) {
                                emsUserItem.set_item("FieldSubInterest", objSiteEmsUser[0].FieldSubInterest);
                            }

                            if ((objSiteEmsUser[0].Country != null) && (objSiteEmsUser[0].Country != "")) {
                                emsUserItem.set_item("Country", objSiteEmsUser[0].Country);
                            }

                            if ((objSiteEmsUser[0].City != null) && (objSiteEmsUser[0].City != "")) {
                                emsUserItem.set_item("City", objSiteEmsUser[0].City);
                            }
                            if ((objSiteEmsUser[0].RegionProvince != null) && (objSiteEmsUser[0].RegionProvince != "")) {
                                emsUserItem.set_item("Region_x002f_Province", objSiteEmsUser[0].RegionProvince);
                            }
                            if ((objSiteEmsUser[0].PrimaryAffiliation != null) && (objSiteEmsUser[0].PrimaryAffiliation != "")) {
                                emsUserItem.set_item("PrimaryAffiliation", objSiteEmsUser[0].PrimaryAffiliation);
                            }
                            if ((objSiteEmsUser[0].IsVerified != null) && (objSiteEmsUser[0].IsVerified != "")) {
                                emsUserItem.set_item("IsVerified", objSiteEmsUser[0].IsVerified);
                            }
                            if ((objSiteEmsUser[0].UniOrgTitle != null) && (objSiteEmsUser[0].UniOrgTitle != "")) {
                                emsUserItem.set_item("UniOrgTitle", objSiteEmsUser[0].UniOrgTitle);
                            }
                            emsUserItem.set_item("Status", request);
                            emsUserItem.update();
                            context.load(emsUserItem);
                            context.executeQueryAsync(function () {
                                // Success returned from executeQueryAsync
                                var spEmsUserId = emsUserItem.get_id();
                                syncSiteAppusers();
                            },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    alert("Failure " + args.get_message());
                                });
                        }


                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error :" + args.get_message());
                    });

            }


        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error :" + args.get_message());
        });
}


// This function deletes event when asset assigned to it is deleted 
function deleteEmsUserRoles(userEmail) {
    var delUserlist = web.get_lists().getByTitle("UserRoles");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"+ userEmail+ "</Value></Eq></Where></Query></View>");
    var delUserlistItems = delUserlist.getItems(camlQuery);
    context.load(delUserlistItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var delUserlistEnumerator = delUserlistItems.getEnumerator();
            while (delUserlistEnumerator.moveNext()) {
                var delUserlistItem = delUserlistEnumerator.get_current();
                var userRoleId = delUserlistItem.get_id();
                delUserRole(userRoleId);
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in user roles: " + args.get_message());
        }
        );
}

// This function deletes the event
function delUserRole(userRoleId) {
    var delRolelist = web.get_lists().getByTitle("UserRoles");
    var delRolelistItem = delRolelist.getItemById(userRoleId);
    delRolelistItem.deleteObject();
}

function IsSuperAdmin() {
    var userEmail = $('#userEmail').val();

    var loginname = '';
    var logintitle = '';

    if (useremail == userEmail) {
        alert("Operation Not Allowed: You are about to remove yourself from Super Admin List.");
    }
    else {
        if ($('#superadmin:checked').length == 1) {

            var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            appWebContext = new SP.ClientContext.get_current();
            var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
            var memberGroup = hostWebContext.get_web().get_siteGroups().getByName("Home Owners");
            var userCreationInfo = new SP.UserCreationInformation();
            userCreationInfo.set_email(userEmail);

            var str = userEmail;
            var n = str.search("onmicrosoft.com");

            loginname = "i:0#.f|membership|live.com#" + userEmail;

            if (n != -1) {
                loginname = "i:0#.f|membership|" + userEmail;
            }
            else {
                loginname = "i:0#.f|membership|live.com#" + userEmail;
            }


            userCreationInfo.set_loginName(loginname);
            userCreationInfo.set_title(userEmail);
            var oUser = memberGroup.get_users().add(userCreationInfo);
            appWebContext.load(oUser);
            appWebContext.executeQueryAsync(function () {

                alert(oUser.get_title() + " added to Super Admin List.");

                //-------------------------------------------------------------

            },
            function (sender, args) {
                //alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());
            });
            $('#admin').attr("disabled", "true");
            $('#eventOrganizer').attr("disabled", "true");
            $('#rep').attr("disabled", "true");
        }
        else {

            $('#admin').removeAttr("disabled");
            $('#eventOrganizer').removeAttr("disabled");
            $('#rep').removeAttr("disabled");

            var exists = false;
            var groupName = "Home Owners";

            var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            appWebContext = new SP.ClientContext.get_current();
            var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);

            var collGroup = hostWebContext.get_web().get_siteGroups();
            appWebContext.load(collGroup);
            appWebContext.load(collGroup, 'Include(Users)');
            appWebContext.executeQueryAsync(function () {

                var userInfo = '';

                var groupEnumerator = collGroup.getEnumerator();
                while (groupEnumerator.moveNext()) {
                    var oGroup = groupEnumerator.get_current();
                    var collUser = oGroup.get_users();
                    var userEnumerator = collUser.getEnumerator();
                    while (userEnumerator.moveNext()) {
                        var oUser = userEnumerator.get_current();
                        if ((oUser.get_email() == userEmail) && (oGroup.get_title() == "Home Owners")) {
                            exists = true;
                            loginname = oUser.get_loginName();
                            logintitle = oUser.get_title();
                        }
                        userInfo += '\nGroup ID: ' + oGroup.get_id() +
                            '\nGroup Title: ' + oGroup.get_title() +
                            '\nUserTITLE: ' + oUser.get_title() +
                            '\nEMAIL: ' + oUser.get_email() +
                            '\nLogin Name: ' + oUser.get_loginName() +
                            '\n Exists' + exists + '' +
                            '\n ' +
                            '\n ';

                    }
                }
                // alert(userInfo);

                if (exists) {

                    var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
                    appWebContext = new SP.ClientContext.get_current();
                    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
                    var memberGroup = hostWebContext.get_web().get_siteGroups().getByName("Home Owners");

                    var str = userEmail;
                    var n = str.search("onmicrosoft.com");

                    loginname = "i:0#.f|membership|live.com#" + userEmail;

                    if (n != -1) {
                        loginname = "i:0#.f|membership|" + userEmail;
                    }
                    else {
                        loginname = "i:0#.f|membership|live.com#" + userEmail;
                    }


                    memberGroup.get_users().removeByLoginName(loginname);
                    appWebContext.executeQueryAsync(function () {
                        alert(userEmail + " removed from SuperAdmin List.");
                    },

                    function (sender, args) {
                        alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());
                    });

                }

            },
            function (sender, args) {

                alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());

            });
        }
    }
}




function getQueryStringParameter(paramToRetrieve) {
    var params =
    document.URL.split("?")[1].split("&");
    var strParams = "";
    for (var i = 0; i < params.length; i = i + 1) {
        var singleParam = params[i].split("=");
        if (singleParam[0] == paramToRetrieve)
            return singleParam[1];
    }
}

function changestatus(userid, request) {


    var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);

    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(

         function () {

             var listItemEnumerator = targetUserResult.getEnumerator();
             while (listItemEnumerator.moveNext()) {

                 var listItem = listItemEnumerator.get_current();
                 var id = listItem.get_fieldValues()["ID"];

                 if (id == userid) {
                     if (request == 'Added') {
                         listItem.set_item(SiteColStatus, "Added");
                     }
                     else if (request == 'Rejected') {
                         listItem.set_item(SiteColStatus, "Rejected");
                     }

                     listItem.update();

                 }
             }
         },
          function (sender, args) {
              // Failure returned from executeQueryAsync
              alert("Failed to add the user" + userid);
          });
}


function changestatusrejected(siteuseremail) {


    var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);

    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext.load(targetUserResult);
    appWebContext.executeQueryAsync(

         function () {

             var listItemEnumerator = targetUserResult.getEnumerator();
             while (listItemEnumerator.moveNext()) {

                 var listItem = listItemEnumerator.get_current();
                 var id = listItem.get_fieldValues()["ID"];

                 if (id == userid) {
                     listItem.set_item(SiteColStatus, "Rejected");
                     listItem.update();
                 }

             }


         },
          function (sender, args) {
              // Failure returned from executeQueryAsync
              alert("Failed to add the user" + userid);
          });
}


//function addPermission(userLoginAccEmail, userLoginAccName) {

//    var exists = false;
//    var groupName = "Home Members";

//    var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
//    appWebContext = new SP.ClientContext.get_current();
//    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);


//    var collGroup = hostWebContext.get_web().get_siteGroups();
//    appWebContext.load(collGroup);
//    appWebContext.load(collGroup, 'Include(Users)');
//    appWebContext.executeQueryAsync(function () {

//        var userInfo = '';

//        var groupEnumerator = collGroup.getEnumerator();
//        while (groupEnumerator.moveNext()) {
//            var oGroup = groupEnumerator.get_current();
//            var collUser = oGroup.get_users();
//            var userEnumerator = collUser.getEnumerator();
//            while (userEnumerator.moveNext()) {
//                var oUser = userEnumerator.get_current();
//                if ((oUser.get_email() == userLoginAccEmail) && (oGroup.get_title() == "Home Members")) {
//                    exists = true;
//                }
//                userInfo += '\nGroup ID: ' + oGroup.get_id() +
//                    '\nGroup Title: ' + oGroup.get_title() +
//                    '\nUserTITLE: ' + oUser.get_title() +
//                    '\nEMAIL: ' + oUser.get_email() +
//                    '\nLogin Name: ' + oUser.get_loginName() +
//                    '\n Exists ' + exists + '' +
//                    '\n ' +
//                    '\n ';

//            }
//        }
//        alert(userInfo);

//        if (!exists) {

//            var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
//            appWebContext = new SP.ClientContext.get_current();
//            var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
//            var memberGroup = hostWebContext.get_web().get_siteGroups().getByName("Home Members");
//            var userCreationInfo = new SP.UserCreationInformation();
//            userCreationInfo.set_email(userLoginAccEmail);

//            var str = userLoginAccEmail;
//            var n = str.search("onmicrosoft.com");

//            var loginname = "i:0#.f|membership|live.com#" + userLoginAccEmail;

//            if (n != -1) {
//                loginname = "i:0#.f|membership|" + userLoginAccEmail;
//            }
//            else {
//                loginname = "i:0#.f|membership|live.com#" + userLoginAccEmail;
//            }


//            userCreationInfo.set_loginName(loginname);
//            userCreationInfo.set_title(userLoginAccName);
//            var oUser = memberGroup.get_users().add(userCreationInfo);
//            appWebContext.load(oUser);
//            appWebContext.executeQueryAsync(function () {

//                alert(oUser.get_title() + " added.");

//                //-------------------------------------------------------------
//                changeSiteemsuserlist(userLoginAccEmail, 'Added');

//                AppEmsUserStatusChange(appuser, 'Added');

//            },

//            function (sender, args) {

//                //changestatusrejected(userid);
//                alert("User Email: " + userLoginAccEmail + " was Rejected.");

//                changeSiteemsuserlist(userLoginAccEmail, 'Rejected');

//                AppEmsUserStatusChange(appuser, 'Rejected');

//                //alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());


//            });

//        } else {
//            changeSiteemsuserlist(userLoginAccEmail, 'Added');
//            AppEmsUserStatusChange(appuser, 'Added');
//        }
//    },

//    function (sender, args) {

//        alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());

//    });
//}



function addPermission(userLoginAccEmail, userLoginAccName, appuser) {

    var exists = false;
    var groupName = "Home Members";

    //var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    var hostUrl;
    hostUrl = getSpHostUrl();
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);


    var collGroup = hostWebContext.get_web().get_siteGroups();
    appWebContext.load(collGroup);
    appWebContext.load(collGroup, 'Include(Users)');
    appWebContext.executeQueryAsync(function () {

        var userInfo = '';

        var groupEnumerator = collGroup.getEnumerator();
        while (groupEnumerator.moveNext()) {
            var oGroup = groupEnumerator.get_current();
            var collUser = oGroup.get_users();
            var userEnumerator = collUser.getEnumerator();
            while (userEnumerator.moveNext()) {
                var oUser = userEnumerator.get_current();
                if ((oUser.get_email() == userLoginAccEmail) && (oGroup.get_title() == "Home Members")) {
                    exists = true;
                }
                userInfo += '\nGroup ID: ' + oGroup.get_id() +
                    '\nGroup Title: ' + oGroup.get_title() +
                    '\nUserTITLE: ' + oUser.get_title() +
                    '\nEMAIL: ' + oUser.get_email() +
                    '\nLogin Name: ' + oUser.get_loginName() +
                    '\n Exists' + exists + '' +
                    '\n ' +
                    '\n ';

            }
        }
        //alert(userInfo);

        if (!exists) {
            var hostUrl;
            hostUrl = getSpHostUrl();
            //var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            appWebContext = new SP.ClientContext.get_current();
            var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
            var memberGroup = hostWebContext.get_web().get_siteGroups().getByName("Home Members");
            var userCreationInfo = new SP.UserCreationInformation();
            userCreationInfo.set_email(userLoginAccEmail);

            var str = userLoginAccEmail;
            var n = str.search("onmicrosoft.com");

            var loginname = "i:0#.f|membership|live.com#" + userLoginAccEmail;

            if (n != -1) {
                loginname = "i:0#.f|membership|" + userLoginAccEmail;
            }
            else {
                loginname = "i:0#.f|membership|live.com#" + userLoginAccEmail;
            }


            userCreationInfo.set_loginName(loginname);
            userCreationInfo.set_title(userLoginAccName);
            var oUser = memberGroup.get_users().add(userCreationInfo);
            appWebContext.load(oUser);
            appWebContext.executeQueryAsync(function () {

                alert(oUser.get_title() + " added.");

                //-------------------------------------------------------------
                AppEmsUserStatusChange(appuser, 'Added');
                changeSiteemsuserlist(userLoginAccEmail, 'Added');
            },

            function (sender, args) {
                //changestatusrejected(userid);
                AppEmsUserStatusChange(appuser, 'Rejected');
                changeSiteemsuserlist(userLoginAccEmail, 'Rejected');
                //alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());
            });

        } else {
            //changeSiteemsuserlist(userLoginAccEmail, 'Added');
            //AppEmsUserStatusChange(appuser, 'Added');
            AppEmsUserStatusChange(appuser, 'Added');
            changeSiteemsuserlist(userLoginAccEmail, 'Added');
        }
    },

    function (sender, args) {
        //alert('Request failed. ' + args.get_message() + '\n' + args.get_stackTrace());
        GC_ForSiteAppUsersRequest--;
    });
}

function AppEmsUserStatusChange(appuser, request) {
    var emsuserList2 = web.get_lists().getByTitle('EMSUsers');
    var emsusercurrentItem1 = emsuserList2.getItemById(appuser[0]);
    context.load(emsusercurrentItem1);
    context.executeQueryAsync(
        function () {
            emsusercurrentItem1.set_item("Status", request);
            emsusercurrentItem1.update();
            context.load(emsusercurrentItem1);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                //syncSiteAppusers();
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                //alert("Error :" + args.get_message());
            });

        },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting EMSUsers records: " + args.get_message());
    });
}


function changeSiteemsuserlist(siteuseremail, request) {
    var hostUrl1;
    hostUrl1 = getSpHostUrl();
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);
    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(EMSUserListName);

    //Create a CAML query that retrieves the sites for this organization
    var siteQuery1 = new SP.CamlQuery();
    siteQuery1.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"+ siteuseremail+ "</Value></Eq></Where></Query></View>");
    var targetUserResult1 = targetUsersList1.getItems(siteQuery1);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            var listItemEnumerator1 = targetUserResult1.getEnumerator();
            while (listItemEnumerator1.moveNext()) {
                var listItem1 = listItemEnumerator1.get_current();
                var siteuserid = listItem1.get_fieldValues()["ID"];
            }
            if (siteuserid) {
                ChangeSiteEmsUsersStatus(siteuserid, request);
            }
            },
            function (sender, args) {
                //alert('getting site user failed. ' + args.get_message());
                GC_ForSiteAppUsersRequest--;
                });
}

/////FUNCTION TO SYNC USERS ENDS HERE///////////////////////////////////////////////////////

// This function hides all main DIV elements. The caller is then responsible 
// for re-showing the one that needs to be displayed.
function hideAllPanels() {
    document.getElementById("chartsDiv").style.display = 'none';
    $('#AllEvents').hide();
    $('#AllAssets').hide();
    $('#AllUniOrg').hide();
    $('#AllSites').hide();
    $('#AllUsers').hide();
    $('#calenderLoader').hide();
    $('#AddEventDetails').hide();
    $('#editEventDetails').hide();
    $('#EmployeeHome').hide();
    $('#AllEnrllEvents').hide();
    $('#eventDetails').hide();
    $('#OtherEvents').hide();
    $('#scheduler_here').hide();
    $('#AllSchEvent').hide();
    $('#AllEventOrg').hide();
    $('#AllRep').hide();
    $('#EventsFeedback').hide();
    $('#AllAppUsers').hide();
    $('#EventCapped').hide();
    $("#PrintbillCharges").hide();
    $("#AllAppUsersVerification").hide();
    $("#AllSiteAppUsers").hide();

}

// This function shows add uniorg dialog
function addUniOrg() {
    FillUniversityDomainDropDown('newUniversityDomain', uniDomainList);
    FillUniversitySubDomainDropDown(-1, 'newUniversitysubDomain', unisubDomainList, false);
    FillOrganizationTypeDropDown('newUniversityType', organizationtype);
    $('#AddUniOrg').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        beforeClose: function (event, ui) { cancelNewUniOrg2(); }
    });
    initializePeoplePicker('peoplePickerDiv2');

}
function DropDowncleaner(selectbox) {
    if (selectbox != undefined) {

        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }
}
function FillUniversityDomainDropDown(controlId, ListTitle) {
    var mylist;
    var items = "";

    var newDomainType = document.getElementById(controlId);

    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(ListTitle);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            DropDowncleaner(document.getElementById(controlId));
            var option = document.createElement('option');
            option.innerHTML = 'Select Domain';
            option.value = -1;
            // newDomainType.appendChild(option);
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var option = document.createElement('option');
                option.innerHTML = listItem.get_fieldValues()["Title"];
                option.value = listItem.get_fieldValues()["Title"];
                newDomainType.appendChild(option);
            }

        },
        function (sender, args) {
            //alert('Error in loading Data...Check your Internet Connection');
            alert("Error in loading Data...Check your Internet Connection, " + args.get_message());
        }
        );

}

function FillUserProfileDropDowns(controlId, ListTitle) {
    var mylist;
    var items = "";

    var newDomainType = document.getElementById(controlId);

    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(ListTitle);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            DropDowncleaner(document.getElementById(controlId));
            var option = document.createElement('option');
            option.innerHTML = 'Select';
            option.value = -1;
            newDomainType.appendChild(option);
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                if (controlId == 'ddlCountry' ) {
                    option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["ID"];
                    newDomainType.appendChild(option);
                }
                else if (controlId == 'ddlPrimaryAffiliation') {
                    option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["AppOrgID"];
                    newDomainType.appendChild(option);
                }
                else {
                    option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["Title"];
                    newDomainType.appendChild(option);
                }
            }

        },
        function (sender, args) {
            //alert('Error in loading Data...Check your Internet Connection');
            alert("Error in loading Data...Check your Internet Connection, " + args.get_message());
        }
        );

}

function FillUniversityDomainDropDown_EventTab(controlId, ListTitle) {
    var mylist;
    var items = "";

    var newDomainType = document.getElementById(controlId);

    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(ListTitle);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            DropDowncleaner(document.getElementById(controlId));
            var option = document.createElement('option');
            option.innerHTML = 'Select';
            option.value = -1;
            newDomainType.appendChild(option);
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var option = document.createElement('option');
                option.innerHTML = listItem.get_fieldValues()["Title"];
                option.value = listItem.get_fieldValues()["Title"];
                newDomainType.appendChild(option);
            }

        },
        function () {
            alert('Error in loading Data...Check your Internet Connection');
        }
        );

}
function FillUniversitySubDomainDropDown(domainId, ddl, ListTitle, multiple) {

    if (domainId == "-1") {

        // DropDowncleaner(document.getElementById(ddl));
        //var option = document.createElement('option');
        //option.innerHTML = 'Select Sub Domain';
        //option.value = -1;

        var mylist;
        var items = "";
        var newDomainType = document.getElementById(ddl);
        //
        var hostUrl1;
        var urlFlag = false;
        urlFlag = checkQueryStringParameter("SPHostUrl");
        if (!urlFlag) {
            hostUrl1 = localStorage.getItem("SPHostUrl");
            hostUrl1 = hostUrl1;
        } else {
            hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
            localStorage.setItem("SPHostUrl", hostUrl1);
        }
        var appWebContext1 = new SP.ClientContext.get_current();
        var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

        var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(ListTitle);
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        var targetUserResult1 = targetUsersList1.getItems(camlQuery);
        appWebContext1.load(targetUserResult1);
        appWebContext1.executeQueryAsync(
            function () {
                if (!multiple) {
                    DropDowncleaner(document.getElementById(ddl));
                }
                var listItemEnumerator = targetUserResult1.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    var option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["Title"];
                    newDomainType.appendChild(option);
                }
            },
            function () {
                alert('Error in loading data...Check your Internet connection');
            }
            );
    }
    else {

        var mylist;
        var items = "";


        var newDomainType = document.getElementById(ddl);
        var hostUrl1;
        var urlFlag = false;
        urlFlag = checkQueryStringParameter("SPHostUrl");
        if (!urlFlag) {
            hostUrl1 = localStorage.getItem("SPHostUrl");
            hostUrl1 = hostUrl1;
        } else {
            hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
            localStorage.setItem("SPHostUrl", hostUrl1);
        }
        var appWebContext1 = new SP.ClientContext.get_current();
        var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

        var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(ListTitle);



        var uniQuery = new SP.CamlQuery();
        uniQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + domainTitle + "' /><Value Type='Text'>"
            + domainId
            + "</Value></Eq></Where></Query></View>");
        var targetUserResult1 = targetUsersList1.getItems(uniQuery);
        appWebContext1.load(targetUserResult1);
        appWebContext1.executeQueryAsync(
            function () {

                if (!multiple) {
                    DropDowncleaner(document.getElementById(ddl));
                }
                var listItemEnumerator = targetUserResult1.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    var option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["Title"];
                    newDomainType.appendChild(option);
                }
            },
            function () {
                alert('Error in loading data...Check your Internet connection');
            }
            );

    }
}

function FillCityDropDown(countryId, ddl, listTitle, multiple, selectedValue) {
    var hostUrl1;
    var urlFlag = false;


    if (countryId == "-1") {

        // DropDowncleaner(document.getElementById(ddl));
        //var option = document.createElement('option');
        //option.innerHTML = 'Select Sub Domain';
        //option.value = -1;

        var city = document.getElementById(ddl);
        //

        urlFlag = checkQueryStringParameter("SPHostUrl");
        if (!urlFlag) {
            hostUrl1 = localStorage.getItem("SPHostUrl");
            hostUrl1 = hostUrl1;
        } else {
            hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
            localStorage.setItem("SPHostUrl", hostUrl1);
        }
        var appWebContext2 = new SP.ClientContext.get_current();
        var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl1);

        var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(listTitle);
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        var targetUserResult2 = targetUsersList2.getItems(camlQuery);
        appWebContext2.load(targetUserResult2);
        appWebContext2.executeQueryAsync(
            function () {
                if (!multiple) {
                    DropDowncleaner(document.getElementById(ddl));
                }
                var option = document.createElement('option');
                option.innerHTML = 'Select';
                option.value = -1;
                city.appendChild(option);
                var listItemEnumerator = targetUserResult2.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["Title"];
                    city.appendChild(option);
                }
                $('#ddlCity').val(selectedValue);
            },
            function () {
                alert('Error in loading data...Check your Internet connection');
            }
            );
    }
    else {



        city = document.getElementById(ddl);

        urlFlag = checkQueryStringParameter("SPHostUrl");
        if (!urlFlag) {
            hostUrl1 = localStorage.getItem("SPHostUrl");
            hostUrl1 = hostUrl1;
        } else {
            hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
            hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
            localStorage.setItem("SPHostUrl", hostUrl1);
        }
        var appWebContext1 = new SP.ClientContext.get_current();
        var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

        var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(listTitle);



        var uniQuery = new SP.CamlQuery();
        uniQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + CitySplst_CountryLookup + "' /><Value Type='Text'>"
            + countryId
            + "</Value></Eq></Where></Query></View>");
        var targetUserResult1 = targetUsersList1.getItems(uniQuery);
        appWebContext1.load(targetUserResult1);
        appWebContext1.executeQueryAsync(
            function () {


                DropDowncleaner(document.getElementById(ddl));
                var option = document.createElement('option');
                option.innerHTML = 'Select';
                option.value = -1;
                city.appendChild(option);
                var listItemEnumerator = targetUserResult1.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    option = document.createElement('option');
                    option.innerHTML = listItem.get_fieldValues()["Title"];
                    option.value = listItem.get_fieldValues()["Title"];
                    city.appendChild(option);
                }
                $('#ddlCity').val(selectedValue);
            },
            function () {
                alert('Error in loading data...Check your Internet connection');
            }
            );

    }
}

function OnUniversityChange() {
    var values = $('#newUniversityDomain').val();
    if (values.length == 1) {
        FillUniversitySubDomainDropDown($('#newUniversityDomain').val(), 'newUniversitysubDomain', unisubDomainList, false);
    }
    else {
        DropDowncleaner(document.getElementById('newUniversitysubDomain'));
        for (i = 0; i < values.length; i++) {

            FillUniversitySubDomainDropDown(values[i], 'newUniversitysubDomain', unisubDomainList, true);
        }
    }

}
function OnSiteUniversityChange() {
    var values = $('#newSiteUniversityDomain').val();
    if (values.length == 1) {
        FillUniversitySubDomainDropDown($('#newSiteUniversityDomain').val(), 'newSiteUniversitysubDomain', unisubDomainList, false);
    }
    else {
        DropDowncleaner(document.getElementById('newSiteUniversitysubDomain'));
        for (i = 0; i < values.length; i++) {

            FillUniversitySubDomainDropDown(values[i], 'newSiteUniversitysubDomain', unisubDomainList, true);
        }
    }

}
function OnUniversityChangeEdit() {
    //
    var values = $('#editUniversityDomain').val();
    if (values.length == 1) {
        FillUniversitySubDomainDropDown($('#editUniversityDomain').val(), 'editUniversitysubDomain', unisubDomainList, false);
    }
    else {
        DropDowncleaner(document.getElementById('editUniversitysubDomain'));
        for (var i = 0; i < values.length; i++) {

            FillUniversitySubDomainDropDown(values[i], 'editUniversitysubDomain', unisubDomainList, true);
        }
    }
}

function OnUserUniversityChangeEdit() {
    //
    var values = $('#EditUserUniversityDomain').val();
    if (values.length == 1) {
        FillUniversitySubDomainDropDown($('#EditUserUniversityDomain').val(), 'EditUserUniversitySubDomain', unisubDomainList, false);
    }
    else {
        DropDowncleaner(document.getElementById('EditUserUniversitySubDomain'));
        for (var i = 0; i < values.length; i++) {

            FillUniversitySubDomainDropDown(values[i], 'EditUserUniversitySubDomain', unisubDomainList, true);
        }
    }
}


function OnSiteUniversityChangeEdit() {
    var values = $('#editSiteUniversityDomain').val();
    if (values.length == 1) {
        FillUniversitySubDomainDropDown($('#editSiteUniversityDomain').val(), 'editSiteUniversitysubDomain', unisubDomainList, false);
    }
    else {
        DropDowncleaner(document.getElementById('editSiteUniversitysubDomain'));
        for (var i = 0; i < values.length; i++) {

            FillUniversitySubDomainDropDown(values[i], 'editSiteUniversitysubDomain', unisubDomainList, true);
        }
    }

}

function OnUserCountryChangeEdit() {
    //
    var values = $('#ddlCountry').val();
    var countryName = $("#ddlCountry option[value='" + $('#ddlCountry').val() + "']")[0].text;
    FillCityDropDown($('#ddlCountry').val(), 'ddlCity', CitySplst, true, -1);

    if (countryName == 'Pakistan') {
        $('#lblCNIC').show();
        $('#CNIC').show();
        $('#lblPassport').hide();
        $('#passportNumber').hide();
        $('#lblRegion').show();
        $('#ddlRegionProvince').show();
    } else {
        $('#lblCNIC').hide();
        $('#CNIC').hide();
        $('#lblPassport').show();
        $('#passportNumber').show();
        $('#lblRegion').hide();
        $('#ddlRegionProvince').hide();
    }
    //if (values.length == 1) {
    //    //FillUniversitySubDomainDropDown($('#ddlCountry').val(), 'City', unisubDomainList, false);
    //    FillCityDropDown($('#ddlCountry').val(), 'ddlCity', CitySplst, false);
    //}
    //else {
    //    DropDowncleaner(document.getElementById('ddlCity'));
    //    for (var i = 0; i < values.length; i++) {
    //        FillCityDropDown(values[i], 'ddlCity', CitySplst, true);
    //        //FillUniversitySubDomainDropDown(values[i], 'City', unisubDomainList, true);
    //    }
    //}
}

function onEventDomainChange() {
    var values = $('#newEventUniversityDomain').val();
    getSitesByDescipline(values);
    //if (values.length == 1) {
    FillUniversitySubDomainDropDown($('#newEventUniversityDomain').val(), 'newEventUniversitysubDomain', unisubDomainList, false);
    //}
    //else {
    //    DropDowncleaner(document.getElementById('newEventUniversitysubDomain'));
    //    for (i = 0; i < values.length; i++) {

    //        FillUniversitySubDomainDropDown(values[i], 'newEventUniversitysubDomain', unisubDomainList, true);
    //    }
    //}
}
function onEventDomainChangeEdit() {
    var values = $('#editEventUniversityDomain').val();
    getSitesByDescipline(values);
    //if (values.length == 1) {
    FillUniversitySubDomainDropDown($('#editEventUniversityDomain').val(), 'editEventUniversitysubDomain', unisubDomainList, false);
    //}
    //else {
    //    DropDowncleaner(document.getElementById('editEventUniversitysubDomain'));
    //    for (i = 0; i < values.length; i++) {

    //        FillUniversitySubDomainDropDown(values[i], 'editEventUniversitysubDomain', unisubDomainList, true);
    //    }
    //}
}

function onOrganizationChange(orgControl, siteControl) {
    var value = $('#' + orgControl).val();
    FillOrganizationSitesDropDown(value, siteControl);
}

function FillOrganizationSitesDropDown(value, sitecontrol) {
    var newDomainType = document.getElementById(sitecontrol);
    var siteList1 = web.get_lists().getByTitle('PSites');
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='OrgLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + value
        + "</Value></Eq></Where></Query></View>");

    var targetUserResult1 = siteList1.getItems(camlQuery);
    context.load(targetUserResult1);
    context.executeQueryAsync(
        function () {
            DropDowncleaner(document.getElementById(sitecontrol));

            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var option = document.createElement('option');
                option.innerHTML = listItem.get_fieldValues()["Title"];
                option.value = listItem.get_fieldValues()["ID"];
                //option.value = listItem.get_fieldValues()["Title"];
                newDomainType.appendChild(option);
            }
        },
        function () {
            alert('Error in loading data...Check your Internet connection');
        }
        );
}


function FillOrganizationTypeDropDown(controlId, ListTitle) {
    var mylist;
    var items = "";

    var newDomainType = document.getElementById(controlId);

    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(ListTitle);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            DropDowncleaner(document.getElementById(controlId));
            var option = document.createElement('option');
            option.innerHTML = 'Select Type';
            option.value = -1;
            newDomainType.appendChild(option);
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var option = document.createElement('option');
                option.innerHTML = listItem.get_fieldValues()["Title"];
                option.value = listItem.get_fieldValues()["Title"];
                newDomainType.appendChild(option);
            }
        },
        function (arg) {
            alert('Error in loading data...Check your Internet connection');
        }
        );
}
function cancelNewUniOrg2() {
    $('#addOrgName').val("");
    $('#addAddress').val("");
    $('#addPhone').val("");
    $('#addDescription').val("");
    initializePeoplePicker('peoplePickerDiv2');

}


// This function clears the inputs on the add asset form and cancels it
function cancelNewUniOrg() {
    //Added By Ehsan
    var errArea = document.getElementById("errAllUniOrg");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    $('#addOrgName').val("");
    $('#addAddress').val("");
    $('#addPhone').val("");
    $('#addDescription').val("");
    initializePeoplePicker('peoplePickerDiv2');
    $('#AddUniOrg').dialog("close");
}


// This function saves the new uni org
function saveNewUniOrg() {
    var objOrg = [];
    var maxRep = getPeopleCount2();
    var errArea = document.getElementById("errAllUniOrg");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    if ($('#addOrgName').val() == "") {
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Organization Name' is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'University Organization Name' is required.");//Added By Ehsan
    }

    else if ($('#newUniversityDomain').val() == null) {
        ErrorMsg("Must select at least one Discipline.");
    }
    else if ($('#newUniversitysubDomain').val() == null) {
        ErrorMsg("'Must select at least one Specialization.");
    }
    else if ($('#newUniversityType').val() == "-1") {
        ErrorMsg("Select Organization Type.");
    } else {

        var orgName = $.trim($('#addOrgName').val());
        var hasduplication = false;
        //addOrgName
        // Get all the Rooms associated with the siteId gotten in eventobject
        var dupList = web.get_lists().getByTitle('Organizations');
        var dupListItems;
        //Create a CAML query that retrieves the sites for this organization
        var dupQuery = new SP.CamlQuery();
        dupQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
            + orgName
            + "</Value></Eq></Where></Query></View>");
        dupListItems = dupList.getItems(dupQuery);
        context.load(dupListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var duplistItemEnumerator = dupListItems.getEnumerator();
                while (duplistItemEnumerator.moveNext()) {
                    //var duplistItem = duplistItemEnumerator.get_current();
                    hasduplication = true;
                    ErrorMsg("'University Organization Name' is already in use.");
                }
                if (!hasduplication) {

                    uniorgList = web.get_lists().getByTitle('Organizations');
                    var itemCreateInfo = new SP.ListItemCreationInformation();
                    var uniorgItem = uniorgList.addItem(itemCreateInfo);
                    uniorgItem.set_item("Title", orgName);
                    uniorgItem.set_item("OrgAddress", $('#addAddress').val());
                    uniorgItem.set_item("OrgPhone", $('#addPhone').val());
                    uniorgItem.set_item("OrgDescription", $('#addDescription').val());
                    uniorgItem.set_item("CustomCreatedBy", useremail);
                    uniorgItem.set_item("OrganizationType", $('#newUniversityType').val());

                    if (siteRepresentative) {
                        uniorgItem.set_item("OrgStatus", 'New');
                    } else {
                        uniorgItem.set_item("OrgStatus", 'Approved');

                    }
                    uniorgItem.update();

                    context.load(uniorgItem);
                    context.executeQueryAsync(function () {
                        // Success returned from executeQueryAsync
                        uniorgID = uniorgItem.get_id();
                        var status = uniorgItem.get_fieldValues()["OrgStatus"];
                        AddDomainMappingItems('UnivesityDomainMapList', $('#newUniversityDomain').val(), uniorgID);
                        AddDomainMappingItems('UnivesitySubDomainMapList', $('#newUniversitysubDomain').val(), uniorgID);
                        //Adding to  domain,Subdomain,Type List
                        getRepInfo();
                        if (status == 'Approved') {
                            var request = 'ADD';
                            objOrg.push({ title: orgName, AppOrgId: uniorgID });
                            saveOrganizaionToSiteList(objOrg, request);
                        }

                        if (siteRepresentative) {
                            Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>Your request for new University/Organization Registration [Name: <b>" + $('#addOrgName').val() + "</b>] has submitted sucessfully.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                        }
                        cancelNewUniOrg();
                    },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Failure " + args.get_message());
                        });
                    if (siteRepresentative) {
                        showUniOrgAttendee();
                    } else {
                        showUniOrg();
                    }
                }


            }, function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });


    }
}

function AddDomainMappingItems(listname, ItemsCollection, id) {
    //
    var myList = web.get_lists().getByTitle(listname);
    for (i = 0; i < ItemsCollection.length; i++) {
        var itemCreateInfo = new SP.ListItemCreationInformation();
        var orgItem = myList.addItem(itemCreateInfo);
        orgItem.set_item("Title", ItemsCollection[i]);
        orgItem.set_item("UniId", id);
        orgItem.update();
        context.load(orgItem);
        context.executeQueryAsync(function () {
            // alert('ASASD');
        },
         function (sender, args) {

             // Failure returned from executeQueryAsync
             //alert("Failure " + args.get_message());

         });
    }
}
function AddSiteDomainMappingItems(listname, ItemsCollection, id) {
    //
    var myList = web.get_lists().getByTitle(listname);
    for (i = 0; i < ItemsCollection.length; i++) {
        var itemCreateInfo = new SP.ListItemCreationInformation();
        var orgItem = myList.addItem(itemCreateInfo);
        orgItem.set_item("Title", ItemsCollection[i]);
        orgItem.set_item("SiteId", id);
        orgItem.update();
        context.load(orgItem);
        context.executeQueryAsync(function () {
            // alert('ASASD');
        },
        function (arg) {

            // alert('Err');
        }
        );
    }
}
function AddEventDomainMappingItems(listname, ItemsCollection, id) {
    //
    var myList = web.get_lists().getByTitle(listname);
    if ((ItemsCollection != null) && (ItemsCollection.length != 0)) {
        for (var i = 0; i < ItemsCollection.length; i++) {
            var itemCreateInfo = new SP.ListItemCreationInformation();
            var orgItem = myList.addItem(itemCreateInfo);
            orgItem.set_item("Title", ItemsCollection[i]);
            orgItem.set_item("EventId", id);
            orgItem.update();
            context.load(orgItem);
            context.executeQueryAsync(function () {

            },
            function (sender, args) {

                alert("Failure " + args.get_message());
            }
            );
        }
    }
    else {

        alert('Please Select Event Discipline, Thanks!');
        ErrorMsg('Please Select Event Discipline, Thanks!');
    }
}
// Query the picker for user count in new event dialog
function getPeopleCount2() {
    var peoplePicker2 = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv2_TopSpan;
    // Get information about all users
    reps = peoplePicker2.GetAllUserInfo();
    return reps.length;
}

// Query the picker for user information
function getRepInfo() {
    // Get the people picker object from the page.
    var peoplePicker2 = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv2_TopSpan;

    // Get information about all users.
    repList = web.get_lists().getByTitle('Representative');
    var reps = peoplePicker2.GetAllUserInfo();
    for (var i = 0; i < reps.length; i++) {
        rep = reps[i];
        repName = rep["DisplayText"];
        var repEmail = rep["Description"];

        if (rep["ProviderDisplayName"] == "Extranet Users") {
            repEmail = rep["AutoFillSubDisplayText"];
        }

        addRepresentative(repName, repEmail);
    }
    $('#AddUniOrg').hide();
    if (siteRepresentative) {
        showUniOrgAttendee();
    }
    else { showUniOrg(); }

}

// This function adds representatives to the Employee list
function addRepresentative(repName, repEmail) {
    var representativeList = web.get_lists().getByTitle("Representative");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = representativeList.getItems(camlQuery);

    context.load(listItems);
    context.executeQueryAsync(
       function () {
           // Success returned from executeQueryAsync
           var itemCreateInfo = new SP.ListItemCreationInformation();
           var listItem = representativeList.addItem(itemCreateInfo);
           listItem.set_item("Title", repName);
           listItem.set_item("OrgLookup", uniorgID);
           listItem.set_item("RepEmail", repEmail);

           listItem.update();
           context.load(listItem);
           context.executeQueryAsync(function () {

           });
       },
       function (sender, args) {
           // Failure returned from executeQueryAsync
           alert("Failure " + args.get_message());
       });
}

// This function shows the details for a specific uniorg 
function showEditUniOrg(uniorgId) {
    uniorgID = uniorgId;
    FillUniversityDomainDropDown('editUniversityDomain', uniDomainList);
    FillUniversitySubDomainDropDown(-1, 'editUniversitysubDomain', unisubDomainList, false);
    FillOrganizationTypeDropDown('editUniversityType', organizationtype);
    $('#EditUniOrg').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        beforeClose: function (event, ui) { cancelEditUniOrg2(); }
    });

    list = web.get_lists().getByTitle('Organizations');
    currentItem = list.getItemById(uniorgID);
    context.load(currentItem);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            GetSelectedDomainItems(uniorgID, 'UnivesityDomainMapList', 'editUniversityDomain', 'UniId');
            GetSelectedDomainItems(uniorgID, 'UnivesitySubDomainMapList', 'editUniversitysubDomain', 'UniId');
            $('#editOrgName').val(currentItem.get_fieldValues()["Title"]);
            $('#editAddress').val(currentItem.get_fieldValues()["OrgAddress"]);
            $('#editPhone').val(currentItem.get_fieldValues()["OrgPhone"]);
            $('#editDescription').val(currentItem.get_fieldValues()["OrgDescription"]);
            $('#editUniversityType').val(currentItem.get_fieldValues()["OrganizationType"]);
            getRepresentatives(uniorgID);
        },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting organization records: " + args.get_message());
    });


}
function GetSelectedDomainItems(id, listName, ControlId, ColumnName) {
    var data = [];
    var myList = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "'/><Value Type='Text'>"
        + id
        + "</Value></Eq></Where></Query></View>");
    var listItems = myList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                data.push(listItem.get_fieldValues()["Title"]);
            }
            if (data.length > 0) {
                for (i = 0; i < data.length; i++) {
                    $("#" + ControlId + " option[value='" + data[i] + "']").prop("selected", true);
                }
            }
        },
        function (arg) {
            alert('Error');
        }
        );
}

function getSiteRepresentativeTag(siteId) {
    var representativeList = web.get_lists().getByTitle('Representative');
    representativeCount = 0;
    var repNames = "";
    // Create a CAML query that retrieves the employee
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='OrgLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + siteId
        + "</Value></Eq></Where></Query></View>");
    var listItems = representativeList.getItems(camlQuery);
    var dropDownList = document.createElement("select");
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            var listItemEnumerator = listItems.getEnumerator();
            var count = 0;
            while (listItemEnumerator.moveNext()) {
                count++;

            }
            if (count > 1) {
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    representativeCount = representativeCount + 1;
                    var ddlItem = document.createElement("option");
                    ddlItem.innerText = listItem.get_fieldValues()["Title"];
                    dropDownList.appendChild(ddlItem);
                }
                return dropDownList;
            }
            else if (count == 1) {
                var lbl = document.createElement("Label");
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    representativeCount = representativeCount + 1;
                    lbl.innerText = listItem.get_fieldValues()["Title"];
                }
                return lbl;
            }
            else {
                var lbl = document.createElement("Label");
                lbl.innerText = "N/A";
                return lbl;
            }
        },
        function (sender, args) {
            alert("Failure " + args.get_message());
        });
}
//This function populates Representatives from Representative list
function getRepresentatives(itemID) {
    var representativeList = web.get_lists().getByTitle('Representative');
    representativeCount = 0;
    var repNames = "";
    // Create a CAML query that retrieves the employee
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='OrgLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + itemID
        + "</Value></Eq></Where></Query></View>");
    var listItems = representativeList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var repList = document.getElementById("showRepresentatives");
            while (repList.hasChildNodes()) {
                repList.removeChild(repList.lastChild);
            }
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                //var status = listItem.get_fieldValues()["_RepStatus"];
                //var status = true;
                //if (status) {
                representativeCount = representativeCount + 1;
                repNames = listItem.get_fieldValues()["Title"];
                var repDelete = document.createElement("span");
                repDelete.appendChild(document.createTextNode("X"));
                repDelete.className = "deleteButton";
                repDelete.id = listItem.get_id();
                $(repDelete).click(function (sender) {
                    deleteEditRepresentative(sender.target.id, itemID);
                });
                repList.appendChild(repDelete);
                var repLink = document.createElement("a");
                repLink.appendChild(document.createTextNode(repNames));
                repList.appendChild(repLink);
                //}
            }
            $('#editRepresentatives').val(repNames);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

// This function deletes the employee from event - FINAL - do not change!
function deleteEditRepresentative(repid, itemID) {
    list = web.get_lists().getByTitle("Representative");
    var repItem = list.getItemById(repid);
    repItem.deleteObject();
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var repList = document.getElementById("showRepresentatives");
            while (repList.hasChildNodes()) {
                repList.removeChild(repList.lastChild);
            }
            if (siteRepresentative) {
                showUniOrgAttendee();
            }
            else {
                showUniOrg();
            }

            showEditUniOrg(itemID);
        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            alert("Error in Deleting Representatives:" + args.get_message());
        });
}

// This function cancels the editing of an existing uniorg
function cancelEditUniOrg() {
    $('#editOrgName').val("");
    $('#editAddress').val("");
    $('#editPhone').val("");
    $('#editDescription').val("");
    initializePeoplePicker('editPeoplePicker2');
    $('#EditUniOrg').dialog("close");
}

// This function cancels the editing of an existing uniorg
function cancelEditUniOrg2() {
    $('#editOrgName').val("");
    $('#editAddress').val("");
    $('#editPhone').val("");
    $('#editDescription').val("");
    initializePeoplePicker('editPeoplePicker2');

}

// This function updates an existing uniorg's details
function saveEditUniOrg() {
    var errArea;
    if ($('#editOrgName').val() == "") {

        if (siteRepresentative) {
            errArea = document.getElementById("errAllUniOrg");
        }
        else {
            errArea = document.getElementById("errAllUniOrg");
        }
        // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("'Organization Name' field is required."));
        errArea.appendChild(divMessage);
    }
    else {


        var orgName = $.trim($('#editOrgName').val());
        var hasduplication = false;
        //addOrgName
        // Get all the Rooms associated with the siteId gotten in eventobject
        var dupList = web.get_lists().getByTitle('Organizations');
        var dupListItems;
        //Create a CAML query that retrieves the sites for this organization
        var dupQuery = new SP.CamlQuery();
        dupQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
            + orgName
            + "</Value></Eq></Where></Query></View>");
        dupListItems = dupList.getItems(dupQuery);
        context.load(dupListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var duplistItemEnumerator = dupListItems.getEnumerator();
                while (duplistItemEnumerator.moveNext()) {


                    var selectedorgIDs = currentItem.get_id();


                    var orglistItem = duplistItemEnumerator.get_current();

                    var duporgid = orglistItem.get_id();

                    if (selectedorgIDs != duporgid) {
                        hasduplication = true;
                        ErrorMsg("'University Organization Name' is already in use.");
                    }


                    //var duplistItem = duplistItemEnumerator.get_current();

                }
                if (!hasduplication) {




                    currentItem.set_item("Title", orgName);
                    currentItem.set_item("OrgAddress", $('#editAddress').val());
                    currentItem.set_item("OrgPhone", $('#editPhone').val());
                    currentItem.set_item("OrgDescription", $('#editDescription').val());

                    currentItem.update();
                    context.load(currentItem);
                    context.executeQueryAsync(function () {
                        var orgId = currentItem.get_id();
                        var status = currentItem.get_fieldValues()["OrgStatus"];
                        //delete existing from both list and add new
                        DeleteDomainUniListItems(uniorgID, 'UnivesityDomainMapList', 'UniId');
                        DeleteSubDomainUniListItems(uniorgID, 'UnivesitySubDomainMapList', 'UniId');
                        $('#EditUniOrg').fadeOut(500, null);
                        if (siteRepresentative) {
                            showUniOrgAttendee();
                        }
                        else {
                            showUniOrg();
                        }
                        if (status == 'Approved') {
                            var objSpOrg = [];
                            var request = "update";
                            objSpOrg.push({ AppOrgId: orgId, title: orgName });
                            saveOrganizaionToSiteList(objSpOrg, request);
                        }
                        cancelEditUniOrg();
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error :" + args.get_message());
                    });
                }


            }, function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });
    }
}

function DeleteDomainUniListItems(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }
            AddDomainMappingItems('UnivesityDomainMapList', $('#editUniversityDomain').val(), Id);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}
function DeleteSubDomainUniListItems(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }
            AddDomainMappingItems('UnivesitySubDomainMapList', $('#editUniversitysubDomain').val(), Id);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}
function DeleteDomainSiteListItems(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }


            AddSiteDomainMappingItems('SiteDomainMapList', $('#editSiteUniversityDomain').val(), Id);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}
function DeleteSubDomainSiteListItems(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }
            AddSiteDomainMappingItems('SiteSubDomainMapList', $('#editSiteUniversitysubDomain').val(), Id);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}
function DeleteDomainEventListItems(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }


            AddEventDomainMappingItems('EventDomainMapList', $('#editEventUniversityDomain').val(), Id);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}

function DeleteSubDomainEventListItems(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }
            AddEventDomainMappingItems('EventSubDomainMapList', $('#editEventUniversitysubDomain').val(), Id);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}
function DeleteListData(Id, listName, ColumnName) {
    var mylist = web.get_lists().getByTitle(listName);
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='" + ColumnName + "' /><Value Type='Text'>"
        + Id
        + "</Value></Eq></Where></Query></View>");
    var listItems = mylist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var tempID = listItem1.get_id();
                var repItem = mylist.getItemById(tempID);
                repItem.deleteObject();
            }

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error deleteting items from collection: " + args.get_message());
        }
        );
}






//$(document).ready(function () {
//    $('#example').DataTable();
//});
//This function shows the new Representative dialog
function addNewRepresentative() {
    $('#editRepresentatives').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        }
    });
    initializePeoplePicker('editPeoplePicker2');
}
function CreatElement(listItem) {

    var id = listItem.get_fieldValues()["ID"];
    var orgtr = document.createElement("tr");
    orgtr.className = "item";
    orgtr.id = id;
    $(orgtr).click(function (sender) {
        showEditUniOrg(sender.delegateTarget.id);
    });
    var orgtd = document.createElement("td");
    orgtd.innerText = id;
    orgtr.appendChild(orgtd);
    var orgtd = document.createElement("td");
    orgtd.innerText = listItem.get_fieldValues()["Title"];
    orgtr.appendChild(orgtd);



    var orgtd = document.createElement("td");
    if (listItem.get_fieldValues()["OrgDescription"] != null && listItem.get_fieldValues()["OrgDescription"] != undefined)
    { orgtd.innerText = listItem.get_fieldValues()["OrgDescription"]; }
    else
    {
        orgtd.innerText = "N/A";
    }
    orgtr.appendChild(orgtd);
    var orgtd = document.createElement("td");
    if (listItem.get_fieldValues()["OrgAddress"] != null && listItem.get_fieldValues()["OrgAddress"] != undefined) {
        orgtd.innerText = listItem.get_fieldValues()["OrgAddress"];
    }
    else {
        orgtd.innerText = "N/A";
    }
    orgtr.appendChild(orgtd);
    var orgtd = document.createElement("td");
    if (listItem.get_fieldValues()["OrgPhone"] != null && listItem.get_fieldValues()["OrgPhone"] != undefined) {
        orgtd.innerText = listItem.get_fieldValues()["OrgPhone"];
    }
    else {
        orgtd.innerText = "N/A";
    }
    orgtr.appendChild(orgtd);
    return orgtr;          // Function returns the product of a and b
}
function CreateUniOrgDataElement(listItem) {
    var data = [];
    data.push(listItem.get_fieldValues()["ID"]);
    data.push(listItem.get_fieldValues()["Title"]);
    if (!siteRepresentative && !eventOrganizer) {
        data.push(listItem.get_fieldValues()["CustomCreatedBy"]);
    }
    if (listItem.get_fieldValues()["OrganizationType"] != null && listItem.get_fieldValues()["OrganizationType"] != undefined)
    { data.push(listItem.get_fieldValues()["OrganizationType"]); }
    else
    {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["OrgDescription"] != null && listItem.get_fieldValues()["OrgDescription"] != undefined)
    { data.push(listItem.get_fieldValues()["OrgDescription"]); }
    else
    {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["OrgAddress"] != null && listItem.get_fieldValues()["OrgAddress"] != undefined) {
        data.push(listItem.get_fieldValues()["OrgAddress"]);
    }
    else {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["OrgPhone"] != null && listItem.get_fieldValues()["OrgPhone"] != undefined) {
        data.push(listItem.get_fieldValues()["OrgPhone"]);
    }
    else {
        data.push('N/A');
    }


    if (listItem.get_fieldValues()["OrgStatus"] != null && listItem.get_fieldValues()["OrgStatus"] != undefined) {
        data.push(listItem.get_fieldValues()["OrgStatus"]);
    }
    else {
        data.push('N/A');
    }
    //if (!siteRepresentative && !eventOrganizer) {
    //    if (listItem.get_fieldValues()["OrgStatus"] == 'New') {
    //        data.push('<img src="../Images/reject.png"  alt="Approve" class="btnapproveUniimg" height="20" width="20" title="Approve this Uni/Org"/><img src="../Images/accept.png"  alt="Reject"class="btnrejectUniimg" height="20" width="20" title="Reject this Uni/Org"/>');
    //    }
    //    else {
    //        data.push('N/A');
    //    }
    //}

    if (!siteRepresentative && !eventOrganizer) {
        if (listItem.get_fieldValues()["OrgStatus"] != 'Approved') {
            data.push('<img src="../Images/reject.png"  alt="Approve" class="btnapproveUniimg" height="20" width="20" title="Approve this Uni/Org"/><img src="../Images/accept.png"  alt="Reject"class="btnrejectUniimg" height="20" width="20" title="Reject this Uni/Org"/>');
        }
        else {
            data.push('N/A');
        }
    }

    return data;          // Function returns the product of a and b
}
function CreatPSiteTableBodyRow(listItem) {
    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    _tr.id = id;
    $(_tr).click(function (sender) {
        showEditSite(sender.delegateTarget.id);
    });
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["SiteAddress"] != null && listItem.get_fieldValues()["SiteAddress"] != undefined)
    { _td.innerText = listItem.get_fieldValues()["SiteAddress"]; }
    else
    {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["SitePhone"] != null && listItem.get_fieldValues()["SitePhone"] != undefined) {
        _td.innerText = listItem.get_fieldValues()["SitePhone"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["SiteCapacity"] != null && listItem.get_fieldValues()["SiteCapacity"] != undefined) {
        _td.innerText = listItem.get_fieldValues()["SiteCapacity"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}
function CreateSitesDataElement(listItem) {
    var data = [];
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);
    data.push(listItem.get_fieldValues()["OrgLookupTitle"]);
    if (!siteRepresentative && !eventOrganizer) {
        data.push(listItem.get_fieldValues()["CustomCreatedBy"]);
    }
    if (listItem.get_fieldValues()["SiteAddress"] != null && listItem.get_fieldValues()["SiteAddress"] != undefined)
    { data.push(listItem.get_fieldValues()["SiteAddress"]); }
    else
    {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["SitePhone"] != null && listItem.get_fieldValues()["SitePhone"] != undefined) {
        data.push(listItem.get_fieldValues()["SitePhone"]);
    }
    else {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["SiteCapacity"] != null && listItem.get_fieldValues()["SiteCapacity"] != undefined) {
        data.push(listItem.get_fieldValues()["SiteCapacity"]);
    }
    else {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["SiteStatus"] != null && listItem.get_fieldValues()["SiteStatus"] != undefined) {
        data.push(listItem.get_fieldValues()["SiteStatus"]);
    }
    else {
        data.push('N/A');
    }
    if (!siteRepresentative && !eventOrganizer) {
        if (listItem.get_fieldValues()["SiteStatus"] == 'New') {
            data.push('<img src="../Images/reject.png"  alt="Approve" class="btnapproveSiteimg" height="20" width="20" title="Approve this site"/><img src="../Images/accept.png"  alt="Reject"class="btnrejectSiteimg" height="20" width="20" title="Reject this site"/>');
        }
        else {
            data.push('N/A');
        }
    }

    //if (!siteRepresentative && !eventOrganizer) {
    //    if (listItem.get_fieldValues()["SiteStatus"] != 'Approved') {
    //        data.push('<img src="../Images/reject.png"  alt="Approve" class="btnapproveSiteimg" height="20" width="20" title="Approve this site"/><img src="../Images/accept.png"  alt="Reject"class="btnrejectSiteimg" height="20" width="20" title="Reject this site"/>');
    //    }
    //    else {
    //        data.push('N/A');
    //    }
    //}

    return data;
}
function CreatPAssetsTableBodyRow(listItem) {
    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _td.id = id;
    $(_td).click(function (sender) {
        showEditAssets(sender.delegateTarget.id);
    });
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["Projectors"] != null && listItem.get_fieldValues()["Projectors"] != undefined)
    { _td.innerText = listItem.get_fieldValues()["Projectors"]; }
    else
    {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["StudentPC"] != null && listItem.get_fieldValues()["StudentPC"] != undefined) {
        _td.innerText = listItem.get_fieldValues()["StudentPC"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["InstructorPC"] != null && listItem.get_fieldValues()["InstructorPC"] != undefined) {
        _td.innerText = listItem.get_fieldValues()["InstructorPC"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    //Delete Button 
    var _td = document.createElement("td");
    var delButton = document.createElement("button");
    delButton.type = "button";
    delButton.className = "btn btn-default";
    delButton.id = listItem.get_id();
    var delSpan = document.createElement("span");
    delSpan.className = "glyphicon glyphicon-trash";
    delSpan.appendChild(document.createTextNode(" Delete"));
    delSpan.setAttribute("aria-hidden", true);
    delButton.appendChild(delSpan);
    $(delButton).click(function (sender) {
        deleteEventforAsset(sender.delegateTarget.id);
    });
    _td.appendChild(delButton);
    _tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}
function CreateAssetsDataElement(listItem) {
    var data = [];
    var _tr = document.createElement("tr");
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);
    data.push(listItem.get_fieldValues()["SiteLookupTitle"]);

    if (listItem.get_fieldValues()["RoomCharge"] != null && listItem.get_fieldValues()["RoomCharge"] != undefined) {
        data.push(listItem.get_fieldValues()["RoomCharge"]);
    }
    else {
        data.push('N/A');
    }


    if (listItem.get_fieldValues()["StudentPC"] != null && listItem.get_fieldValues()["StudentPC"] != undefined) {
        data.push(listItem.get_fieldValues()["StudentPC"]);
    }
    else {
        data.push('N/A');
    }

    if (listItem.get_fieldValues()["ChargePerPerson"] != null && listItem.get_fieldValues()["ChargePerPerson"] != undefined) {
        data.push(listItem.get_fieldValues()["ChargePerPerson"]);
    }
    else {
        data.push('N/A');
    }
    //if (listItem.get_fieldValues()["InstructorPC"] != null && listItem.get_fieldValues()["InstructorPC"] != undefined) {
    //    data.push(listItem.get_fieldValues()["InstructorPC"]);
    //}
    //else {
    //    data.push('N/A');
    //}
    //var delButton = document.createElement("button");
    //delButton.type = "button";
    //delButton.className = "btn btn-default";
    //delButton.id = listItem.get_id();
    //var delSpan = document.createElement("span");
    //delSpan.className = "glyphicon glyphicon-trash";
    //delSpan.appendChild(document.createTextNode(" Delete"));
    //delSpan.setAttribute("aria-hidden", true);
    //delButton.appendChild(delSpan);
    //$(delButton).click(function (sender) {
    //    deleteEventforAsset(sender.delegateTarget.id);
    //});
    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true"> Delete</span></button>');
    return data;
}
function CreatPEventsTableBodyRow(listItem) {
    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    _tr.id = id;
    $(_tr).click(function (sender) {
        showEventDetails(sender.delegateTarget.id);
    });
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt");//listItem.get_fieldValues()["EndDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    //Delete Button 
    var _td = document.createElement("td");
    var delButton = document.createElement("button");
    delButton.type = "button";
    delButton.className = "btn btn-default";
    delButton.id = listItem.get_id();
    var delSpan = document.createElement("span");
    delSpan.className = "glyphicon glyphicon-trash";
    delSpan.appendChild(document.createTextNode("Select Room"));
    delSpan.setAttribute("aria-hidden", true);
    delButton.appendChild(delSpan);
    $(delButton).click(function (sender) {
        ScheduleEventforEventID(sender.delegateTarget.id);
    });
    _td.appendChild(delButton);
    _tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}

function CreateOverdueEventDataElement(listItem) {
    var data = [];
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);
    //here not operator used take care while merging..........eventlistItem.get_fieldValues()["SiteLookupTitle"]
    data.push(listItem.get_fieldValues()["SiteLookupTitle"]);
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }
   data.push('<img src="../Images/Share.png" class="eventdetails"  alt="View"  height="20" width="20" title="View details"/>');
       
    return data;
}
function CreateEventDataElement(listItem) {
    var data = [];
    //var _tr = document.createElement("tr");
    //if (listItem.get_fieldValues()["SiteLookup"] != null) {
    // EventSiteId = listItem.get_fieldValues()["SiteLookup"].get_lookupValue();
    //}
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);
    //here not operator used take care while merging
    if (!siteRepresentative && !eventOrganizer) {
        data.push(listItem.get_fieldValues()["CustomCreatedBy"]);
    }
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }
    //data.push(listItem.get_fieldValues()["SiteLookup"].get_lookupValue());

    if (siteRepresentative) {
        if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
            data.push('<img src="../Images/SchEvent.png" class="schduleEvent"  alt="Select Room"  height="40" width="40" title="SelectRoom"/>');
            //data.push('<button type="button" class="btn btn-default schduleEvent" >Schedule</button>');
        }
        else {
            data.push('N/A');
        }
    }
    else {
        data.push('<img src="../Images/SchEvent.png" class="schduleEvent"  alt="Select Room"  height="40" width="40" title="SelectRoom"/>');

        //data.push('<button type="button" class="btn btn-default schduleEvent" >Schedule</button>');
    }

    if (siteRepresentative) {
        if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
            //RecurrenceEventId
            if (listItem.get_fieldValues()["RecurringEventId"] == 0) {
                if (listItem.get_fieldValues()["IsRecurring"] == true) {
                    data.push('<img src="../Images/Recurrence.png" class="eventReoccurance"  alt="Recurrence"  height="30" width="30" title="Recurrence"/>');
                } else {
                    //data.push('<img src="../Images/NoRecurrence.png" class="eventReoccurance"  alt="Recurrence"  height="45" width="45" title="Recurrence"/>');
                    data.push('<img src="../Images/Recur.png" class="eventReoccurance"  alt="Recurrence"  height="45" width="45" title="Recurrence"/>');
                }
            } else {
                data.push('');
            }
            // data.push('<button type="button" class="btn btn-default eventReoccurance" >Detail</button>');
        }
        else {
            data.push('N/A');
        }
    }
    else {
        if (listItem.get_fieldValues()["RecurringEventId"] == 0) {
            if (listItem.get_fieldValues()["IsRecurring"] == true) {
                data.push('<img src="../Images/Recurrence.png" class="eventReoccurance"  alt="Recurrence"  height="30" width="30" title="Recurrence"/>');
            } else {
                //data.push('<img src="../Images/NoRecurrence.png" class="eventReoccurance"  alt="Recurrence"  height="45" width="45" title="Recurrence"/>');
                data.push('<img src="../Images/Recur.png" class="eventReoccurance"  alt="Recurrence"  height="45" width="45" title="Recurrence"/>');
            }
            //data.push('<img src="../Images/Recur.png" class="eventReoccurance"  alt="Recurrence"  height="45" width="45" title="Recurrence"/>');
        } else {
            data.push('');
        }

        // data.push('<button type="button" class="btn btn-default eventReoccurance" >Detail</button>');
    }
    if (siteRepresentative) {
        if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
            //data.push('<button type="button" class="btn btn-default rowBill" >Bill</button>');

            data.push('<img src="../Images/bill.png" class="rowBill"  alt="Bill"  height="48" width="48" title="Bill"/>');


        }
        else {
            data.push('N/A');
        }

    }
    else {
        //data.push('<button type="button" class="btn btn-default rowBill" >Bill</button>');
        data.push('<img src="../Images/bill.png" class="rowBill"  alt="Bill"  height="48" width="48" title="Bill"/>');

    }
    if (siteRepresentative) {
        if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
            data.push('<img src="../Images/send-email.png" class="emailEvent"  alt="Approve"  height="20" width="25" title="Send Mail"/>');
        }
        else {
            data.push('N/A');
        }

    }
    else {
        data.push('<img src="../Images/send-email.png"  class="emailEvent" alt="Approve"  height="20" width="25" title="Send Mail"/>');
    }
    if (siteRepresentative) {
        if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
            data.push('<img src="../Images/Share.png" class="eventshare"  alt="Approve"  height="20" width="20" title="Share this event"/>');
        }
        else {
            data.push('N/A');
        }
    }
    else {
        data.push('<img src="../Images/Share.png"  alt="Approve" class="eventshare"  height="20" width="20" title="Share this event"/>');
    }

    if (siteRepresentative) {
        if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
            data.push('<img src="../Images/Binary-Code-128.png"  alt="Html Banner" class="htmlBanner"  height="20" width="20" title="HTML Banner"/>');
        }
        else {
            data.push('N/A');
        }
    }
    else {
        data.push('<img src="../Images/Binary-Code-128.png"  alt="Html Banner" class="htmlBanner"  height="20" width="20" title="HTML Banner"/>');
    }


    //data.push('');
    if (listItem.get_fieldValues()["EventStatus"] != null && listItem.get_fieldValues()["EventStatus"] != undefined) {
        data.push(listItem.get_fieldValues()["EventStatus"]);
    }
    else {
        data.push('N/A');
    }
    //here not operator used take care while merging
    if (!siteRepresentative && !eventOrganizer) {
        if (listItem.get_fieldValues()["EventStatus"] == 'New') {
            data.push('<img src="../Images/reject.png"  alt="Approve" class="btnapproveEvent" height="20" width="20" title="Approve this event"/><img src="../Images/accept.png"  alt="Reject"class="btnrejectEvent" height="20" width="20" title="Reject this event"/>');
        }
        else {
            data.push('N/A');
        }
    }

    if (listItem.get_fieldValues()["SiteLookup"] != null) {
        //EventSiteId = listItem.get_fieldValues()["SiteLookup"].get_lookupValue();
        //alert(listItem.get_fieldValues()["SiteLookup"].get_lookupValue());
        data.push(listItem.get_fieldValues()["SiteLookup"].get_lookupValue());
    }
    if (listItem.get_fieldValues()["ICSFile"] != null) {
        var icsFile = listItem.get_fieldValues()["ICSFile"];
        data.push('<a href=' + icsFile + '><img src="../Images/iCal.png"  alt="I Calendar" height="35" width="35" title="Download ICalendar file"/></a>');
    } else {
        data.push('N/A');
    }

    if (listItem.get_fieldValues()["RecurringEventId"] != null) {
        data.push(listItem.get_fieldValues()["RecurringEventId"]);
    } else {
        data.push('0');
    }
    if (listItem.get_fieldValues()["SiteLookupTitle"] != null) {
        data.push(listItem.get_fieldValues()["SiteLookupTitle"]);
    }
    if (listItem.get_fieldValues()["SiteLookupTitle"] != null) {
        data.push(listItem.get_fieldValues()["Title"]+"( Venue : "+listItem.get_fieldValues()["SiteLookupTitle"]+" )");
    }
    return data;
}
function CreatEnrollEventsTableBodyRow(listItem, empStatus) {
    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    _tr.id = id;
    $(_tr).click(function (sender) {
        showEmpEventDetails(sender.delegateTarget.id, empStatus);
    });
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt");//listItem.get_fieldValues()["EndDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    //var _td = document.createElement("td");
    //if (listItem.get_fieldValues()["Attendees"] != null && listItem.get_fieldValues()["Attendees"] != undefined) {
    //    _td.innerText = listItem.get_fieldValues()["Attendees"];
    //}
    //else {
    //    _td.innerText = "N/A";
    //}
    //_tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}
function CreatEventsFeedbackTableBodyRow(listItem, empStatus) {
    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    _tr.id = id;
    $(_tr).click(function (sender) {
        showFeedbackEventDetails(sender.delegateTarget.id, listItem.get_fieldValues()["Title"]);
    });
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt");//listItem.get_fieldValues()["EndDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    //var _td = document.createElement("td");
    //if (listItem.get_fieldValues()["Attendees"] != null && listItem.get_fieldValues()["Attendees"] != undefined) {
    //    _td.innerText = listItem.get_fieldValues()["Attendees"];
    //}
    //else {
    //    _td.innerText = "N/A";
    //}
    //_tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}
function CreatSiteEventsDataElement(eventlst, i) {
    var data = [];
    data.push(eventlst[i].ID);
    data.push(eventlst[i].Title);
    if (eventlst[i].RoomName != '')
    { data.push(eventlst[i].SiteLookupTitle + " @ " + eventlst[i].RoomNames); }
    else
    {
        data.push(eventlst[i].SiteLookupTitle + " @ NA");
    }

    //data.push(eventlst[i].SiteLookupTitle + "@" + eventlst[i].RoomName);
    data.push(eventlst[i].EventDate.format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    data.push(eventlst[i].EndDate.format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    if (eventlst[i].EventStatus != null && eventlst[i].EventStatus != undefined) {
        data.push(eventlst[i].EventStatus);
    }
    else {
        data.push('N/A');
    }
    if (siteRepresentative) {
        if (eventlst[i].EventStatus == 'New') {
            data.push('<img src="../Images/reject.png"  alt="Approve" class="btnapproveEvent" height="20" width="20" title="Approve this event"/><img src="../Images/accept.png"  alt="Reject"class="btnrejectEvent" height="20" width="20" title="Reject this event"/>');
        }
        else {
            data.push('N/A');
        }
    }


    return data;          // Function returns the product of a and b
}

function CreateSiteEmsUsersDataElement(emsUsersForPrimaryAffiliation, i) {


    var data = [];
    var email = emsUsersForPrimaryAffiliation[i].Title;
    //var username = emsUsersForPrimaryAffiliation[i].Name1"];
    var username = emsUsersForPrimaryAffiliation[i].FirstName;
    var lastname = emsUsersForPrimaryAffiliation[i].LastName;
    var status = emsUsersForPrimaryAffiliation[i].Status;
    var fieldInterest = emsUsersForPrimaryAffiliation[i].FieldInterest;

    var fieldSubInterest = emsUsersForPrimaryAffiliation[i].FieldSubInterest;
    var cnic = emsUsersForPrimaryAffiliation[i].CNIC;
    var role = emsUsersForPrimaryAffiliation[i].Occupation;
    var phone = emsUsersForPrimaryAffiliation[i].ContactNumber;


    var provinceRegion = emsUsersForPrimaryAffiliation[i].ProvinceRegion;
    var uniOrgTitle = emsUsersForPrimaryAffiliation[i].UniOrgTitle;



    var id = emsUsersForPrimaryAffiliation[i].ID;

    //data.push('<input type="checkbox" id="' + id + '"  onclick="IsAllRowsChecked(\'AppUserTable\',\'appchkid\');"  />');

    if (id != null && id != undefined) {
        data.push(id);
    }
    else {
        data.push('N/A');
    }
    if (cnic != null && cnic != undefined) {
        data.push(cnic);
    }
    else {
        data.push('N/A');
    }

    if (username != null && username != undefined) {
        data.push(username);
    }
    else {
        data.push('N/A');
    }
    if (lastname != null && lastname != undefined) {
        data.push(lastname);
    }
    else {
        data.push('N/A');
    }
    if (email != null && email != undefined) {
        data.push(email);
    }
    else {
        data.push('N/A');
    }
    if (provinceRegion != null && provinceRegion != undefined) {
        data.push(provinceRegion);
    }
    else {
        data.push('N/A');
    }

    if (phone != null && phone != undefined) {
        data.push(phone);
    }
    else {
        data.push('N/A');
    }

    if (uniOrgTitle != null && uniOrgTitle != undefined) {
        data.push(uniOrgTitle);
    }
    else {
        data.push('N/A');
    }

    if (role != null && role != undefined) {
        data.push(role);
    }
    else {
        data.push('N/A');
    }

    if (fieldInterest != null && fieldInterest != undefined) {
        data.push(fieldInterest);
    }
    else {
        data.push('N/A');
    }

    if (fieldSubInterest != null && fieldSubInterest != undefined) {
        data.push(fieldSubInterest);
    }
    else {
        data.push('N/A');
    }


    if (status != null && status != undefined) {
        data.push(status);
    }
    else {
        data.push('N/A');
    }
    if (emsUsersForPrimaryAffiliation[i].IsVerified != 'True') {
        data.push('<button type="button" class="btn btn-default" id="btnVerified"><span class="glyphicon glyphicon-ok" aria-hidden="true">Approve</span></button>');
    } else {
        data.push('N/A');
    }
    //if (status == 'Approved') {
    //    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-ok" aria-hidden="true"> Add</span></button>');
    //}
    //else if (status == 'Added') {
    //    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true"> Reject</span></button>');
    //}
    //else
    //    data.push('');

    return data;

}

function CreatEventsFeedbackDataElement(listItem, empStatus) {
    var data = [];
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt")); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        data.push('N/A');
    }

    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));//listItem.get_fieldValues()["EndDate"];
    }
    else {
        data.push('N/A');
    }

    return data;          // Function returns the product of a and b
}
function CreatWaitEventsTableBodyRow(listItem, empStatus) {


    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    _tr.id = id;
    $(_tr).click(function (sender) {
        showEmpEventDetails(sender.delegateTarget.id, empStatus);
    });
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt");//listItem.get_fieldValues()["EndDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    //var _td = document.createElement("td");
    //if (listItem.get_fieldValues()["Attendees"] != null && listItem.get_fieldValues()["Attendees"] != undefined) {
    //    _td.innerText = listItem.get_fieldValues()["Attendees"];
    //}
    //else {
    //    _td.innerText = "N/A";
    //}
    //_tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}
function CreatEnrollEventDataElement(listItem, empStatus) {
    var data = [];
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);

    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }

    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }
    data.push(empStatus);
    return data;
}
function CreatWaitEventDataElement(listItem, empStatus) {
    var data = [];
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);

    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }

    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
    }
    else {
        data.push('N/A');
    }
    data.push(empStatus);
    return data;
}
function CreatAllEventsTableBodyRow(listItem) {
    var _tr = document.createElement("tr");
    var id = listItem.get_id();
    _tr.className = "item";
    _tr.id = id;
    $(_tr).click(function (sender) {
        showAllEventDetails(sender.delegateTarget.id);
    });
    var _td = document.createElement("td");
    _td.innerText = id;
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    _td.innerText = listItem.get_fieldValues()["Title"];
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    var _td = document.createElement("td");
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        _td.innerText = new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt");//listItem.get_fieldValues()["EndDate"];
    }
    else {
        _td.innerText = "N/A";
    }
    _tr.appendChild(_td);
    //var _td = document.createElement("td");
    //if (listItem.get_fieldValues()["Attendees"] != null && listItem.get_fieldValues()["Attendees"] != undefined) {
    //    _td.innerText = listItem.get_fieldValues()["Attendees"];
    //}
    //else {
    //    _td.innerText = "N/A";
    //}
    //_tr.appendChild(_td);
    return _tr;          // Function returns the product of a and b
}
function CreatUsersTableBodyRow(listItem) {

    var email = listItem.get_fieldValues()["Title"];
    var username = listItem.get_fieldValues()[SiteColName];
    var status = listItem.get_fieldValues()[SiteColStatus];
    var id = listItem.get_fieldValues()["ID"];

    var orgtr = document.createElement("tr");
    orgtr.className = "item";
    orgtr.id = id;
    $(orgtr).click(function (sender) {
        alert("userid is:" + sender.delegateTarget.id);
    });
    var orgtd = document.createElement("td");
    orgtd.innerText = id;
    orgtr.appendChild(orgtd);
    var orgtd = document.createElement("td");
    orgtd.innerText = username;
    orgtr.appendChild(orgtd);
    var orgtd = document.createElement("td");
    if (email != null && email != undefined)
    { orgtd.innerText = email; }
    else
    {
        orgtd.innerText = "N/A";
    }
    orgtr.appendChild(orgtd);
    var orgtd = document.createElement("td");
    if (status != null && status != undefined) {
        orgtd.innerText = listItem.get_fieldValues()[SiteColStatus];
    }
    else {
        orgtd.innerText = "N/A";
    }
    orgtr.appendChild(orgtd);
    return orgtr;          // Function returns the product of a and b
}

function CreateUsersDataElement(listItem) {
    var data = [];
    var email = listItem.get_fieldValues()["Title"];
    var username = listItem.get_fieldValues()[SiteColName];
    var lastname = listItem.get_fieldValues()[SiteColLName];
    var status = listItem.get_fieldValues()[SiteColStatus];

    //var cnic = listItem.get_fieldValues()[SiteColCNIC];
    //var address = listItem.get_fieldValues()[SiteColAddress];
    //var city = listItem.get_fieldValues()[SiteColCity];
    //var country = listItem.get_fieldValues()[SiteColCountry];
    //var role = listItem.get_fieldValues()[SiteColProfession];

    //var phone = listItem.get_fieldValues()[SiteContactNumber];

    var cnic = "";
    if (listItem.get_fieldValues()[SiteColCNIC] != null) {
        cnic = listItem.get_fieldValues()[SiteColCNIC];
    }
    else {
        cnic = "";
    }

    var CAddress = "";




    var address = "";
    if (listItem.get_fieldValues()[SiteColAddress] != null) {
        address = listItem.get_fieldValues()[SiteColAddress];
        CAddress = address + ", ";
    }
    else {
        address = "";
    }

    var city = "";
    if (listItem.get_fieldValues()[SiteColCity] != null) {
        city = listItem.get_fieldValues()[SiteColCity].get_lookupValue();
        CAddress = CAddress + city + ", ";
    }
    else {
        city = "";
    }

    var provinceRegion = "";
    if (listItem.get_fieldValues()[SiteColRegion] != null) {
        provinceRegion = listItem.get_fieldValues()[SiteColRegion].get_lookupValue();
        CAddress = CAddress + provinceRegion + ", ";
    }
    else {
        provinceRegion = "";
    }

    var country = "";
    if (listItem.get_fieldValues()[SiteColCountry] != null) {
        country = listItem.get_fieldValues()[SiteColCountry].get_lookupValue();
        CAddress = CAddress + country;
    }
    else {
        country = "";
    }


    var role = "";
    if (listItem.get_fieldValues()[SiteColProfession] != null) {
        role = listItem.get_fieldValues()[SiteColProfession].get_lookupValue();
    }
    else {
        role = "";
    }

    var phone = "";
    if (listItem.get_fieldValues()[SiteContactNumber] != null) {
        phone = listItem.get_fieldValues()[SiteContactNumber];
    }
    else {
        phone = "";
    }



    var id = listItem.get_fieldValues()["ID"];
    var uniOrgTitle = "";

    if ((listItem.get_fieldValues()[SiteColUniTitle] != null) && (listItem.get_fieldValues()[SiteColUniTitle].length != 0)) {
        var x = listItem.get_fieldValues()[SiteColUniTitle].length;
        for (var i = 0; i < x; i++) {
            uniOrgTitle += (listItem.get_fieldValues()[SiteColUniTitle][i]).get_lookupValue() + " ; ";

        }
        //uniOrgTitle = (listItem.get_fieldValues()[SiteColUniTitle][0]).get_lookupValue();
    }
    else {
        uniOrgTitle = "";
    }
    var fieldInterest = "";
    if ((listItem.get_fieldValues()[SiteColInterest] != null) && (listItem.get_fieldValues()[SiteColInterest].length != 0)) {

        var x = listItem.get_fieldValues()[SiteColInterest].length;
        for (var i = 0; i < x; i++) {
            fieldInterest += (listItem.get_fieldValues()[SiteColInterest][i]).get_lookupValue() + " ; ";

        }

        //fieldInterest = (listItem.get_fieldValues()[SiteColInterest][0]).get_lookupValue();
    }
    else {
        fieldInterest = "";
    }
    var fieldSubInterest = "";
    if ((listItem.get_fieldValues()[SiteColSubInterest] != null) && (listItem.get_fieldValues()[SiteColSubInterest].length != 0)) {
        var x = listItem.get_fieldValues()[SiteColSubInterest].length;
        for (var i = 0; i < x; i++) {
            fieldSubInterest += (listItem.get_fieldValues()[SiteColSubInterest][i]).get_lookupValue() + " ; ";

        }
        //fieldSubInterest = (listItem.get_fieldValues()[SiteColSubInterest][0]).get_lookupValue();
    }
    else {
        fieldSubInterest = "";
    }
    var provinceRegion = "";

    if (listItem.get_fieldValues()[SiteColRegion] != null) {
        provinceRegion = listItem.get_fieldValues()[SiteColRegion].get_lookupValue();
    }
    else {
        provinceRegion = "";
    }

    var Address = "";
    Address = address + ", " + city + ", " + provinceRegion + ", " + country;


    data.push('<input type="checkbox" id="' + id + '"  onclick="IsAllRowsChecked(\'usersTable\',\'sitechkid\');" />');


    if (id != null && id != undefined) {
        data.push(id);
    }
    else {
        data.push('N/A');
    }

    if (cnic != null && cnic != undefined) {
        data.push(cnic);
    }
    else {
        data.push('N/A');
    }
    if (username != null && username != undefined) {
        data.push(username);
    }
    else {
        data.push('N/A');
    }
    if (lastname != null && lastname != undefined) {
        data.push(lastname);
    }
    else {
        data.push('N/A');
    }

    if (email != null && email != undefined) {
        data.push(email);
    }
    else {
        data.push('N/A');
    }

    if (Address != null && Address != undefined) {
        data.push(Address);
    }
    else {
        data.push('N/A');
    }

    if (phone != null && phone != undefined) {
        data.push(phone);
    }
    else {
        data.push('N/A');
    }



    if (uniOrgTitle != null && uniOrgTitle != undefined) {
        data.push(uniOrgTitle);
    }
    else {
        data.push('N/A');
    }

    if (role != null && role != undefined) {
        data.push(role);
    }
    else {
        data.push('N/A');
    }
    if (fieldInterest != null && fieldInterest != undefined) {
        data.push(fieldInterest);
    }
    else {
        data.push('N/A');
    }
    if (fieldSubInterest != null && fieldSubInterest != undefined) {
        data.push(fieldSubInterest);
    }
    else {
        data.push('N/A');
    }

    if (status != null && status != undefined) {
        data.push(status);
    }
    else {
        data.push('N/A');
    }
    //if (status == 'New') {
    //    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-ok" aria-hidden="true"> Approve</span></button>');
    //} else if (status == 'Approved' || status == 'Added') {
    //    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-ok" aria-hidden="true"> Sync </span></button>');
    //} else {
    //    data.push('');
    //}


    ////<input type="checkbox"  id="rep"  />

    return data;
}
function CreatAllEventsDataElement(listItem) {
    var data = [];
    data.push(listItem.get_id());
    data.push(listItem.get_fieldValues()["Title"]);
    data.push(listItem.get_fieldValues()["SiteLookupTitle"]);
    if (listItem.get_fieldValues()["EventDate"] != null && listItem.get_fieldValues()["EventDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt")); //listItem.get_fieldValues()["EventDate"];
    }
    else {
        data.push('N/A');
    }
    if (listItem.get_fieldValues()["EndDate"] != null && listItem.get_fieldValues()["EndDate"] != undefined) {
        data.push(new Date(listItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));//listItem.get_fieldValues()["EndDate"];
    }
    else {
        data.push('N/A');
    }
    data.push('<img src="../Images/send-email.png"  class="emailEvent" alt="Approve"  height="20" width="25" title="Send Mail"/>');
    data.push('<img src="../Images/Share.png"  alt="Approve" class="eventshare"  height="20" width="20" title="Share this event"/>');
    return data;
}
// This function shows uniorg
function showUniOrg() {

    var datauni = [];
    //var T = document.getElementById("uniOrgTable");
    //var B = T.getElementsByTagName('tbody');
    //var L = B.length;
    //while (L) T.removeChild(B[--L]);
    $('#EventsTile').css("background-color", "#0072C6");
    $('#AssetsTile').css("background-color", "0072C6");
    $('#SitesTile').css("background-color", "0072C6");
    $('#UniTile').css("background-color", "orange");

    var errArea = document.getElementById("errAllUniOrg");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    $('#myUniOrgDiv').show();
    var hasUniOrg = false;
    hideAllPanels();
    //var UoTable = document.getElementById("uniOrgTable");
    //var tbodyelemnt = document.createElement("tbody");
    //document.getElementById("uniOrgTBody");
    // tbodyelemnt.
    //var tbodyelemntCreate = document.createElement("tbody");
    //tbodyelemntCreate.ap
    list = web.get_lists().getByTitle('Organizations');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var uniorgTable = document.getElementById("uniorgList");
            // Remove all nodes from the orgList <DIV> so we have a clean space to write to
            while (uniorgTable.hasChildNodes()) {
                uniorgTable.removeChild(uniorgTable.lastChild);
            }

            // Iterate through the org list
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                //tbodyelemnt.appendChild(CreatElement(listItem));
                datauni.push(CreateUniOrgDataElement(listItem));

                hasUniOrg = true;
            }
            $('#uniOrgDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="cell-border compact hover strip" id="uniOrgTable"></table>');

            var datat = $('#uniOrgTable').dataTable({
                "data": datauni,
                bDestroy: true,
                "fnDrawCallback": function () {
                    $('#uniOrgTable tbody .edituniorgclass').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEditUniOrg(resultArray[0]);
                    });
                    $('#uniOrgTable tbody .btnapproveUniimg').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        UpdateUnoOrgStatus(resultArray[0], 'Organizations', 'OrgStatus', 'Approved');
                        var request = 'ADD';
                        var objOrg = [];
                        objOrg.push({ title: resultArray[1], AppOrgId: resultArray[0] });
                        saveOrganizaionToSiteList(objOrg, request);
                        Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>University/Organization [Name:<b>" + resultArray[1] + "</b>] has been Approved. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                    });
                    $('#uniOrgTable tbody .btnrejectUniimg').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        UpdateUnoOrgStatus(resultArray[0], 'Organizations', 'OrgStatus', 'Rejected');
                        Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>University/Organization [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                    });
                },
                "columns": [
                    { "title": "ID", "class": "edituniorgclass hideColumn" },
                    { "title": "Name", "class": "edituniorgclass" },
                    { "title": "Created By", "class": "edituniorgclass" },
                    { "title": "Type", "class": "edituniorgclass" },
                    { "title": "Description", "class": "edituniorgclass" },
                    { "title": "Website", "class": "edituniorgclass" },
                    { "title": "Phone", "class": "edituniorgclass" },
                    { "title": "Status", "class": "edituniorgclass" },
                    { "title": "Action" }
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Users by any attribute i.e Name Email Website etc.",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            //$('#uniOrgTable tbody .edituniorgclass').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    showEditUniOrg(resultArray[0]);
            //});
            //$('#uniOrgTable tbody .btnapproveUniimg').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    UpdateUnoOrgStatus(resultArray[0], 'Organizations', 'OrgStatus', 'Approved');
            //    Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>University/Organization [Name:<b>" + resultArray[1] + "</b>] has been Approved. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,dont reply to this email.*************");
            //});
            //$('#uniOrgTable tbody .btnrejectUniimg').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    UpdateUnoOrgStatus(resultArray[0], 'Organizations', 'OrgStatus', 'Rejected');
            //    Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>University/Organization [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,dont reply to this email.*************");

            //});



            //if (!hasUniOrg) {
            //    var noUniOrg = document.createElement("div");
            //    noUniOrg.appendChild(document.createTextNode("There are no University Organizations Registered. You can add a new record from below."));
            //    uniorgTable.appendChild(noUniOrg);
            //}
            $('#AllUniOrg').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get University and Organization Records. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            $('#UniOrgList').fadeIn(500, null);
        });

}


///
//var testit = $('#example1').dataTable();
//$("#example1 tbody tr").live("click", function(event){
//    var id = testit.fnGetData(this)[0];
//    showEditUniOrg(id);
//});
/////////////////////////////////////////////

function ScheduleEventforEventID(eventId) {

    //Code for Rafiq to schedule Event based on 
    //Data Recieved EventID, Site ID, Start Time, End Time in 'EventList Table'
    //Information to Plot Table is gotten using SiteID, to fetch all rooms from Resources Table
    //Plotting of events gotten from 'ScheduledEvents' List, just check room ID
    //then for that Room ID if it exists in Scheduled Events, check the EventID, and the Date (if it matches our EventDate)
    //the plot event otherwise move forward
    //do this for all rooms for that site

    //Once room selected save Event ID and Room ID together 

    //alert("Scheduling Room for Event Id: " + eventId);

    //localStorage.setItem("eventId", JSON.parse(JSON.stringify(eventId)));

    //window.open("Default.aspx?id=" + paramVal);
    window.location = "../Pages/Default.aspx?eventId=" + eventId;
    //if (!urlFlag) {
    //    hostSiteUrl = localStorage.getItem("SPHostUrl");
    //    hostUrl = hostSiteUrl;
    //    //window.location = "../Pages/Default.aspx?SPHostUrl=" + hostSiteUrl;
    //} else {
    //    hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    //    hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
    //    localStorage.setItem("SPHostUrl", hostSiteUrl);
    //}
    $(".attedeEventsCreate").show();
}



/////////////////////////////////////////////////





// This function deletes event when asset assigned to it is deleted 
function deleteRepresentativeforOrg(orgId) {
    list = web.get_lists().getByTitle("Representative");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Representative' LookupId='TRUE' /><Value Type='Lookup'>"
        + orgId
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var repID = listItem1.get_id();
                deleteRepresentative(repID);
            }
            deleteOrganization(orgId);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting representatives for this organization: " + args.get_message());
        }
        );
}

// This function deletes the event
function deleteOrganization(orgID) {
    list = web.get_lists().getByTitle("Organizations");
    var orgItem = list.getItemById(orgID);
    orgItem.deleteObject();
}

// This function deletes the representatives respective to orguni
function deleteRepresentative(repID) {
    list = web.get_lists().getByTitle("Representative");
    var repItem = list.getItemById(repID);
    repItem.deleteObject();
}

// This function saves the Representatives in edit UniOrg form
function saveEditRepresentative() {
    var maxRep = getEditPeopleCount2();

    if (maxRep <= 50) {
        getEditUserInfo2(uniorgID);
        cancelRepresentative();
    }
    else {
        alert("Number of representatives exceeded maximum allowed. Please remove some representative");
    }
}

// Query the picker for user information.
function getEditUserInfo2(editOrgID) {

    // Get the people picker object from the page.
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker2_TopSpan;
    // Get information about all users.
    repList = web.get_lists().getByTitle('Representative');
    reps = peoplePicker.GetAllUserInfo();
    for (var i = 0; i < reps.length; i++) {
        rep = reps[i];
        repName = rep["DisplayText"];

        var repEmail = rep["Description"];

        if (rep["ProviderDisplayName"] == "Extranet Users") {
            repEmail = rep["AutoFillSubDisplayText"];
        }

        addEditRepresentative(repName, editOrgID, repEmail);

    }
    repCount = reps.length;
}

// This function adds employee to the Employee list
function addEditRepresentative(repName, editOrgID, repEmail) {
    repList = web.get_lists().getByTitle("Representative");
    //Create a CAML query that retrieves representative for org
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='OrgLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + editOrgID
            + "</Value></Eq></Where></Query></View>");
    var listItems = repList.getItems(camlQuery);
    var hasRepresentative = false;
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var repl = listItem.get_fieldValues()["Title"];
                if (repl == repName) {
                    hasRepresentative = true;
                }
            }
            if (!hasRepresentative) {
                var itemCreateInfo = new SP.ListItemCreationInformation();
                var listItem = repList.addItem(itemCreateInfo);
                listItem.set_item("Title", repName);
                listItem.set_item("OrgLookup", editOrgID);
                listItem.set_item("RepEmail", repEmail);

                listItem.update();
                context.load(listItem);
                context.executeQueryAsync(function () {

                }
                //function (sender, args) { alert("Error in saving Representatives: " + args.get_message()); }
                );

            }
            if (siteRepresentative) {
                showUniOrgAttendee();
            }
            else {
                showUniOrg();
            }

            showEditUniOrg(editOrgID);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in saving Representatives: " + args.get_message());
        });
}

// Query the picker for user count in edit event dialog 
function getEditPeopleCount2() {
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker2_TopSpan;
    // Get information about all users.
    users = peoplePicker.GetAllUserInfo();
    return users.length;
}

//This function closes the new Attendee dialog
function cancelRepresentative() {
    $('#editRepresentatives').dialog("close");
    $('#editPeoplePicker2').val("");
    $('#EditUniOrg').show();
    var repList = document.getElementById("showRepresentatives");
    while (repList.hasChildNodes()) {
        repList.removeChild(repList.lastChild);
    }
    showEditUniOrg(uniorgID);
}

// This function deletes the selected event
function deleteEditUniOrg() {

    var errArea = document.getElementById("errAllUniOrg");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    var hasSites = false;

    var siteList = web.get_lists().getByTitle('PSites');
    //Create a CAML query that retrieves the sites for this organization
    var siteQuery = new SP.CamlQuery();
    siteQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='OrgLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + currentItem.get_id()
        + "</Value></Eq></Where></Query></View>");
    var siteListItems = siteList.getItems(siteQuery);
    context.load(siteListItems);
    context.executeQueryAsync(
           function () {
               //Success returned from executeQueryAsync
               var listItemEnumerator = siteListItems.getEnumerator();
               while (listItemEnumerator.moveNext()) {
                   hasSites = true;
               }

               if (!hasSites) {

                   var repList = web.get_lists().getByTitle('Representative');
                   //Create a CAML query that retrieves the representatives
                   var repQuery = new SP.CamlQuery();
                   repQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='OrgLookup' LookupId='TRUE' /><Value Type='Lookup'>"
                       + currentItem.get_id()
                       + "</Value></Eq></Where></Query></View>");
                   var repListItems = repList.getItems(repQuery);
                   context.load(repListItems);
                   context.executeQueryAsync(
                       function () {
                           //Success returned from executeQueryAsync
                           var listItemEnumerator = repListItems.getEnumerator();
                           while (listItemEnumerator.moveNext()) {
                               var listItem = listItemEnumerator.get_current();
                               var repid = listItem.get_id();
                               removeRepresentative(repid);
                           }

                           DeleteListData(currentItem.get_id(), 'UnivesityDomainMapList', 'UniId');
                           DeleteListData(currentItem.get_id(), 'UnivesitySubDomainMapList', 'UniId');

                           deletespOrganization(currentItem.get_id(), AffiliationSplst, SpAppOrgID);

                           currentItem.deleteObject();
                           cancelEditUniOrg();
                           if (siteRepresentative) {
                               showUniOrgAttendee();
                           }
                           else {
                               showUniOrg();
                           }


                       });
               }
               else {
                   alert("There are sites registered for this Organization, Delete not successful!");
                   cancelEditUniOrg();
                   if (siteRepresentative) {
                       showUniOrgAttendee();

                   }
                   else {
                       showUniOrg();
                   }


               }
           },
            function (sender, args) {
                //Failure returned from executeQueryAsync
                var divMessage = document.createElement("DIV");
                divMessage.setAttribute("style", "padding:5px;");
                divMessage.appendChild(document.createTextNode("Error: " + args.get_message()));
                errArea.appendChild(divMessage);
            }
            );


}

// This function deletes the representative respective to uniorg that is deleted
function removeRepresentative(repid) {
    list = web.get_lists().getByTitle("Representative");
    var repItem = list.getItemById(repid);
    repItem.deleteObject();
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var repList = document.getElementById("showRepresentatives");
            while (repList.hasChildNodes()) {
                repList.removeChild(repList.lastChild);
            }
            showUniOrg();
        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            alert("Error in Deleting Representative:" + args.get_message());
        });
}








// This function retrieves all sites
function showSites() {


    $('#mySitesDiv').show();

    var sitesData = [];
    var errArea = document.getElementById("errAllSites");
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasSites = false;
    hideAllPanels();
    var tbodyelemnt = document.createElement("tbody");
    var siteList = document.getElementById("AllSites");
    list = web.get_lists().getByTitle('PSites');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var siteTable = document.getElementById("PSites");
            //Remove all nodes from the SiteList <DIV> so we have a clean space to write to
            while (siteTable.hasChildNodes()) {
                siteTable.removeChild(siteTable.lastChild);
            }
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                sitesData.push(CreateSitesDataElement(listItem));
                hasSites = true;
            }
            $('#pSitesDiv').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="sitesTable"></table>');
            var datat = $('#sitesTable').dataTable({
                "data": sitesData,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#sitesTable tbody .editSiteclass').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEditSite(resultArray[0]);
                    });
                    $('#sitesTable tbody .btnapproveSiteimg').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        UpdateSitesStatus(resultArray[0], 'PSites', 'SiteStatus', 'Approved');
                        Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Site [Name:<b>" + resultArray[1] + "</b>] has been Approved. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                    });
                    $('#sitesTable tbody .btnrejectSiteimg').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        UpdateSitesStatus(resultArray[0], 'PSites', 'SiteStatus', 'Rejected');
                        Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Site [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                    });
                },
                "columns": [
                    { "title": "ID", "class": "editSiteclass hideColumn" },
                    { "title": "Site Name", "class": "editSiteclass" },
                    { "title": "Organization Name", "class": "editSiteclass" },
                    { "title": "Created By", "class": "editSiteclass" },
                    { "title": "Address", "class": "editSiteclass" },
                    { "title": "Phone", "class": "editSiteclass" },
                    { "title": "Site Capacity", "class": "editSiteclass" },
                    { "title": "Status", "class": "editSiteclass" },
                    { "title": "Action" }

                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Sites by any attribute i.e Site Name Address Phone Capacity etc",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            //$('#sitesTable tbody .editSiteclass').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();No data available in tableshowAllEvents()
            //    showEditSite(resultArray[0]);
            //});
            //$('#sitesTable tbody .btnapproveSiteimg').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    UpdateSitesStatus(resultArray[0], 'PSites', 'SiteStatus', 'Approved');
            //    Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Site [Name:<b>" + resultArray[1] + "</b>] has been Approved. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,dont reply to this email.*************");
            //});
            //$('#sitesTable tbody .btnrejectSiteimg').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    UpdateSitesStatus(resultArray[0], 'PSites', 'SiteStatus', 'Rejected');
            //    Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Site [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,dont reply to this email.*************");
            //});

            //if (!hasSites) {
            //    var noSites = document.createElement("div");
            //    noSites.appendChild(document.createTextNode("There are no sites registered. You can add a new site from below."));
            //    siteTable.appendChild(noSites);
            //}
            $('#AllSites').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get sites. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            $('#SiteList').fadeIn(500, null);
        });
}

// This function shows the add new site dialog
function addNewSite() {
    var orgnames = document.getElementById("orgnames");
    while (orgnames.hasChildNodes()) {
        orgnames.removeChild(orgnames.lastChild);
    }
    var _repIdes = "";
    if (siteRepresentative) {

        var uniRep = new SP.CamlQuery();
        uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
        unireplist = web.get_lists().getByTitle('Representative');
        var unireplistItems = unireplist.getItems(uniRep);
        context.load(unireplistItems);
        context.executeQueryAsync(
              function () {

                  var listItemEnumerator = unireplistItems.getEnumerator();
                  while (listItemEnumerator.moveNext()) {
                      var listItem = listItemEnumerator.get_current();
                      _repIdes += "<Value Type='Counter'>" + listItem.get_fieldValues()["OrgLookup"].get_lookupValue() + "</Value>";
                  }
                  if (_repIdes == null || _repIdes == "")
                      _repIdes = "<Value Type='Counter'>0</Value>";
                  var eventQuery = new SP.CamlQuery();
                  eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
                  list = web.get_lists().getByTitle('Organizations');
                  var listItems = list.getItems(eventQuery);
                  context.load(listItems);
                  context.executeQueryAsync(
                      function () {
                          // Success returned from executeQueryAsync
                          if (listItems.get_count() > 0) {
                              var listItemEnumerator1 = listItems.getEnumerator();
                              while (listItemEnumerator1.moveNext()) {
                                  var listItem1 = listItemEnumerator1.get_current();
                                  var title = listItem1.get_fieldValues()["Title"];
                                  var id = listItem1.get_fieldValues()["ID"];
                                  //alert(listItem1.get_fieldValues()["OrgStatus"]);
                                  if (listItem1.get_fieldValues()["OrgStatus"] == 'Approved') {
                                      var option = document.createElement('option');
                                      option.innerHTML = title;
                                      option.value = id;
                                      orgnames.appendChild(option);
                                  }
                              }
                              FillUniversityDomainDropDown('newSiteUniversityDomain', uniDomainList);
                              FillUniversitySubDomainDropDown(-1, 'newSiteUniversitysubDomain', unisubDomainList);
                              $('#site').hide();
                              $('#assignSite').show();
                              $('#AddSite').dialog({
                                  width: 'auto',
                                  maxWidth: 600,
                                  height: 'auto',
                                  modal: true,
                                  fluid: true,

                                  show: {
                                      effect: "Scale",
                                      duration: 1000
                                  },
                                  hide: {
                                      effect: "Explode",
                                      duration: 1000
                                  },
                                  beforeClose: function (event, ui) { cancelNewSite2(); }
                              });
                          }
                          else {
                              NotificationMsg("There are no Participating Organizations. Add some now");
                              // alert("There are no Participating Organizations. Add some now");
                              $("a#NavEmpSites").removeClass("zz1_ActiveNav");
                              $("a#NavEmpUni").addClass("zz1_ActiveNav");
                              showUniOrgAttendee();
                          }
                      },
                      function (sender, args) {
                          // Failure returned from executeQueryAsync
                          alert("Error in Populating Sites: " + args.get_message());
                      }
                      );
              },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in Populating Sites: " + args.get_message());
    }
                      );
    }
    else {
        orgList = web.get_lists().getByTitle('Organizations');
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        var listItems = orgList.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync
                if (listItems.get_count() > 0) {
                    var listItemEnumerator1 = listItems.getEnumerator();
                    while (listItemEnumerator1.moveNext()) {
                        var listItem1 = listItemEnumerator1.get_current();
                        var title = listItem1.get_fieldValues()["Title"];
                        var id = listItem1.get_fieldValues()["ID"];
                        var option = document.createElement('option');
                        option.innerHTML = title;
                        option.value = id;
                        orgnames.appendChild(option);
                    }
                    FillUniversityDomainDropDown('newSiteUniversityDomain', uniDomainList);
                    FillUniversitySubDomainDropDown(-1, 'newSiteUniversitysubDomain', unisubDomainList);
                    $('#site').hide();
                    $('#assignSite').show();
                    $('#AddSite').dialog({
                        width: 'auto',
                        maxWidth: 600,
                        height: 'auto',
                        modal: true,
                        fluid: true,

                        show: {
                            effect: "Scale",
                            duration: 1000
                        },
                        hide: {
                            effect: "Explode",
                            duration: 1000
                        },
                        beforeClose: function (event, ui) { cancelNewSite2(); }
                    });
                }
                else {
                    NotificationMsg("There are no Participating Organizations. Add some now");
                    // alert("There are no Participating Organizations. Add some now");
                    $("a#NavSites").removeClass("zz1_ActiveNav");
                    $("a#NavUni").addClass("zz1_ActiveNav");
                    showUniOrg();
                }
            },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in Populating Sites: " + args.get_message());
        }
        );
    }

}

// This function checks for reserved items in the resource list in new event dialog
function assignSite() {
    if ($('#orgnames').val() != "") {
        $('#assignSite').hide();
        $('#site').slideDown(500, null);

        console.log($("#AddSite"));

        //$("#AddSite").dialog("option", "position", { my: "center", at: "top", of: window });
        $(".ui-dialog").css("top", 100);
    }
    else {
        NotificationMsg("Select an organization you want to Register Site and Facilities For");
        //alert("Select an organization you want to Register Site and Facilities For");
    }
}

function cancelNewSite2() {

    clearNewSiteForm();

}
// This function cancels the new site dialog
function cancelNewSite() {
    $('#AddSite').dialog("close");
    clearNewSiteForm();

}

// This function clears the inputs on the new event dialog
function clearNewSiteForm() {
    var errArea = document.getElementById("errAllSites");
    // Remove all nodes from the errAllSites <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    $('#newSiteName').val("");
    $('#newSiteAddress').val("");
    $('#newSitePhone').val("");
    $('#newSiteCapacity').val("");

    var flist = document.getElementsByName("facilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }

    initializePeoplePicker('peoplePickerDiv3');
}

// This function cancels the new site dialog
function saveNewSite() {
    var maxrep = getPeopleCount3();
    if (maxrep == undefined)// to avoid exception on undefined in case of no representative is selected
        maxrep = 0;
    var errArea;
    if (siteRepresentative == true) {
        errArea = document.getElementById("errAllSitesAttendee");
    }
    else {
        errArea = document.getElementById("errAllSites");
    }

    // Remove all nodes from the errAllSites <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    if ($('#orgnames').val() == null) {
        ErrorMsg("You Can't Create Site for now as no Approved Organizations , Try later!");
        cancelNewSite();
    }

    if ($('#newSiteName').val() == "") {
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Site Name' is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'Site Name' is required.");//Added By Ehsan
    }
    else if ($('#newSiteUniversityDomain').val() == null) {
        ErrorMsg("Must select at least one Discipline.");
    }
    else if ($('#newSiteUniversitysubDomain').val() == null) {
        ErrorMsg("'Must select at least one Specialization.");
    }
    else if ($('#newSiteAddress').val() == "") {
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Site Name' is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'Site Address' is required.");//Added By Ehsan
    }
    else if ($('#newSiteCapacity').val() != "" && !$.isNumeric($('#newSiteCapacity').val())) {
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Site Capacity'"));
        errArea.appendChild(divMessage);
    } else {



        var siteName = $.trim($('#newSiteName').val());
        var uniorgID = $('#orgnames').val();
        var hasduplication = false;
        //addOrgName
        // Get all the Rooms associated with the siteId gotten in eventobject
        var dupList = web.get_lists().getByTitle('PSites');
        var dupListItems;
        //Create a CAML query that retrieves the sites for this organization
        var dupQuery = new SP.CamlQuery();


        //dupQuery.set_viewXml("<View><Query><Where><And>" +
        //    "<Eq><FieldRef Name='OrgLookup' /><Value Type='Lookup'>" + uniorgID + "</Value></Eq>" + "<Eq><FieldRef Name='Title' /><Value Type='Text'>" + siteName + "</Value></Eq>" +
        //    "</And></Where></Query></View>");

        dupQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
            + siteName
            + "</Value></Eq></Where></Query></View>");
        dupListItems = dupList.getItems(dupQuery);
        context.load(dupListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var duplistItemEnumerator = dupListItems.getEnumerator();
                while (duplistItemEnumerator.moveNext()) {
                    //var duplistItem = duplistItemEnumerator.get_current();
                    hasduplication = true;
                    ErrorMsg("'Site Name' is already in Use.");
                }
                if (!hasduplication) {




                    //var uniorgID = $('#orgnames').val();
                    siteList = web.get_lists().getByTitle("PSites");
                    var itemCreateInfo = new SP.ListItemCreationInformation();
                    var siteItem = siteList.addItem(itemCreateInfo);
                    siteItem.set_item("Title", siteName);
                    siteItem.set_item("OrgLookup", uniorgID);
                    siteItem.set_item("SiteAddress", $('#newSiteAddress').val());
                    siteItem.set_item("SitePhone", $('#newSitePhone').val());
                    siteItem.set_item("SiteCapacity", $('#newSiteCapacity').val());
                    siteItem.set_item("CustomCreatedBy", useremail);
                    siteItem.set_item("OrgLookupTitle", $("#orgnames option:selected").text());
                    if (siteRepresentative) {
                        siteItem.set_item("SiteStatus", 'New');
                    }
                    else {
                        siteItem.set_item("SiteStatus", 'Approved');

                    }

                    siteItem.update();
                    context.load(siteItem);
                    context.executeQueryAsync(function () {
                        // Success returned from executeQueryAsync
                        siteID = siteItem.get_id();
                        AddSiteDomainMappingItems('SiteDomainMapList', $('#newSiteUniversityDomain').val(), siteID);
                        AddSiteDomainMappingItems('SiteSubDomainMapList', $('#newSiteUniversitysubDomain').val(), siteID);
                        saveFacilities(uniorgID, siteID);
                        getSiteRepInfo(siteID);
                        if (siteRepresentative) {
                            Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>Your request for new Site Registration [Name: <b>" + $('#newSiteName').val() + "</b>] has submitted sucessfully.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                        }
                        cancelNewSite();
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure " + args.get_message());
                    });
                }




            }, function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });


    }
}

// Save the facilities information
function saveFacilities(orgID, siteID) {

    facilitiesList = web.get_lists().getByTitle("SiteFacilities");
    var itemCreateInfo1 = new SP.ListItemCreationInformation();
    var facilitiesItem = facilitiesList.addItem(itemCreateInfo1);
    var fvalue = [];
    var flist = document.getElementsByName("facilities[]");

    for (var i = 0; i < flist.length; i++) {
        fvalue[i] = flist[i].checked;
    }

    facilitiesItem.set_item("Title", orgID);
    facilitiesItem.set_item("SiteLookup", siteID);
    facilitiesItem.set_item("Internet", fvalue[0]);
    facilitiesItem.set_item("VideoCon", fvalue[1]);
    facilitiesItem.set_item("LabFacilities", fvalue[2]);
    facilitiesItem.set_item("MeetingRoom", fvalue[3]);
    facilitiesItem.set_item("AudioMic", fvalue[4]);
    facilitiesItem.set_item("LCD", fvalue[5]);
    facilitiesItem.set_item("Projector", fvalue[6]);
    facilitiesItem.set_item("Parking", fvalue[7]);
    facilitiesItem.set_item("Accomodation", fvalue[8]);
    facilitiesItem.set_item("ACHeating", fvalue[9]);
    facilitiesItem.set_item("Refreshments", fvalue[10]);
    facilitiesItem.set_item("Catering", fvalue[11]);
    facilitiesItem.update();
    context.load(facilitiesItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync

    },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Failure " + args.get_message());
    });

}

// Query the picker for user count in new event dialog
function getPeopleCount3() {
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv3_TopSpan;
    // Get information about all users
    var sitereps = peoplePicker.GetAllUserInfo();
    return sitereps.length;
}

// Query the picker for siteRep information
function getSiteRepInfo(siteID) {
    // Get the people picker object from the page.
    var peoplePicker3 = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv3_TopSpan;

    // Get information about all users.
    siterepList = web.get_lists().getByTitle('SiteRepresentatives');
    var sitereps = peoplePicker3.GetAllUserInfo();
    for (var i = 0; i < sitereps.length; i++) {
        siterep = sitereps[i];
        siterepName = siterep["DisplayText"];

        var siterepEmail = siterep["Description"];

        if (siterep["ProviderDisplayName"] == "Extranet Users") {
            siterepEmail = siterep["AutoFillSubDisplayText"];
        }

        siterepEmail = siterep.EntityData["Email"];

        // alert(siterepEmail);
        addSiteRepresentative(siterepName, siteID, siterepEmail);
    }
    $('#AddNewSite').hide();
    if (siteRepresentative) {
        showSitesAttendee();
    }
    else {
        showSites();
    }
}

// This function adds site representatives to the Site Represenatatives list
function addSiteRepresentative(siterepName, siteID, siterepEmail) {
    var siterepresentativeList = web.get_lists().getByTitle("SiteRepresentatives");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = siterepresentativeList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
       function () {
           // Success returned from executeQueryAsync
           var itemCreateInfo = new SP.ListItemCreationInformation();
           var listItem = siterepresentativeList.addItem(itemCreateInfo);
           listItem.set_item("Title", siterepName);
           listItem.set_item("SiteLookup", siteID);
           listItem.set_item("RepEmail", siterepEmail);
           listItem.update();
           context.load(listItem);
           context.executeQueryAsync(function () {

           });
       },
       function (sender, args) {
           // Failure returned from executeQueryAsync
           alert("Failure " + args.get_message());
       });
}

// This function shows the details for a specific uniorg 
function showEditSite(siteId) {
    FillUniversityDomainDropDown('editSiteUniversityDomain', uniDomainList);
    FillUniversitySubDomainDropDown(-1, 'editSiteUniversitysubDomain', unisubDomainList);
    siteID = siteId;
    var errArea = document.getElementById("errAllSites");
    // Remove all nodes from the errAllSites <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    list = web.get_lists().getByTitle('PSites');
    currentItem = list.getItemById(siteID);
    context.load(currentItem);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            $('#editSiteName').val(currentItem.get_fieldValues()["Title"]);
            $('#editSiteAddress').val(currentItem.get_fieldValues()["SiteAddress"]);
            $('#editSitePhone').val(currentItem.get_fieldValues()["SitePhone"]);
            $('#editSiteCapacity').val(currentItem.get_fieldValues()["SiteCapacity"]);
            var uniorgID = currentItem.get_fieldValues()["OrgLookup"].get_lookupValue();
            uniorgList = web.get_lists().getByTitle('Organizations');
            uniorgItem = uniorgList.getItemById(uniorgID);
            var orgContext = SP.ClientContext.get_current();
            orgContext.load(uniorgItem);
            context.executeQueryAsync(
              function () {

                  GetSelectedDomainItems(siteID, 'SiteDomainMapList', 'editSiteUniversityDomain', 'SiteId');
                  GetSelectedDomainItems(siteID, 'SiteSubDomainMapList', 'editSiteUniversitysubDomain', 'SiteId');
                  $('#editorgname').val(uniorgItem.get_fieldValues()["Title"]);

              }
              );

            $('#EditSite').dialog({
                width: 'auto',
                maxWidth: 600,
                height: 'auto',
                modal: true,
                fluid: true,
                show: {
                    effect: "Scale",
                    duration: 1000
                },
                hide: {
                    effect: "Explode",
                    duration: 1000
                },
                beforeClose: function (event, ui) { cancelEditSite2() }
            });
            getSiteRepresentatives(siteID);
            getSiteFacilities(siteID);
        },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting organization site records: " + args.get_message());
    });

}

//This function populates Facilities from Site Facilities list
function getSiteFacilities(itemID) {
    var sitefacilitiesList = web.get_lists().getByTitle('SiteFacilities');
    sitefacilitiesCount = 0;
    // Create a CAML query that retrieves the facilities
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + itemID
        + "</Value></Eq></Where></Query></View>");
    var listItems = sitefacilitiesList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();

                $('#editfacilities1').prop("checked", listItem.get_fieldValues()["Internet"]);
                $('#editfacilities2').prop("checked", listItem.get_fieldValues()["VideoCon"]);
                $('#editfacilities3').prop("checked", listItem.get_fieldValues()["LabFacilities"]);
                $('#editfacilities4').prop("checked", listItem.get_fieldValues()["MeetingRoom"]);
                $('#editfacilities5').prop("checked", listItem.get_fieldValues()["AudioMic"]);
                $('#editfacilities6').prop("checked", listItem.get_fieldValues()["LCD"]);
                $('#editfacilities7').prop("checked", listItem.get_fieldValues()["Projector"]);
                $('#editfacilities8').prop("checked", listItem.get_fieldValues()["Parking"]);
                $('#editfacilities9').prop("checked", listItem.get_fieldValues()["Accomodation"]);
                $('#editfacilities10').prop("checked", listItem.get_fieldValues()["ACHeating"]);
                $('#editfacilities11').prop("checked", listItem.get_fieldValues()["Refreshments"]);
                $('#editfacilities12').prop("checked", listItem.get_fieldValues()["Catering"]);

            }


        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

//This function populates Representatives from Site Representative list
function getSiteRepresentatives(itemID) {
    var siterepresentativeList = web.get_lists().getByTitle('SiteRepresentatives');
    siterepresentativeCount = 0;
    var siterepNames = "";
    // Create a CAML query that retrieves the employee
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + itemID
        + "</Value></Eq></Where></Query></View>");
    var listItems = siterepresentativeList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var siterepList = document.getElementById("showSiteRepresentatives");
            while (siterepList.hasChildNodes()) {
                siterepList.removeChild(siterepList.lastChild);
            }
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                siterepresentativeCount = siterepresentativeCount + 1;
                siterepNames = listItem.get_fieldValues()["Title"];
                var siterepDelete = document.createElement("span");
                siterepDelete.appendChild(document.createTextNode("X"));
                siterepDelete.className = "deleteButton";
                siterepDelete.id = listItem.get_id();
                $(siterepDelete).click(function (sender) {
                    deleteEditSiteRepresentative(sender.target.id, itemID);
                });
                siterepList.appendChild(siterepDelete);
                var siterepLink = document.createElement("a");
                siterepLink.appendChild(document.createTextNode(siterepNames));
                siterepList.appendChild(siterepLink);
            }
            $('#editSiteRepresentatives').val(siterepNames);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

// This function deletes the rep from site - FINAL - do not change!
function deleteEditSiteRepresentative(siterepid, itemID) {
    list = web.get_lists().getByTitle("SiteRepresentatives");
    var siterepItem = list.getItemById(siterepid);
    siterepItem.deleteObject();
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var siterepList = document.getElementById("showSiteRepresentatives");
            while (siterepList.hasChildNodes()) {
                siterepList.removeChild(siterepList.lastChild);
            }
            if (siteRepresentative) {
                showSitesAttendee();
            }

            else { showSites(); }

            showEditSite(itemID);
        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            alert("Error in Deleting Site Representatives:" + args.get_message());
        });
}

//This function shows the new Representative dialog
function addNewSiteRepresentative() {
    $('#editSiteRepresentatives').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        }
    });
    initializePeoplePicker('editPeoplePicker3');
}

// This function saves the Representatives in edit UniOrg form
function saveEditSiteRepresentative() {
    var maxRep = getEditPeopleCount3();

    if (maxRep <= 100) {
        getEditUserInfo3(siteID);
        cancelSiteRepresentative();

    }
    else {
        alert("Number of site representatives exceeded maximum allowed. Please remove some representative");
    }
}

// Query the picker for user count in edit event dialog 
function getEditPeopleCount3() {
    var peoplePicker3 = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker3_TopSpan;
    // Get information about all users.
    if (peoplePicker3 != undefined) {
        var sitereps = peoplePicker3.GetAllUserInfo();
        return sitereps.length;
    }
    else {
        return 0;
    }


}

// Query the picker for user information.
function getEditUserInfo3(editSiteID) {

    // Get the people picker object from the page.
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker3_TopSpan;
    // Get information about all users.
    siterepList = web.get_lists().getByTitle('SiteRepresentatives');
    sitereps = peoplePicker.GetAllUserInfo();
    for (var i = 0; i < sitereps.length; i++) {
        siterep = sitereps[i];
        siterepName = siterep["DisplayText"];

        var siterepEmail = siterep["Description"];

        if (siterep["ProviderDisplayName"] == "Extranet Users") {
            siterepEmail = siterep["AutoFillSubDisplayText"];
        }
        siterepEmail = siterep.EntityData["Email"];
        addEditSiteRepresentative(siterepName, editSiteID, siterepEmail);

    }
    siterepCount = sitereps.length;
}

// This function adds representatives to the Site Representatives list
function addEditSiteRepresentative(siterepName, editSiteID, siterepEmail) {
    siterepList = web.get_lists().getByTitle("SiteRepresentatives");
    //Create a CAML query that retrieves representative for org
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + editSiteID
            + "</Value></Eq></Where></Query></View>");
    var listItems = siterepList.getItems(camlQuery);
    var hasSiteRepresentative = false;
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var siterepl = listItem.get_fieldValues()["Title"];
                if (siterepl == siterepName) {
                    hasSiteRepresentative = true;
                }
            }
            if (!hasSiteRepresentative) {
                var itemCreateInfo = new SP.ListItemCreationInformation();
                var listItem = siterepList.addItem(itemCreateInfo);
                listItem.set_item("Title", siterepName);
                listItem.set_item("SiteLookup", editSiteID);
                listItem.set_item("RepEmail", siterepEmail);
                listItem.update();
                context.load(listItem);
                context.executeQueryAsync(function () {

                }

                );

            }
            if (siteRepresentative)
            { showSitesAttendee(); }

            else
            { showSites(); }

            showEditSite(editSiteID);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in saving Site Representatives: " + args.get_message());
        });
}

//This function closes the new Representative dialog
function cancelSiteRepresentative() {
    $('#editSiteRepresentatives').dialog("close");
    $('#editPeoplePicker3').val("");
    $('#EditSite').show();
    var siterepList = document.getElementById("showSiteRepresentatives");
    while (siterepList.hasChildNodes()) {
        siterepList.removeChild(siterepList.lastChild);
    }
    saveEditSite2();
    showEditSite(siteID);
}

// This function cancels the editing of an existing event
function cancelEditSite() {
    $('#EditSite').dialog("close");
    clearEditSiteForm();
}

// This function cancels the editing of an existing event
function cancelEditSite2() {
    clearEditSiteForm();
}

// This function clears the inputs on the new event dialog
function clearEditSiteForm() {
    var errArea = document.getElementById("errAllSites");
    // Remove all nodes from the errAllSites <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    $('#editorgname').val("");
    $('#editSiteName').val("");
    $('#editSiteAddress').val("");
    $('#editSitePhone').val("");
    $('#editSiteCapacity').val("");

    var flist = document.getElementsByName("editfacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }


    initializePeoplePicker('editPeoplePicker3');
}

// This function updates an existing site's details and closes dialog
function saveEditSite() {
    var maxReps = getEditPeopleCount3();

    var errArea = document.getElementById("errAllSites");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    if ($('#editSiteName').val() == "") {
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Site Name' field is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'Site Name' is required.");//Added By Ehsan
    }
    else if ($('#editSiteAddress').val() == "") {
        ErrorMsg("'Site Address' is required.");//Added By Ehsan
    }
    else if ($('#editSiteUniversityDomain').val() == null) {
        ErrorMsg("Must select at least one Discipline.");
    }
    else if ($('#editSiteUniversitysubDomain').val() == null) {
        ErrorMsg("'Must select at least one Specialization.");
    }
    else if ($('#editSiteCapacity').val() != "" && !$.isNumeric($('#editSiteCapacity').val())) {
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Site Capacity'"));
        errArea.appendChild(divMessage);
    }
    else if (maxReps <= 100) {


        var siteName = $.trim($('#editSiteName').val());
        var uniorgID = $("#editorgname").val();
        var hasduplication = false;
        //addOrgName
        // Get all the Rooms associated with the siteId gotten in eventobject
        var dupList = web.get_lists().getByTitle('PSites');
        var dupListItems;
        //Create a CAML query that retrieves the sites for this organization
        var dupQuery = new SP.CamlQuery();


        //dupQuery.set_viewXml("<View><Query><Where><And>" +
        //    "<Eq><FieldRef Name='OrgLookup' /><Value Type='Lookup'>" + uniorgID + "</Value></Eq>" + "<Eq><FieldRef Name='Title' /><Value Type='Text'>" + siteName + "</Value></Eq>" +
        //    "</And></Where></Query></View>");

        dupQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
            + siteName
            + "</Value></Eq></Where></Query></View>");
        dupListItems = dupList.getItems(dupQuery);
        context.load(dupListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var duplistItemEnumerator = dupListItems.getEnumerator();
                while (duplistItemEnumerator.moveNext()) {
                    //var duplistItem = duplistItemEnumerator.get_current();
                    var selectedSiteIDs = currentItem.get_id();


                    var sitelistItem = duplistItemEnumerator.get_current();

                    var dupsiteid = sitelistItem.get_id();

                    if (selectedSiteIDs != dupsiteid) {
                        hasduplication = true;
                        ErrorMsg("'Site Name' is already in Use.");
                    }
                }
                if (!hasduplication) {


                    var selectedSiteID = currentItem.get_id();
                    currentItem.set_item("Title", siteName);
                    currentItem.set_item("SiteAddress", $('#editSiteAddress').val());
                    currentItem.set_item("SitePhone", $('#editSitePhone').val());
                    currentItem.set_item("SiteCapacity", $('#editSiteCapacity').val());
                    currentItem.set_item("OrgLookupTitle", $("#editorgname").val());

                    var flist = [];
                    var fval = document.getElementsByName("editfacilities[]");

                    for (var i = 0; i < fval.length; i++) {
                        flist[i] = fval[i].checked;

                    }

                    currentItem.update();
                    context.load(currentItem);
                    context.executeQueryAsync(function () {
                        //Success returned from executeQueryAsync

                        DeleteDomainSiteListItems(selectedSiteID, 'SiteDomainMapList', 'SiteId');
                        DeleteSubDomainSiteListItems(selectedSiteID, 'SiteSubDomainMapList', 'SiteId');

                        saveEditFacilities(selectedSiteID, flist);
                        $('#EditSite').fadeOut(500, null);
                        if (siteRepresentative) {
                            showSitesAttendee();
                        } else {
                            showSites();
                        }

                        cancelEditSite();

                    },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Failure: " + args.get_message());
                        });
                }
            },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Failure: " + args.get_message());
    });

    }
    else {
        alert("Entered site representatives are more than allowed for this site. Please delete some representatives");
    }

}

// This function updates an existing site's details and doesnt close dialog
function saveEditSite2() {
    var maxReps = getEditPeopleCount3();

    var errArea = document.getElementById("errAllSites");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    if ($('#editSiteName').val() == "") {
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Site Name' field is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'Site Name' is required.");//Added By Ehsan
    }
    else if ($('#editSiteAddress').val() == "") {
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Site Name' field is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'Site Address' is required.");//Added By Ehsan
    }
    else if (maxReps <= 100) {

        var flist = [];
        var fval = document.getElementsByName("editfacilities[]");

        for (var i = 0; i < fval.length; i++) {
            flist[i] = fval[i].checked;

        }

        var selectedSiteID = currentItem.get_id();
        currentItem.set_item("Title", $('#editSiteName').val());
        currentItem.set_item("SiteAddress", $('#editSiteAddress').val());
        currentItem.set_item("SitePhone", $('#editSitePhone').val());
        currentItem.set_item("SiteCapacity", $('#editSiteCapacity').val());
        currentItem.update();
        context.load(currentItem);
        context.executeQueryAsync(function () {
            //Success returned from executeQueryAsync
            //$('#EditSite').fadeOut(500, null);
            saveEditFacilities(selectedSiteID, flist);
            if (siteRepresentative) {
                showSitesAttendee();
            }
            else {
                showSites();
            }

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure: " + args.get_message());
        });
    }
    else {
        alert("Entered site representatives are more than allowed for this site. Please delete some representatives");
    }

}

// This function adds representatives to the Site Representatives list
function saveEditFacilities(editSiteID, flist) {
    var fList = web.get_lists().getByTitle("SiteFacilities");
    //Create a CAML query that retrieves representative for org
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + editSiteID
            + "</Value></Eq></Where></Query></View>");
    var listItems = fList.getItems(camlQuery);

    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                listItem.set_item("Internet", flist[0]);
                listItem.set_item("VideoCon", flist[1]);
                listItem.set_item("LabFacilities", flist[2]);
                listItem.set_item("MeetingRoom", flist[3]);
                listItem.set_item("AudioMic", flist[4]);
                listItem.set_item("LCD", flist[5]);
                listItem.set_item("Projector", flist[6]);
                listItem.set_item("Parking", flist[7]);
                listItem.set_item("Accomodation", flist[8]);
                listItem.set_item("ACHeating", flist[9]);
                listItem.set_item("Refreshments", flist[10]);
                listItem.set_item("Catering", flist[11]);
                listItem.update();
                context.load(listItem);
                context.executeQueryAsync(function () {

                }

                );

            }

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in saving Site facilities: " + args.get_message());
        });
}

// This function deletes the selected event
function deleteEditSite() {

    var errArea = document.getElementById("errAllSites");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    var hasRooms = false;

    var assetList = web.get_lists().getByTitle('Resources');

    //Create a CAML query that retrieves the rooms for this organization
    var assetQuery = new SP.CamlQuery();
    assetQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + currentItem.get_id()
        + "</Value></Eq></Where></Query></View>");
    var assetListItems = assetList.getItems(assetQuery);
    context.load(assetListItems);
    context.executeQueryAsync(
           function () {
               //Success returned from executeQueryAsync
               var listItemEnumerator = assetListItems.getEnumerator();
               while (listItemEnumerator.moveNext()) {
                   hasRooms = true;
               }

               if (!hasRooms) {
                   var repList = web.get_lists().getByTitle('SiteRepresentatives');
                   //Create a CAML query that retrieves the site representatives
                   var repQuery = new SP.CamlQuery();
                   repQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
                       + currentItem.get_id()
                       + "</Value></Eq></Where></Query></View>");
                   var repListItems = repList.getItems(repQuery);
                   var fsiteID = currentItem.get_id();
                   context.load(repListItems);
                   context.executeQueryAsync(
                       function () {
                           //Success returned from executeQueryAsync
                           var listItemEnumerator = repListItems.getEnumerator();
                           while (listItemEnumerator.moveNext()) {
                               var listItem = listItemEnumerator.get_current();
                               var repid = listItem.get_id();
                               removeSiteRepresentative(repid);
                           }
                           DeleteListData(fsiteID, 'SiteDomainMapList', 'SiteId');
                           DeleteListData(fsiteID, 'SiteSubDomainMapList', 'SiteId');
                           removeSiteFacilities(fsiteID);
                           deleteEventforSite(fsiteID);

                           cancelEditSite();
                           if (siteRepresentative) {
                               showSitesAttendee();
                           }
                           else {
                               showSites();
                           }

                       });
               }
               else {
                   alert("There are rooms registered for this Site, Delete not successful!");
                   cancelEditSite();
                   if (siteRepresentative) {
                       showSitesAttendee();
                   }
                   else {
                       showSites();
                   }
               }
           },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Error: " + args.get_message()));
            errArea.appendChild(divMessage);
        }
        );
}

// This function deletes the site facilities record respective to site that is deleted
function removeSiteFacilities(fsiteID) {
    fsitelist = web.get_lists().getByTitle("SiteFacilities");

    var sitefQuery = new SP.CamlQuery();
    sitefQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + fsiteID
        + "</Value></Eq></Where></Query></View>");
    var fListItems = fsitelist.getItems(sitefQuery);
    context.load(fListItems);
    context.executeQueryAsync(
       function () {
           //Success returned from executeQueryAsync
           var listItemEnumerator = fListItems.getEnumerator();
           if (listItemEnumerator.moveNext()) {
               var listItem = listItemEnumerator.get_current();
               listItem.deleteObject();
           }

       },
       function (sender, args) {
           //Failure returned from executeQueryAsync          
           alert("Error in Deleting Site Facilities:" + args.get_message());
       }
       );




}

// This function deletes the site representative respective to site that is deleted
function removeSiteRepresentative(siterepid) {
    list = web.get_lists().getByTitle("SiteRepresentatives");
    var siterepItem = list.getItemById(siterepid);
    siterepItem.deleteObject();
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var siterepList = document.getElementById("showSiteRepresentatives");
            while (siterepList.hasChildNodes()) {
                siterepList.removeChild(siterepList.lastChild);
            }
            if (siteRepresentative) {
                showSitesAttendee();
            }
            else {
                showSites();
            }

        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            alert("Error in Deleting Site Representative:" + args.get_message());
        });
}


function populateOrganizations(orgControl) {

    var orgnames = document.getElementById(orgControl);
    while (orgnames.hasChildNodes()) {
        orgnames.removeChild(orgnames.lastChild);
    }
    var _repIdes = "";
    if (siteRepresentative) {

        var uniRep = new SP.CamlQuery();
        uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
        var unireplist1 = web.get_lists().getByTitle('Representative');
        var unireplistItems = unireplist1.getItems(uniRep);
        context.load(unireplistItems);
        context.executeQueryAsync(
            function () {

                var listItemEnumerator = unireplistItems.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    _repIdes += "<Value Type='Counter'>" + listItem.get_fieldValues()["OrgLookup"].get_lookupValue() + "</Value>";
                }
                if (_repIdes == null || _repIdes == "")
                    _repIdes = "<Value Type='Counter'>0</Value>";
                var eventQuery = new SP.CamlQuery();
                eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
                list = web.get_lists().getByTitle('Organizations');
                var listItems = list.getItems(eventQuery);
                context.load(listItems);
                context.executeQueryAsync(
                    function () {
                        // Success returned from executeQueryAsync
                        if (listItems.get_count() > 0) {
                            var listItemEnumerator1 = listItems.getEnumerator();
                            while (listItemEnumerator1.moveNext()) {
                                var listItem1 = listItemEnumerator1.get_current();
                                var title = listItem1.get_fieldValues()["Title"];
                                var id = listItem1.get_fieldValues()["ID"];
                                //alert(listItem1.get_fieldValues()["OrgStatus"]);
                                if (listItem1.get_fieldValues()["OrgStatus"] == 'Approved') {
                                    var option = document.createElement('option');
                                    option.innerHTML = title;
                                    option.value = id;
                                    orgnames.appendChild(option);
                                }
                            }
                        } else {
                            NotificationMsg("There are no Participating Organizations. Add some now");
                            // alert("There are no Participating Organizations. Add some now");
                            $("a#NavEmpSites").removeClass("zz1_ActiveNav");
                            $("a#NavEmpUni").addClass("zz1_ActiveNav");
                            showUniOrgAttendee();
                        }
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error in Populating Sites: " + args.get_message());
                    }
                );
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error in Populating Sites: " + args.get_message());
            }
        );
    } else {
        orgList = web.get_lists().getByTitle('Organizations');
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        var listItems = orgList.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync
                if (listItems.get_count() > 0) {
                    var listItemEnumerator1 = listItems.getEnumerator();
                    while (listItemEnumerator1.moveNext()) {
                        var listItem1 = listItemEnumerator1.get_current();
                        var title = listItem1.get_fieldValues()["Title"];
                        var id = listItem1.get_fieldValues()["ID"];
                        var option = document.createElement('option');
                        option.innerHTML = title;
                        option.value = id;
                        orgnames.appendChild(option);
                    }
                } else {
                    NotificationMsg("There are no Participating Organizations. Add some now");
                    // alert("There are no Participating Organizations. Add some now");
                    $("a#NavSites").removeClass("zz1_ActiveNav");
                    $("a#NavUni").addClass("zz1_ActiveNav");
                    showUniOrg();
                }
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error in Populating Sites: " + args.get_message());
            }
        );
    }

}


// This function shows add rooms dialog on the Create Room dialog
function addAssets() {
    var orgControl = "AssetOrgnames";
    populateOrganizations(orgControl);
    var sitenames = document.getElementById("sitenames");
    while (sitenames.hasChildNodes()) {
        sitenames.removeChild(sitenames.lastChild);
    }
    var listItems;
    var _repIdes = "";
    if (siteRepresentative) {


        var uniRep = new SP.CamlQuery();
        uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
        unireplist = web.get_lists().getByTitle('SiteRepresentatives');
        var unireplistItems = unireplist.getItems(uniRep);
        context.load(unireplistItems);
        context.executeQueryAsync(
              function () {

                  var listItemEnumerator = unireplistItems.getEnumerator();
                  while (listItemEnumerator.moveNext()) {
                      var listItem = listItemEnumerator.get_current();
                      _repIdes += "<Value Type='Counter'>" + listItem.get_fieldValues()["SiteLookup"].get_lookupValue() + "</Value>";
                  }
                  if (_repIdes == null || _repIdes == "")
                      _repIdes = "<Value Type='Counter'>0</Value>";
                  var eventQuery = new SP.CamlQuery();
                  eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
                  list = web.get_lists().getByTitle('PSites');
                  listItems = list.getItems(eventQuery);
                  context.load(listItems);
                  context.executeQueryAsync(
                  function () {
                      if (listItems.get_count() > 0) {
                          var listItemEnumerator1 = listItems.getEnumerator();
                          while (listItemEnumerator1.moveNext()) {
                              var listItem1 = listItemEnumerator1.get_current();
                              var title = listItem1.get_fieldValues()["Title"];
                              var id = listItem1.get_fieldValues()["ID"];
                              if (listItem1.get_fieldValues()["SiteStatus"] == 'Approved') {
                                  var option = document.createElement('option');
                                  option.innerHTML = title;
                                  option.value = id;
                                  sitenames.appendChild(option);
                              }
                          }
                          $('#AddAsset').dialog({
                              width: 'auto',
                              maxWidth: 600,
                              height: 'auto',
                              modal: true,
                              fluid: true,
                              show: {
                                  effect: "Scale",
                                  duration: 1000
                              },
                              hide: {
                                  effect: "Explode",
                                  duration: 1000
                              },
                              beforeClose: function (event, ui) { cancelNewAssets2(); }
                          });
                      }
                      else {
                          NotificationMsg("There are no sites in the system. Add some now");
                          if (siteRepresentative) {
                              $("a#NavEmpRooms").removeClass("zz1_ActiveNav");
                              $("a#NavEmpSites").addClass("zz1_ActiveNav");
                              showSitesAttendee();


                          }
                          else {

                              showSites();
                          }
                      }
                  },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in populating Rooms: " + args.get_message());
        }
    );
              },
function (sender, args) {
    // Failure returned from executeQueryAsync
    alert("Error in populating Rooms: " + args.get_message());
}
                  );
    }
    else {
        siteList = web.get_lists().getByTitle('PSites');
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        listItems = siteList.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
        function () {
            if (listItems.get_count() > 0) {
                var listItemEnumerator1 = listItems.getEnumerator();
                while (listItemEnumerator1.moveNext()) {
                    var listItem1 = listItemEnumerator1.get_current();
                    var title = listItem1.get_fieldValues()["Title"];
                    var id = listItem1.get_fieldValues()["ID"];
                    var option = document.createElement('option');
                    option.innerHTML = title;
                    option.value = id;
                    sitenames.appendChild(option);
                }
                $('#AddAsset').dialog({
                    width: 'auto',
                    maxWidth: 600,
                    height: 'auto',
                    modal: true,
                    fluid: true,
                    show: {
                        effect: "Scale",
                        duration: 1000
                    },
                    hide: {
                        effect: "Explode",
                        duration: 1000
                    },
                    beforeClose: function (event, ui) { cancelNewAssets2(); }
                });
            }
            else {
                NotificationMsg("There are no sites in the system. Add some now");

                if (siteRepresentative) {
                    showSitesAttendee();
                }
                else {
                    $("a#NavRooms").removeClass("zz1_ActiveNav");
                    $("a#NavSites").addClass("zz1_ActiveNav");
                    showSites();
                }
            }
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error in populating Rooms: " + args.get_message());
            }
        );
    }
}

// This function clears the inputs on the add asset form and cancels it
function cancelNewAssets2() {
    $('#addRoom').val("");
    $('#addProjectors').val("");
    $('#addStudentPC').val("");
    $('#addInstructorPC').val("");
    $('#addRoomCharge').val("");
    $('#addChargePerPerson').val("");

    var flist = document.getElementsByName("rfacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }
}



// This function clears the inputs on the add asset form and cancels it
function cancelNewAssets() {

    $('#addRoom').val("");
    $('#addProjectors').val("");
    $('#addStudentPC').val("");
    $('#addInstructorPC').val("");

    $('#addRoomCharge').val("");
    $('#addChargePerPerson').val("");

    var flist = document.getElementsByName("rfacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }



    $('#AddAsset').dialog("close");
}

// This function saves the new asset
function saveNewAssets() {
    if ($('#orgnames').val() == "") {
        var errArea;
        if (siteRepresentative) {
            errArea = document.getElementById("AllAssetsAttendee");
        }
        else {
            errArea = document.getElementById("errAllAssets");
        }
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Site selection is required."));
        errArea.appendChild(divMessage);

    }
    if ($('#sitenames').val() == null) {
        ErrorMsg("You Can't Create Room for now as no Approved Sites, Try later!");//Added By Ehsan
        cancelNewAssets();
    }
    if ($('#addRoom').val() == "") {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        //var divMessage = document.createElement("DIV");
        //divMessage.setAttribute("style", "padding:5px;");
        //divMessage.appendChild(document.createTextNode("'Room Name' is required."));
        //errArea.appendChild(divMessage);
        ErrorMsg("'Room Name' is required.");//Added By Ehsan
    } else if ($('#addStudentPC').val() != "" && !$.isNumeric($('#addStudentPC').val())) {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Max Attendee Capacity'"));
        errArea.appendChild(divMessage);
    } else if ($('#addRoomCharge').val() != "" && !$.isNumeric($('#addRoomCharge').val())) {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Room Charges'"));
        errArea.appendChild(divMessage);
    } else if ($('#addChargePerPerson').val() != "" && !$.isNumeric($('#addChargePerPerson').val())) {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Charge Per Person'"));
        errArea.appendChild(divMessage);
    } else {

        var siteId = $('#sitenames').val();
        var roomName = $.trim($('#addRoom').val());
        var hasduplication = false;
        //addOrgName
        // Get all the Rooms associated with the siteId gotten in eventobject
        var dupList = web.get_lists().getByTitle('Resources');
        var dupListItems;
        //Create a CAML query that retrieves the sites for this organization
        var dupQuery = new SP.CamlQuery();
        //dupQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        //    + roomName
        //    + "</Value></Eq></Where></Query></View>");

        dupQuery.set_viewXml("<View><Query><Where><And>" +
    "<Eq><FieldRef Name='SiteLookup' /><Value Type='Lookup'>" + siteId + "</Value></Eq>" + "<Eq><FieldRef Name='Title' /><Value Type='Text'>" + roomName + "</Value></Eq>" +
    "</And></Where></Query></View>");

        dupListItems = dupList.getItems(dupQuery);
        context.load(dupListItems);
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var duplistItemEnumerator = dupListItems.getEnumerator();
                while (duplistItemEnumerator.moveNext()) {
                    //var duplistItem = duplistItemEnumerator.get_current();
                    hasduplication = true;
                    ErrorMsg("'Room Name' is already in Use.");
                }
                if (!hasduplication) {


                    //var siteID = $('#sitenames').val();
                    var siteName = $("#sitenames option:selected").text();
                    assetList = web.get_lists().getByTitle('Resources');
                    var itemCreateInfo = new SP.ListItemCreationInformation();
                    assetItem = assetList.addItem(itemCreateInfo);
                    assetItem.set_item("Title", roomName);
                    assetItem.set_item("Projectors", $('#addProjectors').val());
                    assetItem.set_item("StudentPC", $('#addStudentPC').val());
                    assetItem.set_item("InstructorPC", $('#addInstructorPC').val());
                    assetItem.set_item("SiteLookup", siteId);
                    assetItem.set_item("CustomCreatedBy", useremail);
                    assetItem.set_item("RoomCharge", $('#addRoomCharge').val());
                    assetItem.set_item("ChargePerPerson", $('#addChargePerPerson').val());
                    assetItem.set_item("SiteLookupTitle", siteName);
                    assetItem.update();
                    context.load(assetItem);
                    context.executeQueryAsync(function () {
                        // Success returned from executeQueryAsync
                        assetID = assetItem.get_id();
                        saveAssetFacilities(siteId, assetID);
                        cancelNewAssets();
                        if (siteRepresentative) {
                            showTrainingAssetsAttendee();
                        } else {
                            showTrainingAssets();
                        }
                    },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Failure " + args.get_message());
                        });
                }


            }, function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });


    }
}

// Save the facilities information
function saveAssetFacilities(siteID, assetID) {

    rfacilitiesList = web.get_lists().getByTitle("RoomFacilities");
    var itemCreateInfo1 = new SP.ListItemCreationInformation();
    var rfacilitiesItem = rfacilitiesList.addItem(itemCreateInfo1);
    var rfvalue = [];
    var rflist = document.getElementsByName("rfacilities[]");

    for (var i = 0; i < rflist.length; i++) {
        rfvalue[i] = rflist[i].checked;
    }

    rfacilitiesItem.set_item("Title", siteID);
    rfacilitiesItem.set_item("ResourceLookup", assetID);
    rfacilitiesItem.set_item("Internet", rfvalue[0]);
    rfacilitiesItem.set_item("VideoConf", rfvalue[1]);
    rfacilitiesItem.set_item("AudioMic", rfvalue[2]);
    rfacilitiesItem.set_item("LCD", rfvalue[3]);
    rfacilitiesItem.set_item("Projector", rfvalue[4]);
    rfacilitiesItem.set_item("ACHeating", rfvalue[5]);
    rfacilitiesItem.update();
    context.load(rfacilitiesItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync

    },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Failure " + args.get_message());
    });

}
// This function shows the details for a specific asset 
function showEditAssets(assetID) {

    var orgControl = "editAssetOrgnames";
    populateOrganizations(orgControl);

    assetId = assetID;
    var errArea = document.getElementById("errAllAssets");
    // Remove all nodes from the errAllSites <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }


    $('#EditAsset').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        beforeClose: function (event, ui) { cancelEditAssets2(); }
    });
    getAssetFacilities(assetID);


    assetList = web.get_lists().getByTitle('Resources');
    currentItem = assetList.getItemById(assetID);
    context.load(currentItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync
        $('#editRoom').val(currentItem.get_fieldValues()["Title"]);
        $('#editProjectors').val(currentItem.get_fieldValues()["Projectors"]);
        $('#editStudentPC').val(currentItem.get_fieldValues()["StudentPC"]);
        $('#editInstructorPC').val(currentItem.get_fieldValues()["InstructorPC"]);
        $('#editRoomCharge').val(currentItem.get_fieldValues()["RoomCharge"]);
        $('#editChargePerPerson').val(currentItem.get_fieldValues()["ChargePerPerson"]);

        var siteID = currentItem.get_fieldValues()["SiteLookup"].get_lookupValue();
        siteList = web.get_lists().getByTitle('PSites');
        siteItem = siteList.getItemById(siteID);
        var siteContext = SP.ClientContext.get_current();
        siteContext.load(siteItem);
        context.executeQueryAsync(
              function () {
                  $('#editsitename').val(siteItem.get_fieldValues()["Title"]);

              }
              );


    },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting assets: " + args.get_message());
    });

}

//This function populates Facilities from Site Facilities list
function getAssetFacilities(itemID) {
    var resourcefacilitiesList = web.get_lists().getByTitle('RoomFacilities');
    resourcefacilitiesCount = 0;
    // Create a CAML query that retrieves the facilities
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ResourceLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + itemID
        + "</Value></Eq></Where></Query></View>");
    var listItems = resourcefacilitiesList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();

                $('#editrfacilities1').prop("checked", listItem.get_fieldValues()["Internet"]);
                $('#editrfacilities2').prop("checked", listItem.get_fieldValues()["VideoConf"]);
                $('#editrfacilities3').prop("checked", listItem.get_fieldValues()["AudioMic"]);
                $('#editrfacilities4').prop("checked", listItem.get_fieldValues()["LCD"]);
                $('#editrfacilities5').prop("checked", listItem.get_fieldValues()["Projector"]);
                $('#editrfacilities6').prop("checked", listItem.get_fieldValues()["ACHeating"]);


            }


        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}
// This function cancels the editing of an existing asset
function cancelEditAssets2() {
    $('#editsitename').val("");
    $('#editRoom').val("");
    $('#editProjectors').val("");
    $('#editStudentPC').val("");
    $('#editInstructorPC').val("");

    $('#editRoomCharge').val("");
    $('#editChargePerPerson').val("");

    var flist = document.getElementsByName("editrfacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }
}

// This function cancels the editing of an existing asset
function cancelEditAssets() {
    $('#editsitename').val("");
    $('#editRoom').val("");
    $('#editProjectors').val("");
    $('#editStudentPC').val("");
    $('#editInstructorPC').val("");



    $('#editRoomCharge').val("");
    $('#editChargePerPerson').val("");

    var flist = document.getElementsByName("editrfacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }

    $('#EditAsset').dialog("close");
}

// This function updates an existing asset's details
function saveEditAssets() {
    if ($('#editRoom').val() == "") {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("'Site Name' is required."));
        errArea.appendChild(divMessage);
    } else if ($('#editStudentPC').val() != "" && !$.isNumeric($('#editStudentPC').val())) {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Max Attendee Capacity'"));
        errArea.appendChild(divMessage);
    } else if ($('#editRoomCharge').val() != "" && !$.isNumeric($('#editRoomCharge').val())) {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Room Charges'"));
        errArea.appendChild(divMessage);
    } else if ($('#editChargePerPerson').val() != "" && !$.isNumeric($('#editChargePerPerson').val())) {
        var errArea = document.getElementById("errAllAssets");
        // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to
        while (errArea.hasChildNodes()) {
            errArea.removeChild(errArea.lastChild);
        }
        var divMessage = document.createElement("DIV");
        divMessage.setAttribute("style", "padding:5px;");
        divMessage.appendChild(document.createTextNode("Only numeric values are allowed in 'Charge Per Person'"));
        errArea.appendChild(divMessage);
    } else {


        var flist = [];
        var fval = document.getElementsByName("editrfacilities[]");

        for (var i = 0; i < fval.length; i++) {
            flist[i] = fval[i].checked;

        }


        var selectedAssetID = currentItem.get_id();
        currentItem.set_item("Title", $('#editRoom').val());
        currentItem.set_item("InstructorPC", $('#editInstructorPC').val());
        currentItem.set_item("StudentPC", $('#editStudentPC').val());

        currentItem.set_item("RoomCharge", $('#editRoomCharge').val());
        currentItem.set_item("ChargePerPerson", $('#editChargePerPerson').val());
        currentItem.set_item("SiteLookupTitle", $('#editsitename').val());

        currentItem.update();
        context.load(currentItem);
        context.executeQueryAsync(function () {
            // Success returned from executeQueryAsync
            $('#editEventDetails').fadeOut(500, null);

            saveEditAssetFacilities(selectedAssetID, flist);


            if (siteRepresentative) {
                showTrainingAssetsAttendee();
            }
            else {
                showTrainingAssets();
            }

            cancelEditAssets();
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error :" + args.get_message());
        });
    }
}

function saveEditAssetFacilities(editAssetID, flist) {
    var fList = web.get_lists().getByTitle("RoomFacilities");
    //Create a CAML query that retrieves representative for org
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ResourceLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + editAssetID
            + "</Value></Eq></Where></Query></View>");
    var listItems = fList.getItems(camlQuery);

    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();


                listItem.set_item("Internet", flist[0]);
                listItem.set_item("VideoConf", flist[1]);
                listItem.set_item("AudioMic", flist[2]);
                listItem.set_item("LCD", flist[3]);
                listItem.set_item("Projector", flist[4]);
                listItem.set_item("ACHeating", flist[5]);
                listItem.update();
                context.load(listItem);
                context.executeQueryAsync(function () {

                }

                );

            }

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in saving Site facilities: " + args.get_message());
        });
}



// This function shows assets
function showTrainingAssets() {

    $('#myAssetsDiv').show();
    var dataroom = [];
    var errArea = document.getElementById("errAllAssets");
    // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
    hideAllPanels();
    list = web.get_lists().getByTitle('Resources');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("assetList");
            // Remove all nodes from the assetList <DIV> so we have a clean space to write to
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            // Iterate through the event list
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                dataroom.push(CreateAssetsDataElement(listItem));
                hasEvents = true;
            }
            $('#assetsDiv').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="assetsTable"></table>');
            var datat = $('#assetsTable').dataTable({
                "data": dataroom,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#assetsTable tbody .editAssetEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEditAssets(resultArray[0]);
                    });

                    $('#assetsTable tbody .deleteassetEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        deleteEventforAsset(resultArray[0]);
                    });

                },
                "columns": [
                    { "title": "ID", "class": "editAssetEvent hideColumn" },
                    { "title": "Room Name", "class": "editAssetEvent" },
                    { "title": "Site Name", "class": "editAssetEvent" },
                                        { "title": "Room Charges", "class": "editAssetEvent" },
                    { "title": "Room Capacity", "class": "editAssetEvent" },
                    { "title": "Charge Per Person", "class": "editAssetEvent" },
                    { "title": "", "class": "deleteassetEvent" }
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Rooms by any attribute i.e Room Name or Room Capacity etc",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });

            //$('#assetsTable tbody .editAssetEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    showEditAssets(resultArray[0]);
            //});

            //$('#assetsTable tbody .deleteassetEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    deleteEventforAsset(resultArray[0]);
            //});

            //if (!hasEvents) {
            //    var noEvents = document.createElement("div");
            //    noEvents.appendChild(document.createTextNode("There are no Rooms. You can add a new Room from below."));
            //    eventTable.appendChild(noEvents);
            //}
            $('#AllAssets').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get assets. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            $('#AssetsList').fadeIn(500, null);
        });
}



// This function deletes asset
function deleteAsset(assetID) {
    assetList = web.get_lists().getByTitle("Resources");
    var assetsItem = assetList.getItemById(assetID);
    assetsItem.deleteObject();
    if (siteRepresentative) {

        showTrainingAssetsAttendee();
    }
    else {
        showTrainingAssets();
    }

}

// This function deletes event when asset assigned to it is deleted 
function deleteEventforAsset(assetId) {
    list = web.get_lists().getByTitle("ScheduledEvents");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ResourceID' LookupId='TRUE' /><Value Type='Lookup'>"
        + assetId
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var eventID = listItem1.get_id();
                deleteEmployee(eventID);
                deleteEvent(eventID);
            }
            deleteAsset(assetId);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting events for this resource: " + args.get_message());
        }
        );

}


///////////////////////////////////

// This function deletes asset
function deleteSite(siteID) {
    siteList = web.get_lists().getByTitle("PSites");
    var sitesItem = siteList.getItemById(siteID);
    sitesItem.deleteObject();
    if (siteRepresentative) {
        showSitesAttendee();
    }
    else {
        showSites();
    }

}

// This function deletes event when asset assigned to it is deleted 
function deleteEventforSite(siteID) {
    list = web.get_lists().getByTitle("EventList");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + siteID
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listEnumerator = listItems.getEnumerator();
            while (listEnumerator.moveNext()) {
                var listItem1 = listEnumerator.get_current();
                var eventID = listItem1.get_id();
                deleteEmployee(eventID);
                deleteEvent(eventID);
            }
            deleteSite(siteID);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting events for this resource: " + args.get_message());
        }
        );

}

/////////////////////////////////

// This function deletes the event
function deleteEvent(eventID) {
    list = web.get_lists().getByTitle("EventList");
    var eventItem = list.getItemById(eventID);
    eventItem.deleteObject();
}

// This function deletes the employees respective to event
function deleteEmployee(empid) {
    list = web.get_lists().getByTitle("Employee");
    var empItem = list.getItemById(empid);
    empItem.deleteObject();
}

// This function shows available sites in new event dialog
function checkReservedAssets(reserveAssets) {

    var reservedAssets = "";
    var innerQ = "";
    siteList = web.get_lists().getByTitle('PSites');
    var camlQuery = new SP.CamlQuery();
    for (var i = 0; i < reserveAssets.length; i++) {
        reservedAssets += "<Neq><FieldRef Name='ID'/><Value Type='Counter'>" + reserveAssets[i] + "</Value></Neq>";
        if (i >= 1) {
            innerQ = "<And>" + reservedAssets + "</And>";
            reservedAssets = innerQ;
        }
    }
    camlQuery.set_viewXml("<View><Query><Where>"
        + reservedAssets
        + "</Where></Query></View>");
    var listItems = siteList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(function () {
        var location = document.getElementById("location");
        while (location.hasChildNodes()) {
            location.removeChild(location.lastChild);
        }
        // Success returned from executeQueryAsync
        var listItemEnumerator1 = listItems.getEnumerator();
        while (listItemEnumerator1.moveNext()) {

            var listItem1 = listItemEnumerator1.get_current();
            var title = listItem1.get_fieldValues()["Title"];
            var id = listItem1.get_fieldValues()["ID"];
            var capacity = listItem1.get_fieldValues()["SiteCapacity"];
            var option = document.createElement('option');
            if (capacity != null)
                title = title + " - " + capacity;
            option.innerHTML = title;
            option.value = id;
            location.appendChild(option);
        }
    }, function (sender, args) {
        // Failure returned from executeQueryAsync
        // alert("Failure " + args.get_message());
    });
}

// This function shows available sites in edit event dialog
function checkEditReservedAssets(reserveAssets) {

    var reservedAssets = "";
    var innerQ = "";
    siteList = web.get_lists().getByTitle('PSites');
    var camlQuery = new SP.CamlQuery();
    for (var i = 0; i < reserveAssets.length; i++) {
        reservedAssets += "<Neq><FieldRef Name='Title'/><Value Type='Text'>" + reserveAssets[i] + "</Value></Neq>";
        if (i >= 1) {
            innerQ = "<And>" + reservedAssets + "</And>";
            reservedAssets = innerQ;
        }
    }
    camlQuery.set_viewXml("<View><Query><Where>"
        + reservedAssets
        + "</Where></Query></View>");
    var listItems = siteList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync
        var location = document.getElementById("editResources");
        while (location.hasChildNodes()) {
            location.removeChild(location.lastChild);
        }

        var listItemEnumerator1 = listItems.getEnumerator();
        while (listItemEnumerator1.moveNext()) {
            $('#editResources').show();
            $('#fillEditOtherData').show();
            var listItem1 = listItemEnumerator1.get_current();
            var title = listItem1.get_fieldValues()["Title"];
            var id = listItem1.get_fieldValues()["ID"];
            var capacity = listItem1.get_fieldValues()["SiteCapacity"];
            var option = document.createElement('option');
            if (capacity != null)
                title = title + " - " + capacity;
            option.innerHTML = title;
            option.value = id;
            location.appendChild(option);
        }
    }, function (sender, args) {
        // Failure returned from executeQueryAsync
        //alert("Failure " + args.get_message());
    });
}

// This function shows all sites
function checkResources() {

    siteList = web.get_lists().getByTitle('PSites');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = siteList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {

            var location = document.getElementById("location");
            while (location.hasChildNodes()) {
                location.removeChild(location.lastChild);
            }


            var listItemEnumerator1 = listItems.getEnumerator();
            while (listItemEnumerator1.moveNext()) {
                var listItem1 = listItemEnumerator1.get_current();
                var title = listItem1.get_fieldValues()["Title"];
                var id = listItem1.get_fieldValues()["ID"];
                var option = document.createElement('option');
                var capacity = listItem1.get_fieldValues()["SiteCapacity"];
                if (capacity != null) {
                    title = title + " - " + capacity;
                }
                option.innerHTML = title;
                option.value = id;
                location.appendChild(option);
            }
        },
        function (sender, args) {
            alert("Error in Populating Sites: " + args.get_message());
        }
        );
}

// This function fills sites associated with selected event in new event dialog
function fillOtherData() {
    var siteID = $('#location').val();
    siteList = web.get_lists().getByTitle('PSites');
    currentItem = siteList.getItemById(siteID);
    context.load(currentItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync
        siteItem = siteID;
        //$('#projectors').val(currentItem.get_fieldValues()["SiteCapacity"]);

    },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting assets: " + args.get_message());
    });
}

// This function fills resources associated with selected location in edit event dialog
function fillEditOtherData() {
    var siteID = $('#editLocation').val();
    $('#saveEditEvent').show();
    siteList = web.get_lists().getByTitle('PSites');
    siteItem = siteList.getItemById(siteID);
    context.load(siteItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync

        //$('#editStudentPCs').val(assetItem.get_fieldValues()["StudentPC"]);
        //$('#editInstructors').val(assetItem.get_fieldValues()["InstructorPC"]);
    },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Error in getting sites: " + args.get_message());
    });
}

// Render and initialize the client-side People Picker
function initializePeoplePicker(peoplePickerElementId) {

    // Create a schema to store picker properties, and set the properties.
    var schema = {};
    schema['PrincipalAccountType'] = 'User,DL,SecGroup,SPGroup';
    schema['SearchPrincipalSource'] = 15;
    schema['ResolvePrincipalSource'] = 15;
    schema['AllowMultipleValues'] = true;
    schema['MaximumEntitySuggestions'] = 50;
    schema['Width'] = '300px';

    // Render and initialize the picker. 
    // Pass the ID of the DOM element that contains the picker, an array of initial
    // PickerEntity objects to set the picker value, and a schema that defines
    // picker properties.
    this.SPClientPeoplePicker_InitStandaloneControlWrapper(peoplePickerElementId, null, schema);
}

// This function checks for reserved items in the resource list in new event dialog



function assignResource() {

    if ($('#newStartDate').val() != "") {
        var addRoom = document.getElementById('location');
        var eventCount = 0;
        var getAssets = [];
        var inputDateStr = $('#newStartDate').val();
        var inputDate = new Date(inputDateStr).format("MM dd, yy hh:mm");
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        list = web.get_lists().getByTitle('EventList');
        var listItems = list.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync
                eventCount = listItems.get_count();
                if (eventCount > 0) {
                    var listItemEnumerator = listItems.getEnumerator();
                    while (listItemEnumerator.moveNext()) {
                        var listItem = listItemEnumerator.get_current();
                        var startDate = listItem.get_fieldValues()["EventDate"].format("MM dd, yy hh:mm");
                        var endDate = listItem.get_fieldValues()["EndDate"].format("MM dd, yy hh:mm");
                        if (startDate <= inputDate && inputDate <= endDate) {
                            getAssets.push(listItem.get_fieldValues()["SiteLookup"].get_lookupValue());
                        }
                    }
                    checkReservedAssets(getAssets);
                    getSitesByDescipline($('#newEventUniversityDomain').val());
                }
                else {
                    checkResources();
                    getSitesByDescipline($('#newEventUniversityDomain').val());
                }
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });
        $('#assignResource').hide();
        $('#resource').slideDown(500, null);
        $('#AddEventDetails').scrollTop($('#AddEventDetails')[0].scrollHeight);
    }
    else {
        alert("Enter Start Date");
    }
}

// This function checks for reserved items in the resource list in edit event dialog
function assignEditResource() {

    var editeventId = $('#editEventid').val();

    if (confirm("Modifying an event will remove all the reserved rooms. Would you like to continue.") == true) {
        deleteSceduledEvent(editeventId);

        $('#edittxtExpectedAttendies').removeAttr("disabled");
        $('#editEvent').removeAttr("disabled");
        $('#editEventDescription').removeAttr("disabled");
        $('#editStartDate').removeAttr("disabled");
        $('#editEndDate').removeAttr("disabled");

        $('#editEventType').removeAttr("disabled");
        $('#editEventDescipline').removeAttr("disabled");

        $('#editlocalperson').removeAttr("disabled");
        $('#editforeignPerson').removeAttr("disabled");

        $('#editeventTypeOpened').removeAttr("disabled");
        $('#editeventTypeCapped').removeAttr("disabled");

        $('#editefacilities1').removeAttr("disabled");
        $('#editefacilities2').removeAttr("disabled");
        $('#editefacilities3').removeAttr("disabled");
        $('#editefacilities4').removeAttr("disabled");
        $('#editefacilities5').removeAttr("disabled");
        $('#editefacilities6').removeAttr("disabled");
        $('#editefacilities7').removeAttr("disabled");
        $('#editefacilities8').removeAttr("disabled");
        $('#editefacilities9').removeAttr("disabled");
        $('#editefacilities10').removeAttr("disabled");
        $('#editefacilities11').removeAttr("disabled");
        $('#editefacilities12').removeAttr("disabled");

        $('#editEventUniversityDomain').removeAttr("disabled");
        $('#editEventUniversitysubDomain').removeAttr("disabled");
        $('#editEventOrgnames').removeAttr("disabled");
        $('#editLocation').hide();
        $('#editeventImageFile').removeAttr("disabled");
        $('#editbtnImageUpload').removeAttr("disabled");
        var editRoom = document.getElementById('editLocation');
        var eventCount = 0;
        var getAssets = [];
        var inputDateStr = $('#editStartDate').val();
        var inputDate = new Date(inputDateStr).format("MM dd, yy hh:mm");
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        list = web.get_lists().getByTitle('EventList');
        var listItems = list.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync
                eventCount = listItems.get_count();
                if (eventCount > 0) {
                    var listItemEnumerator = listItems.getEnumerator();
                    while (listItemEnumerator.moveNext()) {
                        var listItem = listItemEnumerator.get_current();
                        var startDate = listItem.get_fieldValues()["EventDate"].format("MM dd, yy hh:mm");
                        var endDate = listItem.get_fieldValues()["EndDate"].format("MM dd, yy hh:mm");
                        if (startDate <= inputDate && inputDate <= endDate) {
                            getAssets.push(listItem.get_fieldValues()["SiteLookup"].get_lookupValue());
                        }
                    }
                    checkEditReservedAssets(getAssets);
                } else {
                    checkResources();
                }
                $('#saveEditEvent').show();
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });
        $('#assignEditResource').hide();
        $('#editResource').slideDown(500, null);
    }
}


// This function retrieves all events
function showCalendar() {
    //window.location = "../Pages/Default.aspx";
    //showEventCalender();

    localStorage.setItem("eventcalender", 1);

    window.location = "../Pages/Default.aspx?eventcalender";
}

function PopulateSearchDrpDwnlist() {
    var sitenames = document.getElementById("drpdwnSitelst");
    while (sitenames.hasChildNodes()) {
        sitenames.removeChild(sitenames.lastChild);
    }

    var optSelect = document.createElement('option');
    optSelect.innerHTML = 'Select Site';
    optSelect.value = -1;
    sitenames.appendChild(optSelect);

    siteList = web.get_lists().getByTitle('PSites');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    listItems = siteList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            if (listItems.get_count() > 0) {
                var listItemEnumerator1 = listItems.getEnumerator();
                while (listItemEnumerator1.moveNext()) {
                    var listItem1 = listItemEnumerator1.get_current();
                    var title = listItem1.get_fieldValues()["Title"];
                    var id = listItem1.get_fieldValues()["ID"];
                    var option = document.createElement('option');
                    option.innerHTML = title;
                    option.value = id;
                    sitenames.appendChild(option);
                }
            }
        },
    function (sender, args) {
        // error in calender items
    });

    //FillUniversityDomainDropDown_EventTab('drpdwnDisciplinelst', uniDomainList);


    var newDomainType = document.getElementById('drpdwnDisciplinelst');

    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(uniDomainList);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            DropDowncleaner(document.getElementById('drpdwnDisciplinelst'));
            var option = document.createElement('option');
            option.innerHTML = 'Select Discipline';
            option.value = 'null';
            newDomainType.appendChild(option);
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var option = document.createElement('option');
                option.innerHTML = listItem.get_fieldValues()["Title"];
                option.value = listItem.get_fieldValues()["Title"];
                newDomainType.appendChild(option);
            }

        },
        function () {
            alert('Error in loading Data...Check your Internet Connection');
        }
        );

}

function showEventCalender() {

    PopulateSearchDrpDwnlist();
    SearchCalendar();
}
function showEventCalender1() {


    hideAllPanels();
    AllAttendeeControlHide();
    if (isattendee == true || (eventOrganizer == true || siteRepresentative == true)) {
        $('#EmployeeHome').show();
        $('#AllRoleRequest').hide();
    }

    //document.getElementById("calenderLoader").style.display = 'block';
    // Configuration settings for Scheduler
    scheduler.clearAll();
    scheduler.endLightbox(false);

    scheduler.config.isReadonly = true;
    scheduler.config.dblclick_create = false;
    scheduler.templates.tooltip_date_format = scheduler.date.date_to_str("%Y-%m-%d %H:%i");

    list = web.get_lists().getByTitle('EventList');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    var myJsonObject = [];
    var sections = {};
    var eventlist = [];
    var empEvents = [];
    //myJSONObject.hasOwnProperty
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            var itemIndex = 0;
            var itemsCount = listItems.get_count();

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {

                var listItem = listItemEnumerator.get_current();
                var itemId = listItem.get_fieldValues()["ID"];
                var itemTitle = listItem.get_fieldValues()["Title"]; // 2013-02-18 12:00
                var itemStartDate = listItem.get_fieldValues()["EventDate"].format("yyyy-MM-dd hh:mm");
                var itemEndDate = listItem.get_fieldValues()["EndDate"].format("yyyy-MM-dd hh:mm");
                var itemCustomCreatedBy = listItem.get_fieldValues()["CustomCreatedBy"];

                eventlist.push({ ID: itemId, Title: itemTitle, startDate: itemStartDate, EndDate: itemEndDate, customCreatedBy: itemCustomCreatedBy, Status: "NA" });
            }
            if (eventlist.length != 0) {
                var i = 0;


                //eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");


                var emplist = web.get_lists().getByTitle('Employee');
                var camlQuery1 = new SP.CamlQuery();

                var str1 = "<View><Query><Where><And><In><FieldRef Name ='EventLookup' LookupId='TRUE'/><Values >";
                var str2 = "";
                var str4 = "</Where></Query></View>";
                while (i < eventlist.length) {
                    str2 += "<Value Type = 'Lookup'>" + eventlist[i].ID + "</Value>";
                    i++;
                }

                var str3 = "</Values></In><Eq><FieldRef Name='AttendeeEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></And>";
                var str5 = str1 + str2 + str3 + str4;

                camlQuery1.set_viewXml(str5);

                var emplistItems = emplist.getItems(camlQuery1);
                context.load(emplistItems);
                context.executeQueryAsync(
                    function () {
                        var emplistItemEnumerator = emplistItems.getEnumerator();
                        while (emplistItemEnumerator.moveNext()) {
                            var emplistItem = emplistItemEnumerator.get_current();
                            // Success returned from executeQueryAsync
                            empEvents.push({ ID: emplistItem.get_fieldValues()["ID"], AttendeeEmail: emplistItem.get_fieldValues()["AttendeeEmail"], Status: emplistItem.get_fieldValues()["_Status"], EventId: emplistItem.get_fieldValues()["EventLookup"].get_lookupValue() });
                        }

                        for (i = 0; i < empEvents.length; i++) {
                            for (var j = 0; j < eventlist.length; j++) {
                                if (empEvents[i].EventId == eventlist[j].ID) {
                                    eventlist[j].Status = empEvents[i].Status;
                                }
                            }
                        }


                        i = 0;
                        while (i < eventlist.length) {


                            if (i == 0) {
                                if (eventlist[i].Status != "NA") {
                                    if (eventlist[i].Status == 'Enrolled' || eventlist[i].Status == 'Self-Enrolled') {
                                        myJsonObject['bindings'] = [{ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title, section_id: i, color: "green" }];
                                    } else if (eventlist[i].Status == 'Wait') {
                                        myJsonObject['bindings'] = [{ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title, section_id: i, color: "Orange" }];
                                    }

                                } else {
                                    myJsonObject['bindings'] = [{ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title, section_id: i, color: "#1082B5" }];
                                }
                                sections['bindings'] = [{ key: i, label: eventlist[i].Title }];
                            } else {

                                if (eventlist[i].Status != "NA") {
                                    if (eventlist[i].Status == 'Enrolled' || eventlist[i].Status == 'Self-Enrolled') {
                                        myJsonObject.bindings.push({ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title, section_id: i, color: "green" });
                                    } else if (eventlist[i].Status == 'Wait') {
                                        myJsonObject.bindings.push({ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title, section_id: i, color: "Orange" });
                                    }
                                } else {
                                    myJsonObject.bindings.push({ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title, section_id: i, color: "#1082B5" });
                                }

                                //myJsonObject.bindings.push({ start_date: itemStartDate, end_date: itemEndDate, text: itemTitle, section_id: itemIndex });
                                sections.bindings.push({ key: i, label: eventlist[i].Title });
                            }

                            i++;
                        }

                        scheduler.locale.labels.timeline_tab = "Timeline";
                        scheduler.locale.labels.section_custom = "Section";
                        scheduler.config.details_on_create = false;
                        scheduler.config.details_on_dblclick = false;
                        scheduler.config.quick_info_detached = false;
                        scheduler.config.xml_date = "%Y-%m-%d %H:%i";


                        scheduler.config.readonly_form = true;
                        scheduler.init('calenderLoaderView', new Date(), "month");
                        scheduler.parse(myJsonObject.bindings, "json");
                        $('#calenderLoader').show();
                        $("#month_tab").trigger("click");
                        scheduler.config.details_on_create = false;
                        scheduler.config.details_on_dblclick = false;
                        scheduler.config.isReadonly = true;
                        document.getElementById("calenderLoader").style.display = 'block';

                    },
                    function (sender, args) {
                        // error in calender items
                    });
            } else {
                scheduler.locale.labels.timeline_tab = "Timeline";
                scheduler.locale.labels.section_custom = "Section";
                scheduler.config.details_on_create = false;
                scheduler.config.details_on_dblclick = false;
                scheduler.config.quick_info_detached = false;
                scheduler.config.xml_date = "%Y-%m-%d %H:%i";


                scheduler.config.readonly_form = true;
                scheduler.init('calenderLoaderView', new Date(), "month");
                scheduler.parse(myJsonObject.bindings, "json");
                $('#calenderLoader').show();
                $("#month_tab").trigger("click");
                scheduler.config.details_on_create = false;
                scheduler.config.details_on_dblclick = false;
                scheduler.config.isReadonly = true;
                document.getElementById("calenderLoader").style.display = 'block';
            }
        },
        function (sender, args) {
            // error in calender items
        });

    var errArea = document.getElementById("errAllEvents");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
}

function SearchCalendar() {
    hideAllPanels();
    AllAttendeeControlHide();
    if (isattendee == true || (eventOrganizer == true || siteRepresentative == true)) {
        $('#EmployeeHome').show();
        //$('#AllRoleRequest').hide();
    }

    //document.getElementById("calenderLoader").style.display = 'block';

    var siteId = $('#drpdwnSitelst').val();
    var discipineName = $('#drpdwnDisciplinelst').val();

    // Configuration settings for Scheduler
    scheduler.clearAll();
    scheduler.endLightbox(false);

    scheduler.config.isReadonly = true;
    scheduler.config.dblclick_create = false;
    scheduler.templates.tooltip_date_format = scheduler.date.date_to_str("%Y-%m-%d %H:%i");

    list = web.get_lists().getByTitle('EventList');
    //var camlQuery = SP.CamlQuery.createAllItemsQuery();

    // Create a CAML query that retrieves the facilities
    var camlQuery = new SP.CamlQuery();
    //camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
    //    + siteName
    //    + "</Value></Eq></Where></Query></View>");

    //    camlQuery.set_viewXml("<View><Query><Where><Or>"
    //           + "<IsNotNull><FieldRef Name='SiteLookup' /></IsNotNull>"
    //           + "<Eq><FieldRef Name='EventDiscispline' /><Value Type='Text'>" + discipineName + "</Value></Eq>"
    //+ "</Or></Where></Query></View>");

    var strSite;
    var strDiscipline;

    if (siteId == '-1') {
        strSite = "<IsNotNull><FieldRef Name='SiteLookup' /></IsNotNull>";
    }
    else {
        strSite = "<Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>" + siteId + "</Value></Eq>";
    }

    if (discipineName == null || discipineName == 'null') {
        strDiscipline = "<IsNotNull><FieldRef Name='EventDiscispline' /></IsNotNull>";
    }
    else {
        strDiscipline = "<Eq><FieldRef Name='EventDiscispline' /><Value Type='Text'>" + discipineName + "</Value></Eq>";
    }

    camlQuery.set_viewXml("<View><Query><Where><And>"
                    + strSite
                    + strDiscipline
      + "</And></Where></Query></View>");


    var listItems = list.getItems(camlQuery);
    var myJsonObject = [];
    var sections = {};
    var eventlist = [];
    var empEvents = [];
    //myJSONObject.hasOwnProperty
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            var itemIndex = 0;
            var itemsCount = listItems.get_count();

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {

                var listItem = listItemEnumerator.get_current();
                var itemId = listItem.get_fieldValues()["ID"];
                var itemTitle = listItem.get_fieldValues()["Title"]; // 2013-02-18 12:00
                var itemStartDate = listItem.get_fieldValues()["EventDate"].format("yyyy-MM-dd hh:mm");
                var itemEndDate = listItem.get_fieldValues()["EndDate"].format("yyyy-MM-dd hh:mm");
                var itemCustomCreatedBy = listItem.get_fieldValues()["CustomCreatedBy"];
                var siteLookupTitle = listItem.get_fieldValues()["SiteLookupTitle"];

                eventlist.push({ ID: itemId, Title: itemTitle, startDate: itemStartDate, EndDate: itemEndDate, customCreatedBy: itemCustomCreatedBy, Status: "NA", siteName: siteLookupTitle });
            }
            if (eventlist.length != 0) {
                var i = 0;


                //eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");


                var emplist = web.get_lists().getByTitle('Employee');
                var camlQuery1 = new SP.CamlQuery();

                var str1 = "<View><Query><Where><And><In><FieldRef Name ='EventLookup' LookupId='TRUE'/><Values >";
                var str2 = "";
                var str4 = "</Where></Query></View>";
                while (i < eventlist.length) {
                    str2 += "<Value Type = 'Lookup'>" + eventlist[i].ID + "</Value>";
                    i++;
                }

                var str3 = "</Values></In><Eq><FieldRef Name='AttendeeEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></And>";
                var str5 = str1 + str2 + str3 + str4;

                camlQuery1.set_viewXml(str5);

                var emplistItems = emplist.getItems(camlQuery1);
                context.load(emplistItems);
                context.executeQueryAsync(
                    function () {
                        var emplistItemEnumerator = emplistItems.getEnumerator();
                        while (emplistItemEnumerator.moveNext()) {
                            var emplistItem = emplistItemEnumerator.get_current();
                            // Success returned from executeQueryAsync
                            empEvents.push({ ID: emplistItem.get_fieldValues()["ID"], AttendeeEmail: emplistItem.get_fieldValues()["AttendeeEmail"], Status: emplistItem.get_fieldValues()["_Status"], EventId: emplistItem.get_fieldValues()["EventLookup"].get_lookupValue() });
                        }

                        for (i = 0; i < empEvents.length; i++) {
                            for (var j = 0; j < eventlist.length; j++) {
                                if (empEvents[i].EventId == eventlist[j].ID) {
                                    eventlist[j].Status = empEvents[i].Status;
                                }
                            }
                        }


                        i = 0;
                        while (i < eventlist.length) {


                            if (i == 0) {
                                if (eventlist[i].Status != "NA") {
                                    if (eventlist[i].Status == 'Enrolled' || eventlist[i].Status == 'Self-Enrolled') {
                                        myJsonObject['bindings'] = [{ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title + " ( Venue: " + siteLookupTitle+" )", section_id: i, color: "green" }];
                                    } else if (eventlist[i].Status == 'Wait') {
                                        myJsonObject['bindings'] = [{ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title + "( Venue: " + siteLookupTitle + ")", section_id: i, color: "Orange" }];
                                    }

                                } else {
                                    myJsonObject['bindings'] = [{ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title + " ( Venue: " + siteLookupTitle + " )", section_id: i, color: "#1082B5" }];
                                }
                                sections['bindings'] = [{ key: i, label: eventlist[i].Title }];
                            } else {

                                if (eventlist[i].Status != "NA") {
                                    if (eventlist[i].Status == 'Enrolled' || eventlist[i].Status == 'Self-Enrolled') {
                                        myJsonObject.bindings.push({ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title + " ( Venue: " + siteLookupTitle + " )", section_id: i, color: "green" });
                                    } else if (eventlist[i].Status == 'Wait') {
                                        myJsonObject.bindings.push({ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title + " ( Venue: " + siteLookupTitle + " )", section_id: i, color: "Orange" });
                                    }
                                } else {
                                    myJsonObject.bindings.push({ start_date: eventlist[i].startDate, end_date: eventlist[i].EndDate, text: eventlist[i].Title + " ( Venue: " + siteLookupTitle + " )", section_id: i, color: "#1082B5" });
                                }

                                //myJsonObject.bindings.push({ start_date: itemStartDate, end_date: itemEndDate, text: itemTitle, section_id: itemIndex });
                                sections.bindings.push({ key: i, label: eventlist[i].Title + " ( Venue: " + siteLookupTitle + " )" });
                            }

                            i++;
                        }

                        scheduler.locale.labels.timeline_tab = "Timeline";
                        scheduler.locale.labels.section_custom = "Section";
                        scheduler.config.details_on_create = false;
                        scheduler.config.details_on_dblclick = false;
                        scheduler.config.quick_info_detached = false;
                        scheduler.config.xml_date = "%Y-%m-%d %H:%i";


                        scheduler.config.readonly_form = true;
                        scheduler.init('calenderLoaderView', new Date(), "month");
                        scheduler.parse(myJsonObject.bindings, "json");
                        $('#calenderLoader').show();
                        $("#month_tab").trigger("click");
                        scheduler.config.details_on_create = false;
                        scheduler.config.details_on_dblclick = false;
                        scheduler.config.isReadonly = true;
                        document.getElementById("calenderLoader").style.display = 'block';

                    },
                    function (sender, args) {
                        // error in calender items
                    });
            } else {
                scheduler.locale.labels.timeline_tab = "Timeline";
                scheduler.locale.labels.section_custom = "Section";
                scheduler.config.details_on_create = false;
                scheduler.config.details_on_dblclick = false;
                scheduler.config.quick_info_detached = false;
                scheduler.config.xml_date = "%Y-%m-%d %H:%i";


                scheduler.config.readonly_form = true;
                scheduler.init('calenderLoaderView', new Date(), "month");
                scheduler.parse(myJsonObject.bindings, "json");
                $('#calenderLoader').show();
                $("#month_tab").trigger("click");
                scheduler.config.details_on_create = false;
                scheduler.config.details_on_dblclick = false;
                scheduler.config.isReadonly = true;
                document.getElementById("calenderLoader").style.display = 'block';
            }











        },
        function (sender, args) {
            // error in calender items
        });

    var errArea = document.getElementById("errAllEvents");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
}





// This function retrieves all events
function showOverdueEvents() {

    showLoader();
    $('#myEventsDiv').show();
    //adding deciplin etc 
    var dataEvents = [];
    var errArea = document.getElementById("errAllEvents");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
    hideAllPanels();
    var eventList = document.getElementById("AllEvents");
    list = web.get_lists().getByTitle('EventList');
    var camlQuery = new SP.CamlQuery();

    var currentdate=new Date();
    currentdate = currentdate.format("yyyy-MM-dd HH:mm:ss");
    var _qstring = "<View><Query><Where><Lt><FieldRef Name='EndDate' /><Value IncludeTimeValue='TRUE' Type='DateTime'>"+currentdate+"</Value></Lt></Where></Query></View>";
    camlQuery.set_viewXml(_qstring);
    var mtlistItems = list.getItems(camlQuery);
    context.load(mtlistItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("EventDiv");
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            // Iterate through the event list
            var listItemEnumerator1 = mtlistItems.getEnumerator();
            while (listItemEnumerator1.moveNext()) {
                var listItem = listItemEnumerator1.get_current();
                dataEvents.push(CreateOverdueEventDataElement(listItem));
            }
            $('#EventDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="cell-border compact hover strip"  id="evetnsTable"></table>');

            var datat = $('#evetnsTable').dataTable({
                "data": dataEvents,
                bDestroy: true,
                "aaSorting": [[1, "asc"]],

                "fnDrawCallback": function () {
                
                    $('#evetnsTable tbody .eventdetails').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEventFeedbackDetails(resultArray[0]);
                    });
                 
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var last = null;

                    api.column(1, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {
                            $(rows).eq(i).before(
                                '<tr class="group"><td colspan="13">' + group + '</td></tr>'
                            );

                            last = group;
                        }
                    });
                },

                "columns": [
                    { "title": "ID", "class": "hideColumn" },
                    { "title": "Event Name",  "width": "20%" },
                    { "title": "Venue",  "width": "20%" },
                    { "title": "Start Time",  "width": "10%" },
                    { "title": "End Time", "width": "10%" },                  
                    { "title": "View Details", "width": "5%" }
                   
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Events by any attribute i.e Event Name Event Date Time or Status etc.",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input",
                "order": [1, 'desc']
            });
            ChangeGroupColor();
            $('#AllEvents').fadeIn(500, null);
        },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    var divMessage = document.createElement("DIV");
                    divMessage.setAttribute("style", "padding:5px;");
                    divMessage.appendChild(document.createTextNode("Failed to get events. Error: " + args.get_message()));
                    errArea.appendChild(divMessage);
                    $('#EventList').fadeIn(500, null);
                });
    hideLoader();

}
function showEvents() {

    $('#myEventsDiv').show();
    //adding deciplin etc 
    var dataEvents = [];
    var errArea = document.getElementById("errAllEvents");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
    hideAllPanels();
    //var tbodyelemnt = document.createElement("tbody");
    var eventList = document.getElementById("AllEvents");
    list = web.get_lists().getByTitle('EventList');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();

    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("EventList");

            // Remove all nodes from the EventList <DIV> so we have a clean space to write to
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }

            // Iterate through the event list
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                dataEvents.push(CreateEventDataElement(listItem));
                hasEvents = true;
            }
            $('#EventDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="cell-border compact hover strip"  id="evetnsTable"></table>');

            var datat = $('#evetnsTable').dataTable({
                "data": dataEvents,
                bDestroy: true,
                "aaSorting": [[1, "asc"]],

                "fnDrawCallback": function () {
                    $('#evetnsTable tbody .emailEvent').on('click', function (e) {
                        e.preventDefault();
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        currentEventIdformailing = resultArray[0];
                        SendEmaildialog(resultArray[1], resultArray[3], resultArray[4]);
                    });

                    $('#evetnsTable tbody .eventReoccurance').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        eventId_ReOccurance = resultArray[0];
                        EventReOccuranceDialog();
                    });

                    $('#evetnsTable tbody .rowEditEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEventDetails(resultArray[0]);

                    });
                    $('#evetnsTable tbody .schduleEvent').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        ScheduleEventforEventID(resultArray[0]);
                    });
                    $('#evetnsTable tbody .rowBill').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        BillChargesforEventID(resultArray, 'SuperAdmin');
                    });
                    $('#evetnsTable tbody .eventshare').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        ShareOnFacebook(resultArray, "AdminView");
                    });
                    $('#evetnsTable tbody .btnapproveEvent').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        UpdateEventStatus(resultArray[0], 'EventList', 'EventStatus', 'Approved');
                        Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Event [Name:<b>" + resultArray[1] + "</b>] has been Aprroved. Contact Administrator for details.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                    });
                    $('#evetnsTable tbody .btnrejectEvent').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        UpdateEventStatus(resultArray[0], 'EventList', 'EventStatus', 'Rejected');
                        Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Event [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                    });

                    $('#evetnsTable tbody .htmlBanner').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        HtmlBanner(resultArray, 'AdminView');
                    });
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var last = null;

                    //api.column(1, { page: 'current' }).data().each(function (group, i) {
                    //    if (last !== group) {
                    //        $(rows).eq(i).before(
                    //            '<tr class="group"><td colspan="13">' + group + '</td></tr>'
                    //        );

                    //        last = group;
                    //    }
                    //});
                    api.column(17, { page: 'current' }).data().each(function (group, i) {
                        if (last !== group) {
                            $(rows).eq(i).before(
                                '<tr class="group"><td colspan="13">' + group + '</td></tr>'
                            );

                            last = group;
                        }
                    });
                },

                "columns": [
                    { "title": "ID", "class": "rowEditEvent hideColumn" },
                    { "title": "Event Name", "class": "rowEditEvent", "width": "20%" },
                    { "title": "Created By", "class": "rowEditEvent", "width": "20%" },
                    { "title": "Start Time", "class": "rowEditEvent", "width": "10%" },
                    { "title": "End Time", "class": "rowEditEvent", "width": "10%" },
                    { "title": "Reserve Space", "width": "5%" },
                    { "title": "Recurrence", "width": "5%" },
                    { "title": "Bill", "width": "5%" },
                    { "title": "Invite Attendees", "width": "5%" },
                    { "title": "Publish Event", "width": "5%" },
                    { "title": "Banner", "width": "5%", "align": "center" },
                    { "title": "Status", "width": "5%" },
                    { "title": "Action", "width": "5%" },
                    { "title": "SiteId", "class": "hideColumn", "width": "0%" },
                    { "title": "ICS File", "width": "5%" },
                    { "title": "RecurringEventId", "class": "hideColumn recurringEventId", "width": "0%" },
                    { "title": "SiteName", "class": "hideColumn recurringEventId", "width": "0%" },
                    { "title": "EventDisplayName", "class": "hideColumn recurringEventId", "width": "0%" }
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Events by any attribute i.e Event Name Event Date Time or Status etc.",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input",
                //"order": [1, 'desc']
                "order": [17, 'desc']
            });
            ChangeGroupColor();
            //$('#evetnsTable tbody .rowEditEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    showEventDetails(resultArray[0]);

            //});
            //$('#evetnsTable tbody .schduleEvent').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    ScheduleEventforEventID(resultArray[0]);
            //});
            //$('#evetnsTable tbody .eventReoccurance').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    eventId_ReOccurance = resultArray[0];
            //    EventReOccuranceDialog();
            //});
            //$('#evetnsTable tbody .eventshare').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    //ShareMyFeed(resultArray[1], heceventsappUrl, heceventsappPicUrl, 'HEC Event Management System', 'HEC Event management System is going to share a post on facebook', 'Share this post');

            //});
            //$('#evetnsTable tbody .emailEvent').on('click', function (e) {
            //    e.preventDefault();


            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    currentEventIdformailing = resultArray[0];
            //    SendEmaildialog(resultArray[1], resultArray[2], resultArray[3]);

            //});
            //$('#evetnsTable tbody .btnapproveEvent').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    UpdateEventStatus(resultArray[0], 'EventList', 'EventStatus', 'Approved');
            //    Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Event [Name:<b>" + resultArray[1] + "</b>] has been Aprroved. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,dont reply to this email.*************");


            //});
            //$('#evetnsTable tbody .btnrejectEvent').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    UpdateEventStatus(resultArray[0], 'EventList', 'EventStatus', 'Rejected');
            //    Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Event [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event management System<br/><br/><br/>*************system generated email,dont reply to this email.*************");
            //});


            //$('#evetnsTable tbody .htmlBanner').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    HtmlBanner(resultArray, 'AdminView');
            //});
            //if (!hasEvents) {
            //    var noEvents = document.createElement("div");
            //    noEvents.appendChild(document.createTextNode("There are no events. You can create a new event from below."));
            //    eventTable.appendChild(noEvents);
            //}
            $('#AllEvents').fadeIn(500, null);
        },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    var divMessage = document.createElement("DIV");
                    divMessage.setAttribute("style", "padding:5px;");
                    divMessage.appendChild(document.createTextNode("Failed to get events. Error: " + args.get_message()));
                    errArea.appendChild(divMessage);
                    $('#EventList').fadeIn(500, null);
                });

}


function HtmlBanner(objEvent, request) {


    var eventVenue;
    var siteId = 0;
    var startime;
    var endtime;
    if (request == "EmpView") {
        startime = objEvent[2];
        endtime = objEvent[3];
        siteId = objEvent[11];
    } else {
        startime = objEvent[3];
        endtime = objEvent[4];
        siteId = objEvent[13];
    }

    siteList = web.get_lists().getByTitle('PSites');
    siteItem = siteList.getItemById(siteId);
    var siteContext = SP.ClientContext.get_current();
    siteContext.load(siteItem);
    siteContext.executeQueryAsync(
        function () {
            eventVenue = siteItem.get_fieldValues()["Title"];
            var msg = "";
            msg = '<div style="background-image: url(http://www.auplod.com/u/ulpaod4acb7.gif); height: 60px; width: 500px; border: 0px solid black;"><b>' + objEvent[1] + '</b> @ <b>' + eventVenue + '</b> <br/>' + startime + ' - ' + endtime + '</div>';
            $('#txthtmlBanner').val(msg);
        },
function (sender, args) {
    // Failure returned from executeQueryAsync
    alert("Failure " + args.get_message());
});


    $('#htmlBannerarea').dialog({
        width: 'auto',

        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        closeText: "hide"
    });


}


// This function shows the details for a specific event
function showEventDetails(eventId) {

    var orgControl = "editEventOrgnames";
    populateOrganizations(orgControl);

    eventID = eventId;

    FillUniversityDomainDropDown('editEventUniversityDomain', uniDomainList);
    FillUniversitySubDomainDropDown(-1, 'editEventUniversitysubDomain', unisubDomainList, false);
    $('#editEventOrgnames').attr("disabled", "true");
    $('#editResources').hide();
    $('#saveEditEvent').hide();
    $('#fillEditOtherData').hide();
    $('#editEvent').attr("disabled", "true");
    $('#edittxtExpectedAttendies').attr("disabled", "true");
    $('#editEventDescription').attr("disabled", "true");
    $('#editStartDate').attr("disabled", "true");
    $('#editEndDate').attr("disabled", "true");

    $('#editEventType').attr("disabled", "true");
    //$('#editEventDescipline').attr("disabled", "true");
    $('#editEventUniversityDomain').attr('disabled', "true");
    $('#editEventUniversitysubDomain').attr('disabled', "true");
    $('#editeventTypeOpened').attr('disabled', "true");
    $('#editeventTypeCapped').attr('disabled', "true");
    $('#editlocalperson').attr('disabled', "true");
    $('#editforeignPerson').attr('disabled', "true");

    $('#editefacilities1').attr('disabled', "true");
    $('#editefacilities2').attr('disabled', "true");
    $('#editefacilities3').attr('disabled', "true");
    $('#editefacilities4').attr('disabled', "true");
    $('#editefacilities5').attr('disabled', "true");
    $('#editefacilities6').attr('disabled', "true");
    $('#editefacilities7').attr('disabled', "true");
    $('#editefacilities8').attr('disabled', "true");
    $('#editefacilities9').attr('disabled', "true");
    $('#editefacilities10').attr('disabled', "true");
    $('#editefacilities11').attr('disabled', "true");
    $('#editefacilities12').attr('disabled', "true");
    //$('#addNewAttendee').attr('disabled', "true");
    $("#addNewAttendee").prop('disabled', true);


    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var editLocation = document.getElementById("editLocation");
    while (editLocation.hasChildNodes()) {
        editLocation.removeChild(editLocation.lastChild);
    }
    list = web.get_lists().getByTitle('EventList');
    currentItem = list.getItemById(eventID);
    context.load(currentItem);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            $('#editEventid').val(currentItem.get_fieldValues()["ID"]);
            $('#IsRecurring').val(currentItem.get_fieldValues()["IsRecurring"]);
            $('#editEvent').val(currentItem.get_fieldValues()["Title"]);
            $('#editEventDescription').val(currentItem.get_fieldValues()["EventDescription"]);

            $('#editStartDate').val(new Date(currentItem.get_fieldValues()["EventDate"]).format("MM dd, yyyy hh:mm"));
            $('#editEndDate').val(new Date(currentItem.get_fieldValues()["EndDate"]).format("MM dd, yyyy hh:mm"));
            document.getElementById("editEventType").selectedIndex = currentItem.get_fieldValues()["TypeofEvent"];

            //document.getElementById("editEventUniversityDomain").value = currentItem.get_fieldValues()["EventDiscispline"];

            var local = currentItem.get_fieldValues()["EventLocal"];
            if (local == false) {
                document.getElementById("editforeignPerson").checked = true;
                document.getElementById("editlocalperson").checked = false;
            }
            else {
                document.getElementById("editforeignPerson").checked = false;
                document.getElementById("editlocalperson").checked = true;
            }
            var openn = currentItem.get_fieldValues()["EventOpen"];
            if (openn == false) {
                document.getElementById("editeventTypeCapped").checked = true;
                document.getElementById("editeventTypeOpened").checked = false;
                $("#edittxtExpectedAttendies").val(currentItem.get_fieldValues()["EventCap"]);
                EditTappedEvent();
            }
            else {

                document.getElementById("editeventTypeCapped").checked = false;
                document.getElementById("editeventTypeOpened").checked = true;
                EditOpenEvent();
            }
            var siteID = currentItem.get_fieldValues()["SiteLookup"].get_lookupValue();
            siteList = web.get_lists().getByTitle('PSites');
            siteItem = siteList.getItemById(siteID);
            var siteContext = SP.ClientContext.get_current();
            siteContext.load(siteItem);
            siteContext.executeQueryAsync(
                function () {
                    $('#editLocation').val(siteItem.get_fieldValues()["Title"]);
                    $('#editEventUniversityDomain').val(currentItem.get_fieldValues()["EventDiscispline"]);
                    //GetSelectedDomainItems(eventID, 'EventDomainMapList', 'editEventUniversityDomain', 'EventId')
                    GetSelectedDomainItems(eventID, 'EventSubDomainMapList', 'editEventUniversitysubDomain', 'EventId');
                }
                );
            $('#editEventDetails').dialog(
         {
             width: 'auto',
             height: 'auto',
             maxHeight: 600,
             modal: true,
             fluid: true,
             show: {
                 effect: "Scale",
                 duration: 1000
             },
             hide: {
                 effect: "Explode",
                 duration: 1000
             },
             beforeClose: function (event, ui) { cancelEditEvent2(); }

         });
            getEventFacilities(eventID);
            getAttendees(eventID);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var errArea = document.getElementById("errAllEvents");
            // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
            while (errArea.hasChildNodes()) {
                errArea.removeChild(errArea.lastChild);
            }
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode(args.get_message()));
            errArea.appendChild(divMessage);
        });
    $('#editLocation').show();
}

//This function populates Facilities from Site Facilities list
function getEventFacilities(itemID) {
    var eventfacilitiesList = web.get_lists().getByTitle('EventFacilities');
    eventfacilitiesCount = 0;
    // Create a CAML query that retrieves the facilities
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + itemID
        + "</Value></Eq></Where></Query></View>");
    var listItems = eventfacilitiesList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();

                $('#editefacilities1').prop("checked", listItem.get_fieldValues()["Internet"]);
                $('#editefacilities2').prop("checked", listItem.get_fieldValues()["VideoCon"]);
                $('#editefacilities3').prop("checked", listItem.get_fieldValues()["LabFacilities"]);
                $('#editefacilities4').prop("checked", listItem.get_fieldValues()["MeetingRoom"]);
                $('#editefacilities5').prop("checked", listItem.get_fieldValues()["AudioMic"]);
                $('#editefacilities6').prop("checked", listItem.get_fieldValues()["LCD"]);
                $('#editefacilities7').prop("checked", listItem.get_fieldValues()["Projector"]);
                $('#editefacilities8').prop("checked", listItem.get_fieldValues()["Parking"]);
                $('#editefacilities9').prop("checked", listItem.get_fieldValues()["Accomodation"]);
                $('#editefacilities10').prop("checked", listItem.get_fieldValues()["ACHeating"]);
                $('#editefacilities11').prop("checked", listItem.get_fieldValues()["Refreshments"]);
                $('#editefacilities12').prop("checked", listItem.get_fieldValues()["Catering"]);

            }


        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

function SendEmaildialog(eventname, starttime, endtime) {
    $('#txtEmailRecipient').val("");
    $('#txtEmailSubject').val("");
    $('#txtEmailBody').val("");
    $('#txtEmailRecipient').val("");
    $('#txtEmailSubject').val(eventname);
    var msg = "";
    msg = "Please Join Us for Event Titled:" + eventname + ', scheduled from ' + starttime + ' to ' + endtime;

    $('#txtEmailBody').val(msg);
    $('#sendemailarea').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        closeText: "hide"
    });

}


function CancelSendEmaildialog() {
    $('#txtEmailRecipient').val("");
    $('#txtEmailSubject').val("");
    $('#sendemailarea').dialog("close");
}
//function sendEmail() {
//    var from = default_From_EmailAddress;
//    var subject = $('#txtEmailSubject').val();
//    var body = $('#txtEmailBody').val();
//    var to = "";
//    var recipientArray = $("#txtEmailRecipient").tagsinput('items');
//    //for (i = 0; i < recipientArray.length; i++) {
//    //    if (to.length > 0)
//    //    {to=to+';'+recipientArray[i];}
//    //    else
//    //    { to = recipientArray[i]}
//    //}
//    //


//    //var emailStatuscol = [];
//    for (i = 0; i < recipientArray.length; i++) {
//        //  varstatus = [];
//        to = recipientArray[i];
//        var siteurl = _spPageContextInfo.webServerRelativeUrl;
//        //  varstatus.push(to);
//        var urlTemplate = siteurl + "/_api/SP.Utilities.Utility.SendEmail";
//        $.ajax({
//            contentType: 'application/json',
//            url: urlTemplate,
//            type: "POST",
//            data: JSON.stringify({
//                'properties': {
//                    '__metadata': { 'type': 'SP.Utilities.EmailProperties' },
//                    'From': from,
//                    'To': { 'results': [to] },
//                    'Body': body,
//                    'Subject': subject
//                }
//            }
//          ),
//            headers: {
//                "Accept": "application/json;odata=verbose",
//                "content-type": "application/json;odata=verbose",
//                "X-RequestDigest": $("#__REQUESTDIGEST").val()
//            },
//            success: function (data) {
//                NotificationMsg("Email Sent Sucessfully")
//                $('#sendemailarea').dialog("close");
//            },
//            error: function (err) {
//                NotificationMsg("Email Sent Failed,Check Your Email Address!")
//                $('#sendemailarea').dialog("close");
//            }
//        });

//    }


//}

function sendEmail() {

    if ($('#txtEmailSubject').val() == "" || $('#txtEmailBody').val() == "" || $('#txtEmailRecipient').val() == "") {
        alert("Please fill all the mandatory fields.");

    }
    else {
        var from = dont_Reply_Email_Address;
        var subject = $('#txtEmailSubject').val();
        var body = $('#txtEmailBody').val();
        var to = "";

        var areaofinterest = "";
        var uniorgtilte = "";
        if (currentEventIdformailing > 0) {

            var _EQuery = new SP.CamlQuery();
            _EQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Counter'>" + currentEventIdformailing + "</Value></Eq></Where></Query></Query></View>");
            eList = web.get_lists().getByTitle('EventList');
            var elistItems = eList.getItems(_EQuery);
            context.load(elistItems);
            context.executeQueryAsync(
                  function () {
                      var elistItemEnumerator = elistItems.getEnumerator();
                      while (elistItemEnumerator.moveNext()) {
                          var listItem = elistItemEnumerator.get_current();
                          areaofinterest = listItem.get_fieldValues()["EventDiscispline"];
                      }
                      var _Query = new SP.CamlQuery();
                      _Query.set_viewXml("<View><Query><Where><Contains><FieldRef Name='FieldInterest' /><Value Type='Text'>" + areaofinterest + "</Value></Contains></Where></Query></View>");
                      uList = web.get_lists().getByTitle('EMSUsers');
                      var ulistItems = uList.getItems(_Query);
                      context.load(ulistItems);
                      context.executeQueryAsync(
                            function () {
                                var listItemEnumerator = ulistItems.getEnumerator();
                                while (listItemEnumerator.moveNext()) {
                                    var listItem = listItemEnumerator.get_current();
                                    admin = listItem.get_fieldValues()["Title"];
                                    Emailing(admin, dont_Reply_Email_Address, subject, "Dear User <br/><br/><br/>" + body + "<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                                    //  alert('Sent to' + admin);
                                }
                            }, function () {
                                $('#sendemailarea').dialog("close");
                                //alert('failed to send affiliation emails');
                            });

                  }, function () {
                      $('#sendemailarea').dialog("close");
                      // alert('failed to send affiliation emails');
                  });
        }


        var recipientArray = $("#txtEmailRecipient").tagsinput('items');

        if (recipientArray.length > 0) {
            for (i = 0; i < recipientArray.length; i++) {
                //  varstatus = [];
                to = recipientArray[i];
                var siteurl = _spPageContextInfo.webServerRelativeUrl;
                //  varstatus.push(to);
                var urlTemplate = siteurl + "/_api/SP.Utilities.Utility.SendEmail";
                $.ajax({
                    contentType: 'application/json',
                    url: urlTemplate,
                    type: "POST",
                    data: JSON.stringify({
                        'properties': {
                            '__metadata': { 'type': 'SP.Utilities.EmailProperties' },
                            'From': from,
                            'To': { 'results': [to] },
                            'Body': "Dear User <br/><br/><br/>" + body + "<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************",
                            'Subject': subject
                        }
                    }
                  ),
                    headers: {
                        "Accept": "application/json;odata=verbose",
                        "content-type": "application/json;odata=verbose",
                        "X-RequestDigest": $("#__REQUESTDIGEST").val()
                    },
                    success: function (data) {
                        // NotificationMsg("Email Sent Sucessfully")
                        $('#sendemailarea').dialog("close");
                    },
                    error: function (err) {
                        // NotificationMsg("Email Sent Failed,Check Your Email Address!")
                        $('#sendemailarea').dialog("close");
                    }
                });

            }
        }
        else {
            //alert('There are no reciepints');
            $('#sendemailarea').dialog("close");
        }

    }
}






function Emailing(to, from, subject, body) {
    var siteurl = _spPageContextInfo.webServerRelativeUrl;
    var urlTemplate = siteurl + "/_api/SP.Utilities.Utility.SendEmail";
    $.ajax({
        contentType: 'application/json',
        url: urlTemplate,
        type: "POST",
        data: JSON.stringify({
            'properties': {
                '__metadata': { 'type': 'SP.Utilities.EmailProperties' },
                'From': from,
                'To': { 'results': [to] },
                'Body': body,
                'Subject': subject
            }
        }
      ),
        headers: {
            "Accept": "application/json;odata=verbose",
            "content-type": "application/json;odata=verbose",
            "X-RequestDigest": $("#__REQUESTDIGEST").val()
        },
        success: function (data) {
            //alert('sent');
        },
        error: function (err) {
            alert('failed ' + err.get_stackTrace());
        }
    });
}

function FbSahreDialog() {

    $('#txtfbsharelink').val("");
    $('#fbshareArea').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        closeText: "hide"
    });
}
function SetFBShareLink() {
    alert($('#txtfbsharelink').val());
    var url = $('#txtfbsharelink').val();
    $('#txtEmailSubject').setAttribute('data-href', url);
}
function showFeedbackEventDetails(eventId, eventName) {
    eventID = eventId;
    $('#editResources').hide();
    $('#saveEditEvent').hide();
    $('#fillEditOtherData').hide();
    $('#editEvent').attr("disabled", "true");
    $('#editStartDate').attr("disabled", "true");
    $('#editEndDate').attr("disabled", "true");

    var option1;
    var option2;
    var option3;
    var option4;
    var option5;
    var comment;
    var flag = false;
    var eventfbList = web.get_lists().getByTitle('EventFeedback');

    // Create a CAML query that retrieves the employee
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventID' LookupId='TRUE' /><Value Type='Lookup'>"
        + eventID
        + "</Value></Eq></Where></Query></View>");
    var eventfblistItems = eventfbList.getItems(camlQuery);
    context.load(eventfblistItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventfblistItemEnumerator = eventfblistItems.getEnumerator();
            while (eventfblistItemEnumerator.moveNext()) {
                var eventfblistItem = eventfblistItemEnumerator.get_current();
                //var status = listItem.get_fieldValues()["_Status"];
                option1 = eventfblistItem.get_fieldValues()["Question1"];
                option2 = eventfblistItem.get_fieldValues()["Question2"];
                option3 = eventfblistItem.get_fieldValues()["Question3"];
                option4 = eventfblistItem.get_fieldValues()["Question4"];
                option5 = eventfblistItem.get_fieldValues()["Question5"];
                comment = eventfblistItem.get_fieldValues()["FeedbackComment"];
                flag = true;
            }
            if (flag) {
                RadionButtonSelectedValueSet('optionsRadios1', option1);
                RadionButtonSelectedValueSet('optionsRadios2', option2);
                RadionButtonSelectedValueSet('optionsRadios3', option3);
                RadionButtonSelectedValueSet('optionsRadios4', option4);
                RadionButtonSelectedValueSet('optionsRadios5', option5);
                $('#FeedbackComments').val(comment);
                //$('input[name="optionsRadios1"]').attr("disabled", "true");
                //$('input[name="optionsRadios2"]').attr("disabled", "true");
                //$('input[name="optionsRadios3"]').attr("disabled", "true");
                //$('input[name="optionsRadios4"]').attr("disabled", "true");
                //$('input[name="optionsRadios5"]').attr("disabled", "true");
                //$('#FeedbackComments').attr("disabled", "true");
                $('#btnsave').hide();

                alert('You have already submitted the feedback.');

            } else {

                $('input[name="optionsRadios1"]').attr('checked', false);
                $('input[name="optionsRadios2"]').attr('checked', false);
                $('input[name="optionsRadios3"]').attr('checked', false);
                $('input[name="optionsRadios4"]').attr('checked', false);
                $('input[name="optionsRadios5"]').attr('checked', false);
                $('#FeedbackComments').val('');

                $('input[name="optionsRadios1"]').prop("disabled", false);
                $('input[name="optionsRadios2"]').prop("disabled", false);
                $('input[name="optionsRadios3"]').prop("disabled", false);
                $('input[name="optionsRadios4"]').prop("disabled", false);
                $('input[name="optionsRadios5"]').prop("disabled", false);
                $('#FeedbackComments').prop("disabled", false);
                $('#btnsave').show();
            }

            $('#feedbackEventid').val(eventID);

            $('#eventFeedbackDiv').dialog(
                {
                    title: eventName + ' ' + 'Feedback',
                    width: 'auto',
                    maxWidth: 'auto',
                    height: 'auto',
                    modal: true,
                    fluid: true,
                    show: {
                        effect: "Scale",
                        duration: 1000
                    },
                    hide: {
                        effect: "Explode",
                        duration: 1000
                    }

                });

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });


    //$('#enrollEndDate').val();




}


function setRadioValue(name) {
    var group = document.getElementsByName(name);
    for (var i = 0; i < group.length; i++) {
        //$(':radio[name="' + name + '"][value="' + group[i].value + '"]').attr('checked', false);
        //$('input[name="' + name + '"][value="' + group[i].value + '"]').prop('checked', false);

    }
}

function RadionButtonSelectedValueSet(name, selectdValue) {
    $('input[name="' + name + '"][value="' + selectdValue + '"]').prop('checked', true);
    //$('input[name="' + name + '"][value="' + selectdValue + '"]').attr('checked', true);
    //$(':radio[name="' + name + '"][value="' + selectdValue + '"]').attr('checked', true);
    //$(':radio[value="' + selectdValue + '"]').attr('checked', 'checked');
}

//This function populates Attendees from Employee list
function getAttendees(itemID) {
    var attendeeList = web.get_lists().getByTitle('Employee');
    attendeeCount = 0;
    var attendeeNames = "";
    // Create a CAML query that retrieves the employee
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + itemID
        + "</Value></Eq></Where></Query></View>");
    var listItems = attendeeList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var empList = document.getElementById("showAttendees");
            while (empList.hasChildNodes()) {
                empList.removeChild(empList.lastChild);
            }
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var status = listItem.get_fieldValues()["_Status"];
                var name = listItem.get_fieldValues()["Title"];
                if ((status != "Wait") && (name != "System")) {
                    attendeeCount = attendeeCount + 1;
                    attendeeNames = listItem.get_fieldValues()["Title"];
                    var empDelete = document.createElement("span");
                    empDelete.appendChild(document.createTextNode("X"));
                    empDelete.className = "deleteButton";
                    empDelete.id = listItem.get_id();
                    $(empDelete).click(function (sender) {
                        deleteEditEmployee(sender.delegateTarget.id, itemID);
                    });
                    empList.appendChild(empDelete);
                    var empLink = document.createElement("a");
                    empLink.appendChild(document.createTextNode(attendeeNames));
                    empList.appendChild(empLink);
                }
            }
            $('#editAttendees').val(attendeeNames);

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

// This function clears the inputs on the new event dialog
function clearNewEventForm() {
    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    $('#newEventDetails').dialog("close");
    $('#newEvent').val("");
    $('#newLocation').val("");
    $('#newInstructors').val("");
    $('#newStartDate').val("");
    $('#newEndDate').val("");
    $('#studentPCs').val("");
    $('#projectors').val("");
    $('#newEventDescription').val("");
    $('#txtExpectedAttendies').val("");


    $('#eventTypeOpened').prop("checked", true);
    $('#eventTypeCapped').prop("checked", false);
    $('#expectedAttendies').hide();
    OpenEvent();

    $('#eventdetail1').prop("checked", true);
    $('#eventdetail2').prop("checked", false);
    EventLocationSingle();

    $('#newlocalperson').prop("checked", true);
    $('#newforeignPerson').prop("checked", false);

    $("#newEventDescipline").val("");
    $("#newEventType").val("");

    var flist = document.getElementsByName("efacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }




    initializePeoplePicker('peoplePickerDiv');
}

// This function shows the add new event dialog
function addNewEvent() {
    uploadedImageUrl = "-1";
    $('#eventImageFile').val("");
    var orgControl = "EventOrgnames";
    populateOrganizations(orgControl);

    var location = document.getElementById("location");
    FillUniversityDomainDropDown_EventTab('newEventUniversityDomain', uniDomainList);
    FillUniversitySubDomainDropDown(-1, 'newEventUniversitysubDomain', unisubDomainList, false);
    while (location.hasChildNodes()) {
        location.removeChild(location.lastChild);
    }
    var locationnew = document.getElementById("locationnew");
    while (locationnew.hasChildNodes()) {
        locationnew.removeChild(locationnew.lastChild);
    }

    var capcity = null;
    PSiteList = web.get_lists().getByTitle('PSites');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = PSiteList.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            if (listItems.get_count() > 0) {
                var listItemEnumerator1 = listItems.getEnumerator();
                while (listItemEnumerator1.moveNext()) {
                    var listItem1 = listItemEnumerator1.get_current();
                    var title = listItem1.get_fieldValues()["Title"];
                    var id = listItem1.get_fieldValues()["ID"];
                    var capcity = listItem1.get_fieldValues()["SiteCapacity"];
                    if (listItem1.get_fieldValues()["EventStatus"] == 'Approved') {

                        var optionmulti = document.createElement('option');
                        if (capcity != null) {
                            title = title + " - " + capcity;
                        }
                        optionmulti.innerHTML = title;
                        optionmulti.value = id;
                        locationnew.appendChild(optionmulti);
                    }
                    var optionsingle = document.createElement('option');
                    if (capcity != null) {
                        title = title + " - " + capcity;
                    }
                    optionsingle.innerHTML = title;
                    optionsingle.value = id;
                    location.appendChild(optionsingle);
                }
                $('#resource').hide();
                $('#assignResource').show();
                $('#AddEventDetails').dialog({
                    width: 'auto',
                    maxWidth: 500,
                    height: 'auto',
                    maxHeight: 600,
                    modal: true,
                    fluid: true,

                    show: {
                        effect: "Scale",
                        duration: 1000
                    },
                    hide: {
                        effect: "Explode",
                        duration: 1000
                    },
                    beforeClose: function (event, ui) { cancelNewEvent2() }
                });
            }
            else {
                if (eventOrganizer == true && siteRepresentative == true) {

                    NotificationMsg("There are no Sites in the system. Add some now");
                    //alert("There are no rooms in the system. Add some now");
                    $("a#NavEmpEvents").removeClass("zz1_ActiveNav");
                    $("a#NavEmpSites").addClass("zz1_ActiveNav");
                    showSitesAttendee();



                }
                else if (eventOrganizer) {
                    NotificationMsg("You Can't Create Event for now , Try later!");
                }
                else {
                    NotificationMsg("There are no Sites in the system. Add some now");
                    //alert("There are no rooms in the system. Add some now");
                    $("a#NavEvent").removeClass("zz1_ActiveNav");
                    $("a#NavSites").addClass("zz1_ActiveNav");
                    showSites();
                }
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            ErrorMsg("Error in Populating Event List: " + args.get_message());
            // alert("Error in Populating Event List: " + args.get_message());
        }
        );
}

// This function saves the new event----Older code .......commented By Rafiq.
//function saveNewEvent() {
//    var objspevent = [];
//    var maxStudents = getPeopleCount();
//    var capped = getRadioValue('EventType');
//    var eventContext = SP.ClientContext.get_current();
//    var errArea = document.getElementById("errAllEvents");
//    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
//    while (errArea.hasChildNodes()) {
//        errArea.removeChild(errArea.lastChild);
//    }
//    var startdate = $('#newStartDate').val();
//    var enddate = $('#newEndDate').val();
//    if (startdate >= enddate) {
//        alert("Start Date should not be greater than or equal to End date.");
//        ErrorMsg("Start Date should not be greater than or equal to End date.");
//    }
//    else {
//        if ($('#newEvent').val() == "") {
//            // alert('Event Name Required!')
//            //var divMessage = document.createElement("DIV");
//            //divMessage.setAttribute("style", "padding:5px;");
//            //divMessage.appendChild(document.createTextNode("'Event Name' is required."));
//            //errArea.appendChild(divMessage);
//            ErrorMsg("'Event Name' is required.");
//        }
//        else if ($('#location').val() == null) {
//            ErrorMsg("You Can't Create an Event for now , Try later!");
//        }
//        else if ($('#newEventUniversityDomain').val() == null) {
//            ErrorMsg("Must select at least one Discipline.");
//        }
//        else if ($('#newEventUniversityDomain').val() == -1) {
//            ErrorMsg("Must select at least one Discipline.");
//        }
//        else if ($('#newEventUniversitysubDomain').val() == null) {
//            ErrorMsg("'Must select at least one Specialization.");
//        }
//        else {
//            if ((capped == 2) && ($('#txtExpectedAttendies').val() == "")) {
//                alert("For Capped Event Please Enter Expected Number of Attendees!.");
//                ErrorMsg("For Capped Event Please Enter Expected Number of Attendees!.");
//            }
//            else if (((capped == 2) && (($('#txtExpectedAttendies').val()) != "") && (($('#txtExpectedAttendies').val()) > 0)) || (capped == 1)) {

//                if (((maxStudents <= $('#txtExpectedAttendies').val())) || (capped == 1)) {
//                    eventList = web.get_lists().getByTitle("EventList");
//                    var itemCreateInfo = new SP.ListItemCreationInformation();
//                    var eventItem = eventList.addItem(itemCreateInfo);
//                    eventItem.set_item("Title", $('#newEvent').val());
//                    eventItem.set_item("EventDate", $('#newStartDate').val());
//                    eventItem.set_item("EndDate", $('#newEndDate').val());
//                    eventItem.set_item("EventDescription", $('#newEventDescription').val());
//                    eventItem.set_item("TypeofEvent", $('#newEventType').val());
//                    eventItem.set_item("EventDiscispline", $('#newEventUniversityDomain').val());
//                    eventItem.set_item("CustomCreatedBy", useremail);
//                    if (eventOrganizer) {
//                        eventItem.set_item("EventStatus", 'New');
//                    }
//                    else {
//                        eventItem.set_item("EventStatus", 'Approved');
//                    }

//                    var capped = getRadioValue('EventType');
//                    if (capped == 2) {
//                        eventItem.set_item("EventOpen", false);
//                        if ($('#txtExpectedAttendies').val() == "") {
//                            ErrorMsg('Number of Attendees Required!');
//                        }
//                        else {
//                            eventItem.set_item("EventCap", $('#txtExpectedAttendies').val());
//                        }

//                    }
//                    else {
//                        eventItem.set_item("EventOpen", true);
//                        eventItem.set_item("EventCap", -1);
//                    }
//                    var evevalue = getRadioValue('EventResPersonOptions');
//                    if (evevalue.toLowerCase() == 'local') {
//                        eventItem.set_item("EventLocal", true);
//                    }
//                    else {
//                        eventItem.set_item("EventLocal", false);
//                    }

//                    var siteID = $('#location').val();
//                    eventItem.set_item("SiteLookup", $('#location').val());
//                    var siteName = $("#location option:selected").text();
//                    siteName = siteName.split('-')[0];
//                    eventItem.set_item("SiteLookupTitle", siteName.trim());
//                    eventItem.update();
//                    eventContext.load(eventItem);

//                    eventContext.executeQueryAsync(function () {
//                        // Success returned from executeQueryAsync
//                        eventID = eventItem.get_id();

//                        var icsFile = CreateICSLink(eventID);
//                        eventItem.set_item("ICSFile", icsFile);
//                        eventItem.update();
//                        //AddEventDomainMappingItems('EventDomainMapList', $('#newEventUniversityDomain').val(), eventID);
//                        AddEventDomainMappingItems('EventSubDomainMapList', $('#newEventUniversitysubDomain').val(), eventID);
//                        saveEventFacilities(siteID, eventID);
//                        getUserInfo();
//                        if (eventOrganizer) {
//                            Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>Your request for new EVENT Creation [Name: <b>" + $('#newEvent').val() + "</b>] has submitted sucessfully.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
//                        }
//                        var request = 'ADD';
//                        objspevent.push({ ID: eventID, title: $('#newEvent').val(), StartDate: $('#newStartDate').val(), EndDate: $('#newEndDate').val(), SiteName: siteName, EventUniversityDomain: $('#newEventUniversityDomain').val(), IsRecurring: false, RecurrenceEventId: 0 });
//                        saveEventToSiteList(objspevent, request);
//                        cancelNewEvent();
//                    },
//                                function (sender, args) {
//                                    // Failure returned from executeQueryAsync
//                                    alert("Failure " + args.get_message());
//                                });

//                }
//                else {
//                    alert("Entered attendees are more allowed for event. Please delete some attendees");
//                }

//            }
//            else {
//                alert("For Capped Event Please Enter a Valid Number for Expected Number of Attendees!.");
//                ErrorMsg("For Capped Event Please Enter a Valid Number for Expected Number of Attendees!.");
//            }

//        }
//    }
//}

function saveNewEvent() {
    //GetEventListId();
    var objspevent = [];
    var multiSiteEventsData = [];
    var maxStudents = getPeopleCount();
    var capped = getRadioValue('EventType');
    var eventContext = SP.ClientContext.get_current();
    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var startdate = $('#newStartDate').val();
    var enddate = $('#newEndDate').val();
    if (startdate >= enddate) {
        alert("Start Date should not be greater than or equal to End date.");
        ErrorMsg("Start Date should not be greater than or equal to End date.");
        return;
    }
    else {
        if ($('#newEvent').val() == "") {
            // alert('Event Name Required!')
            //var divMessage = document.createElement("DIV");
            //divMessage.setAttribute("style", "padding:5px;");
            //divMessage.appendChild(document.createTextNode("'Event Name' is required."));
            //errArea.appendChild(divMessage);
            ErrorMsg("'Event Name' is required.");
            return;
        }
        else if (uploadedImageUrl == "-1")
        {
            uploadedImageUrl = defaultImgUrl;
        }
        else if ($('#location').val() == null) {
            ErrorMsg("You Can't Create an Event for now , Try later!");
        }
        else if ($('#newEventUniversityDomain').val() == null) {
            ErrorMsg("Must select at least one Discipline.");
            return;
        }
        else if ($('#newEventUniversityDomain').val() == -1) {
            ErrorMsg("Must select at least one Discipline.");
            return;
        }
        else if ($('#newEventUniversitysubDomain').val() == null) {
            ErrorMsg("'Must select at least one Specialization.");
            return;
        }
        else {
            if ((capped == 2) && ($('#txtExpectedAttendies').val() == "")) {
                alert("For Capped Event Please Enter Expected Number of Attendees!.");
                ErrorMsg("For Capped Event Please Enter Expected Number of Attendees!.");
            }
            else if (((capped == 2) && (($('#txtExpectedAttendies').val()) != "") && (($('#txtExpectedAttendies').val()) > 0)) || (capped == 1)) {

                if (((maxStudents <= $('#txtExpectedAttendies').val())) || (capped == 1)) {
                    var Status = "";
                    if (eventOrganizer) {
                        _Status = "New";
                    }
                    else {
                        _Status = "Approved";
                    }
                    var isOpenEvent;
                    var noOfExpectedAttendies = 0;
                    var capped = getRadioValue('EventType');
                    if (capped == 2) {
                        isOpenEvent = false;
                        if ($('#txtExpectedAttendies').val() == "") {
                            ErrorMsg('Number of Attendees Required!');
                        }
                        else {
                            noOfExpectedAttendies = $('#txtExpectedAttendies').val();
                        }

                    }
                    else {
                        isOpenEvent = true;
                        noOfExpectedAttendies = -1;
                    }
                    var isLocal;
                    var evevalue = getRadioValue('EventResPersonOptions');
                    if (evevalue.toLowerCase() == 'local') {
                        isLocal = true;
                    }
                    else {
                        isLocal = false;
                    }
                    var siteIDs = [];
                    siteIDs = $('#location').val();
                    for (i = 0; i < siteIDs.length; i++) {
                        siteID = siteIDs[i];
                        var siteName = $("#location option[value='" + siteID + "']")[0].text;
                        multiSiteEventsData.push({
                            title: $('#newEvent').val(),
                            EventDescription: $('#newEventDescription').val(),
                            SiteLookup: siteIDs[i],
                            SiteLookupTitle: siteName.trim(),
                            TypeofEvent: $('#newEventType').val(),
                            EventDiscispline: $('#newEventUniversityDomain').val(),
                            CustomCreatedBy: useremail,
                            EventStatus: _Status,
                            EventOpen: isOpenEvent,
                            EventCap: noOfExpectedAttendies,
                            EventLocal: isLocal,
                            EventDate: $('#newStartDate').val(),
                            EndDate: $('#newEndDate').val(),
                            EventUniversityDomain: $('#newEventUniversityDomain').val(),
                            IsRecurring: false,
                            RecurrenceEventId: 0,
                            ImgURL: uploadedImageUrl
                        });

                    }

                    var EventReOccurIterator = 0;
                    if (multiSiteEventsData.length > 0) {
                        Global_Counter_FoRecursion = multiSiteEventsData.length - 1;//dont modify ,critical falg
                        SaveMultiSiteEventToList(multiSiteEventsData, EventReOccurIterator, $('#newEventUniversitysubDomain').val());

                    }
                    else {
                        alert("Entered attendees are more allowed for event. Please delete some attendees");
                    }

                }
                else {
                    alert("For Capped Event Please Enter a Valid Number for Expected Number of Attendees!.");
                    ErrorMsg("For Capped Event Please Enter a Valid Number for Expected Number of Attendees!.");
                }

            }
        }
    }
}

function SaveMultiSiteEventToList(_ReOccuranceEventsData, EventReOccurIterator, subDomainCol) {
    var myList = web.get_lists().getByTitle('EventList');

    // for (i = 0; i < _ReOccuranceEventsData.length; i++) {
    var itemCreateInfo = new SP.ListItemCreationInformation();
    var eventItem = myList.addItem(itemCreateInfo);
    //alert(counter);
    eventItem.set_item("Title", _ReOccuranceEventsData[EventReOccurIterator].title);
    eventItem.set_item("EventDate", _ReOccuranceEventsData[EventReOccurIterator].EventDate);
    eventItem.set_item("EndDate", _ReOccuranceEventsData[EventReOccurIterator].EndDate);
    eventItem.set_item("EventDescription", _ReOccuranceEventsData[EventReOccurIterator].EventDescription);
    eventItem.set_item("TypeofEvent", _ReOccuranceEventsData[EventReOccurIterator].TypeofEvent);
    eventItem.set_item("EventDiscispline", _ReOccuranceEventsData[EventReOccurIterator].EventDiscispline);
    eventItem.set_item("CustomCreatedBy", useremail);
    eventItem.set_item("EventStatus", _ReOccuranceEventsData[EventReOccurIterator].EventStatus);
    eventItem.set_item("EventCap", _ReOccuranceEventsData[EventReOccurIterator].EventCap);
    eventItem.set_item("EventOpen", _ReOccuranceEventsData[EventReOccurIterator].EventOpen);
    eventItem.set_item("EventLocal", _ReOccuranceEventsData[EventReOccurIterator].EventLocal);
    eventItem.set_item("SiteLookup", _ReOccuranceEventsData[EventReOccurIterator].SiteLookup);
    eventItem.set_item("SiteLookupTitle", _ReOccuranceEventsData[EventReOccurIterator].SiteLookupTitle);
    eventItem.set_item("RecurringEventId", _ReOccuranceEventsData[EventReOccurIterator].RecurrenceEventId);
    eventItem.set_item("ImgURL", _ReOccuranceEventsData[EventReOccurIterator].ImgURL);
    eventItem.update();
    context.load(eventItem);
    context.executeQueryAsync(function () {
        var objspevent = [];
        var mieventid = eventItem.get_id();
        objspevent.push({ ID: mieventid, title: _ReOccuranceEventsData[EventReOccurIterator].title, StartDate: _ReOccuranceEventsData[EventReOccurIterator].EventDate, EndDate: _ReOccuranceEventsData[EventReOccurIterator].EndDate, SiteName: _ReOccuranceEventsData[EventReOccurIterator].SiteLookupTitle, EventUniversityDomain: _ReOccuranceEventsData[EventReOccurIterator].EventDiscispline, IsRecurring: false, RecurrenceEventId: 0 });
        var request = 'ADD';
        saveEventToSiteList(objspevent, request);

        var icsFile = CreateICSLink(mieventid);
        eventItem.set_item("ICSFile", icsFile);
        eventItem.update();
        AddEventDomainMappingItems('EventSubDomainMapList', subDomainCol, mieventid);
        if (eventOrganizer) {
            Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>Your request for new EVENT Creation [Name: <b>" + $('#newEvent').val() + "</b>] has submitted sucessfully.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
        }

        empList = web.get_lists().getByTitle("Employee");
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        var listItems = empList.getItems(camlQuery);
        var hasEmployee = false;
        context.load(listItems);
        context.executeQueryAsync(
           function () {
               // Success returned from executeQueryAsync
               var itemCreateInfo = new SP.ListItemCreationInformation();
               var listItem = empList.addItem(itemCreateInfo);
               listItem.set_item("Title", "System");
               listItem.set_item("EventLookup", mieventid);
               listItem.set_item("_Status", "Enrolled");

               listItem.update();
               context.load(listItem);
               context.executeQueryAsync(function () {
                   //dont modify this >-1 to >0 , it is already runing for zero case as well
                   if (mieventid > 0 && Global_Counter_FoRecursion > 0) {
                       Global_Counter_FoRecursion--;
                       EventReOccurIterator++;
                       SaveMultiSiteEventToList(_ReOccuranceEventsData, EventReOccurIterator, subDomainCol);

                   } else {
                       Global_Counter_FoRecursion--;
                   }
                   if (Global_Counter_FoRecursion < 0) {

                       hideLoader();
                       cancelNewEvent();
                       if (eventOrganizer) {
                           showEventsForAttendeeView();
                       } else {
                           showEvents();
                       }
                   }

               });
           },
           function (sender, args) {
               // Failure returned from executeQueryAsync
               alert("Failure " + args.get_message());
           });

    },
     function (sender, args) {
         alert('Error');
     });
}




// Save the facilities information
function saveEventFacilities(siteID, eventID) {

    efacilitiesList = web.get_lists().getByTitle("EventFacilities");
    var itemCreateInfo1 = new SP.ListItemCreationInformation();
    var efacilitiesItem = efacilitiesList.addItem(itemCreateInfo1);
    var efvalue = [];
    var eflist = document.getElementsByName("efacilities[]");

    for (var i = 0; i < eflist.length; i++) {
        efvalue[i] = eflist[i].checked;
    }

    efacilitiesItem.set_item("Title", siteID);
    efacilitiesItem.set_item("EventLookup", eventID);
    efacilitiesItem.set_item("Internet", efvalue[0]);
    efacilitiesItem.set_item("VideoCon", efvalue[1]);
    efacilitiesItem.set_item("LabFacilities", efvalue[2]);
    efacilitiesItem.set_item("MeetingRoom", efvalue[3]);
    efacilitiesItem.set_item("AudioMic", efvalue[4]);
    efacilitiesItem.set_item("LCD", efvalue[5]);
    efacilitiesItem.set_item("Projector", efvalue[6]);
    efacilitiesItem.set_item("Parking", efvalue[7]);
    efacilitiesItem.set_item("Accomodation", efvalue[8]);
    efacilitiesItem.set_item("ACHeating", efvalue[9]);
    efacilitiesItem.set_item("Refreshments", efvalue[10]);
    efacilitiesItem.set_item("Catering", efvalue[11]);
    efacilitiesItem.update();
    context.load(efacilitiesItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync

    },
    function (sender, args) {
        // Failure returned from executeQueryAsync
        alert("Failure " + args.get_message());
    });

}





function getRadioValue(name) {
    var group = document.getElementsByName(name);

    for (var i = 0; i < group.length; i++) {
        if (group[i].checked) {
            return group[i].value;
        }
    }
}

// This function updates an existing event's details
function saveEditEvent() {
    var objspevent = [];
    var maxStudents = getEditPeopleCount();
    var capped = getRadioValue('EditEventType');
    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var startdate = $('#editStartDate').val();
    var enddate = $('#editEndDate').val();
    if (startdate >= enddate) {
        alert("Start Date should not be greater than or equal to End date.")
        ErrorMsg("Start Date should not be greater than or equal to End date.");
    }
    else {

        if ($('#editEvent').val() == "") {
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("'Event' field is required."));
            errArea.appendChild(divMessage);
        }
        else {
            if ((capped == 2) && ($('#edittxtExpectedAttendies').val() == "")) {
                alert("For Capped Event Please Enter Expected Number of Attendees!.");
                ErrorMsg("For Capped Event Please Enter Expected Number of Attendees!.");
            }
            else if (((capped == 2) && (($('#edittxtExpectedAttendies').val()) != "") && (($('#edittxtExpectedAttendies').val()) > 0)) || (capped == 1)) {
                if (((maxStudents <= $('#edittxtExpectedAttendies').val())) || (capped == 1)) {

                    var flist = [];
                    var fval = document.getElementsByName("editefacilities[]");

                    for (var i = 0; i < fval.length; i++) {
                        flist[i] = fval[i].checked;
                    }

                    var selectedEventID = currentItem.get_id();
                    currentItem.set_item("Title", $('#editEvent').val());
                    currentItem.set_item("EventDate", $('#editStartDate').val());
                    currentItem.set_item("EndDate", $('#editEndDate').val());
                    currentItem.set_item("SiteLookup", $('#editResources').val());
                    var siteName = $("#editResources option:selected").text();
                    currentItem.set_item("SiteLookupTitle", siteName);
                    currentItem.set_item("EventDescription", $('#editEventDescription').val());
                    currentItem.set_item("ImgURL", uploadedImageUrl);
                    var x = $('#editEventType').val();

                    currentItem.set_item("TypeofEvent", $('#editEventType').val());
                    currentItem.set_item("EventDiscispline", $('#editEventUniversityDomain').val());


                    var capped = getRadioValue('EditEventType');

                    if (capped == 2) {
                        currentItem.set_item("EventCap", $('#edittxtExpectedAttendies').val());
                        currentItem.set_item("EventOpen", false);
                    }
                    else {
                        currentItem.set_item("EventOpen", true);
                        currentItem.set_item("EventCap", -1);
                    }
                    var evevalue = getRadioValue('EdiEventResPersonOptions[]');
                    if (evevalue.toLowerCase() == 'local') {
                        currentItem.set_item("EventLocal", true);
                    }
                    else {
                        currentItem.set_item("EventLocal", false);
                    }


                    currentItem.update();
                    context.load(currentItem);
                    context.executeQueryAsync(function () {
                        eventID = currentItem.get_id();
                        // DeleteDomainEventListItems(selectedEventID, 'EventDomainMapList', 'EventId');
                        DeleteSubDomainEventListItems(selectedEventID, 'EventSubDomainMapList', 'EventId');
                        saveEditEventFacilities(selectedEventID, flist);
                        showEvents();
                        var request = "update";
                        objspevent.push({
                            ID: eventID, title: $('#editEvent').val(), StartDate: $('#editStartDate').val(), EndDate: $('#editEndDate').val(), SiteName: siteName, EventUniversityDomain: $('#editEventUniversityDomain').val(), IsRecurring: false, RecurrenceEventId: 0
                        });
                        saveEventToSiteList(objspevent, request);
                        cancelEditEvent();
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure: " + args.get_message());
                    });
                }
                else {
                    alert("Entered attendees are more than allowed for Event. Please delete some attendees");
                    ErrorMsg("Entered attendees are more than allowed for Event. Please delete some attendees");
                }

            }
            else {
                alert("For Capped Event Please Enter a Valid Number for Expected Number of Attendees!.");
                ErrorMsg("For Capped Event Please Enter a Valid Number for Expected Number of Attendees!.");
            }

        }
    }

}


function saveEditEventFacilities(editEventID, flist) {
    var fList = web.get_lists().getByTitle("EventFacilities");
    //Create a CAML query that retrieves representative for org
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + editEventID
            + "</Value></Eq></Where></Query></View>");
    var listItems = fList.getItems(camlQuery);

    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                listItem.set_item("Internet", flist[0]);
                listItem.set_item("VideoCon", flist[1]);
                listItem.set_item("LabFacilities", flist[2]);
                listItem.set_item("MeetingRoom", flist[3]);
                listItem.set_item("AudioMic", flist[4]);
                listItem.set_item("LCD", flist[5]);
                listItem.set_item("Projector", flist[6]);
                listItem.set_item("Parking", flist[7]);
                listItem.set_item("Accomodation", flist[8]);
                listItem.set_item("ACHeating", flist[9]);
                listItem.set_item("Refreshments", flist[10]);
                listItem.set_item("Catering", flist[11]);
                listItem.update();
                context.load(listItem);
                context.executeQueryAsync(function () {

                }

                );

            }

        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in saving Site facilities: " + args.get_message());
        });
}



// This function cancels the new event dialog
function cancelNewEvent2() {

    clearNewEventForm();
}

// This function cancels the new event dialog
function cancelNewEvent() {
    $('#AddEventDetails').dialog("close");
    clearNewEventForm();
}


// This function cancels the editing of an existing event
function cancelEditEvent2() {

    clearEditEventForm();
}

// This function cancels the editing of an existing event
function cancelEditEvent() {
    $('#editEventDetails').dialog("close");
    clearEditEventForm();
}

// This function clears the inputs on the edit event dialog
function clearEditEventForm() {
    $('#editProjectors').attr('disabled', true);
    $('#editLocation').attr('disabled', true);
    $('#editStudentPCs').attr('disabled', true);
    $('#editInstructors').attr('disabled', true);


    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    $('#assignEditResource').show();
    $('#editResource').slideUp(500, null);
    $('#editEvent').val("");
    $('#editLocation').val("");
    $('#editEventDescription').val("");
    $('#editInstructors').val("");
    $('#editStartDate').val("");
    $('#editEndDate').val("");
    $('#editStudentPCs').val("");
    $('#editProjectors').val("");

    $('#edittxtExpectedAttendies').val("");
    $('#editeventTypeOpened').prop("checked", true);
    $('#editeventTypeCapped').prop("checked", false);
    EditOpenEvent();

    $('#editlocalperson').prop("checked", true);
    $('#editforeignPerson').prop("checked", false);

    $("#editEventDescipline").val("");
    $("#editEventType").val("");

    var flist = document.getElementsByName("efacilities[]");

    for (var i = 0; i < flist.length; i++) {
        flist[i].checked = false;
    }


    initializePeoplePicker('editPeoplePicker');
}

// Query the picker for user information
function getUserInfo() {
    // Get the people picker object from the page.
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv_TopSpan;

    // Get information about all users.
    empList = web.get_lists().getByTitle('Employee');
    users = peoplePicker.GetAllUserInfo();

    if (users.length == 0) {
        addEmployeeE("System");
    }
    else {
        for (var i = 0; i < users.length; i++) {
            user = users[i];
            employeeName = user["DisplayText"];

            var employeeEmail = user["Description"];

            if (user["ProviderDisplayName"] == "Extranet Users") {
                employeeEmail = user["AutoFillSubDisplayText"];
            }



            addEmployee(employeeName, employeeEmail);
        }
    }
    $('#AddEventDetails').hide();
    if (eventOrganizer) {
        showEventsForAttendeeView();
    }
    else { showEvents(); }
}
function getUserInfo2(eventId) {
    // Get the people picker object from the page.
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv_TopSpan;

    // Get information about all users.
    empList = web.get_lists().getByTitle('Employee');
    users = peoplePicker.GetAllUserInfo();

    if (users.length == 0) {
        addEmployee2("System", eventId, "");
    }
    else {
        for (var i = 0; i < users.length; i++) {
            user = users[i];
            employeeName = user["DisplayText"];
            var employeeEmail = user["Description"];

            if (user["ProviderDisplayName"] == "Extranet Users") {
                employeeEmail = user["AutoFillSubDisplayText"];
            }


            addEmployee2(employeeName, eventId, employeeEmail);
        }
    }
    $('#AddEventDetails').hide();
    if (eventOrganizer) {
        showEventsForAttendeeView();
    }
    else { showEvents(); }
}
// Query the picker for user count in new event dialog
function getPeopleCount() {
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.peoplePickerDiv_TopSpan;

    // Get information about all users
    users = peoplePicker.GetAllUserInfo();
    return users.length;
}


// Query the picker for user count in edit event dialog 
function getEditPeopleCount() {
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker_TopSpan;
    // Get information about all users.
    var userl = 0;
    if (peoplePicker != null) {
        users = peoplePicker.GetAllUserInfo();
        userl = users.length;
    }


    //var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker_TopSpan;
    //// Get information about all users.
    //users = peoplePicker.GetAllUserInfo();
    //return users.length;


    return userl;
}

// This function adds employee to the Employee list
function addEmployee(employeeName, employeeEmail) {
    empList = web.get_lists().getByTitle("Employee");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = empList.getItems(camlQuery);
    var hasEmployee = false;
    context.load(listItems);
    context.executeQueryAsync(
       function () {
           // Success returned from executeQueryAsync
           var itemCreateInfo = new SP.ListItemCreationInformation();
           var listItem = empList.addItem(itemCreateInfo);
           listItem.set_item("Title", employeeName);
           listItem.set_item("EventLookup", eventID);
           listItem.set_item("_Status", "Self-Enrolled");
           listItem.set_item("AttendeeEmail", employeeEmail);

           listItem.update();
           context.load(listItem);
           context.executeQueryAsync(function () {

           });
       },
       function (sender, args) {
           // Failure returned from executeQueryAsync
           alert("Failure " + args.get_message());
       });
}
function addEmployee2(employeeName, eventId, employeeEmail) {
    empList = web.get_lists().getByTitle("Employee");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = empList.getItems(camlQuery);
    var hasEmployee = false;
    context.load(listItems);
    context.executeQueryAsync(
       function () {
           // Success returned from executeQueryAsync
           var itemCreateInfo = new SP.ListItemCreationInformation();
           var listItem = empList.addItem(itemCreateInfo);
           listItem.set_item("Title", employeeName);
           listItem.set_item("EventLookup", eventId);
           listItem.set_item("_Status", "Self-Enrolled");
           listItem.set_item("AttendeeEmail", employeeEmail);
           listItem.update();
           context.load(listItem);
           context.executeQueryAsync(function () {

           });
       },
       function (sender, args) {
           // Failure returned from executeQueryAsync
           alert("Failure " + args.get_message());
       });
}


// This function adds employee to the Employee list
function addEmployeeE(employeeName) {
    empList = web.get_lists().getByTitle("Employee");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = empList.getItems(camlQuery);
    var hasEmployee = false;
    context.load(listItems);
    context.executeQueryAsync(
       function () {
           // Success returned from executeQueryAsync
           var itemCreateInfo = new SP.ListItemCreationInformation();
           var listItem = empList.addItem(itemCreateInfo);
           listItem.set_item("Title", employeeName);
           listItem.set_item("EventLookup", eventID);
           listItem.set_item("_Status", "Enrolled");

           listItem.update();
           context.load(listItem);
           context.executeQueryAsync(function () {

           });
       },
       function (sender, args) {
           // Failure returned from executeQueryAsync
           alert("Failure " + args.get_message());
       });
}

// This function adds employee to the Employee list
function addEmployeeRecursion(employeeName, eventIdR) {
    empList = web.get_lists().getByTitle("Employee");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = empList.getItems(camlQuery);
    var hasEmployee = false;
    context.load(listItems);
    context.executeQueryAsync(
       function () {
           // Success returned from executeQueryAsync
           var itemCreateInfo = new SP.ListItemCreationInformation();
           var listItem = empList.addItem(itemCreateInfo);
           listItem.set_item("Title", employeeName);
           listItem.set_item("EventLookup", eventIdR);
           listItem.set_item("_Status", "Enrolled");

           listItem.update();
           context.load(listItem);
           context.executeQueryAsync(function () {

           });
       },
       function (sender, args) {
           // Failure returned from executeQueryAsync
           alert("Failure " + args.get_message());
       });
}



//<----EMPLOYEE FUNCTIONS------>

// This function retrieves enrolled events
function showEnrllEvents() {

    var allenrlEventsData = [];
    var allWaitEventData = [];
    //var pEnrllEventTable = document.getElementById("EnrllEventTable");
    //var enrlevnBody = pEnrllEventTable.getElementsByTagName('tbody');
    // var enrlevnLen = enrlevnBody.length;
    //while (enrlevnLen) pEnrllEventTable.removeChild(enrlevnBody[--enrlevnLen]);
    //cleaning pEventsTable body tag
    // var pWaitllEventTable = document.getElementById("WaitEventTable");
    // var waitevnBody = pWaitllEventTable.getElementsByTagName('tbody');
    // var waitevnLen = waitevnBody.length;
    // while (waitevnLen) pWaitllEventTable.removeChild(waitevnBody[--waitevnLen]);

    $('#myEventsDiv_new').show();
    var enrollTable = document.getElementById("EnrllEventList");
    while (enrollTable.hasChildNodes()) {
        enrollTable.removeChild(enrollTable.lastChild);
    }

    var enrollTable2 = document.getElementById("AllEventsList");
    while (enrollTable2.hasChildNodes()) {
        enrollTable2.removeChild(enrollTable2.lastChild);
    }

    var waitTable = document.getElementById("WaitEventList");
    while (waitTable.hasChildNodes()) {
        waitTable.removeChild(waitTable.lastChild);
    }

    // var tEnrollbodyelemnt = document.createElement("tbody");
    //var tWaitbodyelemnt = document.createElement("tbody");

    var hasEvent = false;
    var isWait = false;
    AllAttendeeControlHide();


    $('#AllEnrllEvents').show();
    $('#OtherEvents').hide();
    $('#WaitingEvents').show();
    $('#AllRoleRequest').hide();
    $('#AllEventTableDiv').hide();
    $('#EventsFeedback').hide();
    list = web.get_lists().getByTitle("Employee");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        + user
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var enrollClear = document.getElementById("AllEventsList");
                // Remove all nodes from the AllEventsList <DIV> so we have a clean space to write to
                while (enrollClear.hasChildNodes()) {
                    enrollClear.removeChild(enrollClear.lastChild);
                }
                var listItem = listItemEnumerator.get_current();
                var empEventID = listItem.get_fieldValues()["EventLookup"].get_lookupValue();
                empStatus = listItem.get_fieldValues()["_Status"];
                if (empStatus != "Wait") {
                    hasEvent = true;
                }
                else {
                    isWait = true;
                }
                getEventName(empEventID, empStatus, allenrlEventsData, allWaitEventData);
            }
            if (!hasEvent) {


                //var noEvents = document.createElement("div");
                //noEvents.appendChild(document.createTextNode("There are no Events you are enrolled for."));
                //enrollTable.appendChild(noEvents);
                $('#AllEnrlEvenDiv').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="allEnrlEventTable"></table>');
                var datat = $('#allEnrlEventTable').dataTable({
                    "data": allenrlEventsData,
                    bProcessing: true,
                    "columns": [
                        { "title": "ID", "class": "hideColumn", "width": "0%" },
                        { "title": "Event Name", "width": "30%" },
                        { "title": "Start Time", "width": "25%" },
                        { "title": "End Time", "width": "25%" },
                        { "title": "Status", "width": "20%" }
                    ],

                    language: {
                        "search": "_INPUT_",
                        "searchPlaceholder": "Search Events by any attribute i.e Event Name or Event Date or Time etc ",
                        "paginate": {
                            "first": "<<",
                            "last": ">>",
                            "next": ">",
                            "previous": "<"
                        },
                        "lengthMenu": "_MENU_",
                        "info": "View _START_ - _END_ of _TOTAL_"
                    },
                    "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                    "initComplete": function (settings, json) {
                        var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                        $(this).siblings(".pCustomTitle").html(pHeadingObj);
                    },
                    "pagingType": "input"
                });
                datat.fnSetColumnVis(4, false);


            }
            if (!isWait) {
                //var noEvents = document.createElement("div");
                //noEvents.appendChild(document.createTextNode("You are not wait-listed for any Event."));
                //waitTable.appendChild(noEvents);
                $('#waitEventsDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="waitEventsTable"></table>');

                var dataw = $('#waitEventsTable').dataTable({
                    "data": allWaitEventData,
                    bProcessing: true,
                    "columns": [
                         { "title": "ID", "class": "hideColumn", "width": "0%" },
                        { "title": "Event Name", "width": "30%" },
                        { "title": "Start Time", "width": "25%" },
                        { "title": "End Time", "width": "25%" },
                        { "title": "Status", "width": "20%" }
                    ],

                    language: {
                        "search": "_INPUT_",
                        "searchPlaceholder": "Search Event by Event Name or Start Time or End Time",
                        "paginate": {
                            "first": "<<",
                            "last": ">>",
                            "next": ">",
                            "previous": "<"
                        },
                        "lengthMenu": "_MENU_",
                        "info": "View _START_ - _END_ of _TOTAL_"
                    },
                    "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                    "initComplete": function (settings, json) {
                        var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                        $(this).siblings(".pCustomTitle").html(pHeadingObj);
                    },
                    "pagingType": "input"
                });
                dataw.fnSetColumnVis(4, false);
            }

            $('#AllEventsList').fadeIn(500, null);
        }, function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

// This function gives events for an employee
function getEventName(empEventID, empStatus, allenrlEventsData, allWaitEventData) {
    var context1 = SP.ClientContext.get_current();
    var errArea = document.getElementById("errEvents");
    // Remove all nodes from the errEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    list = web.get_lists().getByTitle("EventList");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Text'>"
        + empEventID
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context1.load(listItems);
    context1.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            var waitEvent = false;
            var enrlEvent = false;
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var eventTable = document.getElementById("AllEventsList");
                var WaitTable = document.getElementById("WaitEventList");
                if (empStatus != "Wait") {
                    enrlEvent = true;
                    allenrlEventsData.push(CreatEnrollEventDataElement(listItem, empStatus));
                }
                else {
                    waitEvent = true;
                    allWaitEventData.push(CreatWaitEventDataElement(listItem, empStatus));
                }
            }

            $('#AllEnrlEvenDiv').html('<table cellpadding="0" cellspacing="0" border="0" class="display" id="allEnrlEventTable"></table>');
            var datat = $('#allEnrlEventTable').dataTable({
                "data": allenrlEventsData,
                bProcessing: true,
                "fnDrawCallback": function () {
                    //$('#allEnrlEventTable tbody').on('click', 'tr', function () {

                    //    var id = datat.fnGetData(this)[0];
                    //    var status = datat.fnGetData(this)[4];

                    //    showEmpEventDetails(id, status);
                    //});

                    $('#allEnrlEventTable tbody').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();

                        showEmpEventDetails(resultArray[0], resultArray[4]);

                    });

                },
                "columns": [
                    { "title": "ID", "class": "hideColumn", "width": "0%" },
                    { "title": "Event Name", "width": "30%" },
                    { "title": "Start Time", "width": "25%" },
                    { "title": "End Time", "width": "25%" },
                    { "title": "Status", "width": "20%" }
                ],
                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Events by Event Name or Event Date ",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            datat.fnSetColumnVis(4, false);

            $('#allEnrlEventTable tbody').on('click', 'tr', function () {
                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();

                showEmpEventDetails(resultArray[0], resultArray[4]);
            });
            $('#waitEventsDiv').html('<table cellpadding="0" cellspacing="0" border="0" class="display" id="waitEventsTable"></table>');

            var dataw = $('#waitEventsTable').dataTable({
                "data": allWaitEventData,
                bProcessing: true,
                "fnDrawCallback": function () {
                    //$('#waitEventsTable tbody').on('click', 'tr', function () {

                    //    var id = dataw.fnGetData(this)[0];
                    //    var status = dataw.fnGetData(this)[4];

                    //    showEmpEventDetails(id, status);
                    //});

                    $('#waitEventsTable tbody').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();

                        showEmpEventDetails(resultArray[0], resultArray[2]);

                    });


                    $('#waitEventsTable tbody').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        SendEmaildialog(resultArray[1], resultArray[2], resultArray[3]);

                    });

                },
                "columns": [
                     { "title": "ID", "class": "hideColumn" },
                    { "title": "Event Name", "width": "0%" },
                    { "title": "Start Time", "width": "40%" },
                    { "title": "End Time", "width": "30%" },
                    { "title": "Status", "width": "30%" }
                ],
                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Events by Event Name or Event Date Time etc",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            dataw.fnSetColumnVis(4, false);
            $('#waitEventsTable tbody').on('click', 'tr', function () {

                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();

                showEmpEventDetails(resultArray[0], resultArray[4]);
            });
        }, function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });

}

////events feedback 

function showEventFeedback() {
    //var feedbackTable = document.getElementById("EventsFeedbackTable");
    //var feedbackBody = feedbackTable.getElementsByTagName('tbody');
    //var feedbaodylength = feedbackBody.length;
    //while (feedbaodylength) feedbackTable.removeChild(feedbackBody[--feedbaodylength]);
    //var feedbackBodyElement = document.createElement("tbody");
    var feedbackData = [];

    var enrollTable = document.getElementById("EnrllEventList");
    while (enrollTable.hasChildNodes()) {
        enrollTable.removeChild(enrollTable.lastChild);
    }
    var enrollTable2 = document.getElementById("AllEventsList");
    while (enrollTable2.hasChildNodes()) {
        enrollTable2.removeChild(enrollTable2.lastChild);
    }
    var waitTable = document.getElementById("WaitEventList");
    while (waitTable.hasChildNodes()) {
        waitTable.removeChild(waitTable.lastChild);
    }
    var hasEvent = false;
    var isWait = false;

    AllAttendeeControlHide();
    $('#myEventsFeedbackDiv').show();
    $('#EventsFeedback').show();
    $('#AllEnrllEvents').hide();
    $('#OtherEvents').hide();
    $('#WaitingEvents').hide();
    $('#AllRoleRequest').hide();
    $('#AllEventTableDiv').hide();
    list = web.get_lists().getByTitle("Employee");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        + user
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var empEventID = listItem.get_fieldValues()["EventLookup"].get_lookupValue();
                empStatus = listItem.get_fieldValues()["_Status"];
                if (empStatus != "Wait") {
                    hasEvent = true;
                }
                else {
                    isWait = true;
                }
                getfeedEventName(empEventID, empStatus, feedbackData);
            }
            if (!hasEvent) {
                $('#eventsFeedBackDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="eventsFeedBackTable"></table>');
                var datat = $('#eventsFeedBackTable').dataTable({
                    "data": feedbackData,

                    "columns": [
                   { "title": "ID", "class": "hideColumn", "width": "0%" },
                   { "title": "Event Name", "width": "40%" },
                   { "title": "Start Time", "width": "30%" },
                   { "title": "End Time", "width": "30%" }
                    ],

                    language: {
                        "search": "_INPUT_",
                        "searchPlaceholder": "Search by Event Name or Event Date Time",
                        "paginate": {
                            "first": "<<",
                            "last": ">>",
                            "next": ">",
                            "previous": "<"
                        },
                        "lengthMenu": "_MENU_",
                        "info": "View _START_ - _END_ of _TOTAL_"
                    },
                    "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                    "initComplete": function (settings, json) {
                        var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                        $(this).siblings(".pCustomTitle").html(pHeadingObj);
                    },
                    "pagingType": "input"
                });
                NotificationMsg("You are not enrolled for any Events.");
            }
            $('#EventsFeedback').fadeIn(500, null);
        }, function (sender, args) {
            ErrorMsg("Failure " + args.get_message());
        });
}

// This function gives events for an employee
function getfeedEventName(empEventID, empStatus, feedbackData) {
    //cleaning Table body tag
    var context1 = SP.ClientContext.get_current();
    list = web.get_lists().getByTitle("EventList");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Text'>"
        + empEventID
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context1.load(listItems);
    context1.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                if (empStatus != "Wait") {

                    feedbackData.push(CreatEventsFeedbackDataElement(listItem, empStatus));
                }
            }
            $('#eventsFeedBackDiv').html('<table cellpadding="0" cellspacing="0" border="0" class="display" id="eventsFeedBackTable"></table>');

            var datat = $('#eventsFeedBackTable').dataTable({
                "data": feedbackData,
                "fnDrawCallback": function () {
                    $('#eventsFeedBackTable tbody').on('click', 'tr', function () {
                        var id = datat.fnGetData(this)[0];
                        var title = datat.fnGetData(this)[1];

                        showFeedbackEventDetails(id, title);
                    });

                },
                "columns": [
               { "title": "ID", "class": "hideColumn", "width": "0%" },
               { "title": "Event Name", "width": "40%" },
               { "title": "Start Time", "width": "30%" },
               { "title": "End Time", "width": "30%" }
                ],
                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search by Event Name or Event Date or Time",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            //$('#eventsFeedBackTable tbody').on('click', 'tr', function () {
            //    var id = datat.fnGetData(this)[0];
            //    var title = datat.fnGetData(this)[1];

            //    showFeedbackEventDetails(id, title);
            //});
        }, function (sender, args) {
            ErrorMsg("Failure " + args.get_message());
        });
}

// This function shows the details for a specific event assigned to current user
function showEmpEventDetails(itemID, status) {
    var errArea = document.getElementById("errEvents");
    // Remove all nodes from the errEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    currentItem = list.getItemById(itemID);
    context.load(currentItem);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            if (status == "Self-Enrolled") {
                $('#deleteEnroll').show();
            }
            else {
                $('#deleteEnroll').hide();
            }
            $('#eventName').val(currentItem.get_fieldValues()["Title"]);
            siteID = currentItem.get_fieldValues()["SiteLookup"].get_lookupValue();


            siteList = web.get_lists().getByTitle('PSites');
            var currentaItem = siteList.getItemById(siteId);
            context.load(currentaItem);
            var assetName = context.executeQueryAsync(
                function () {
                    var assetName = currentaItem.get_fieldValues()["Title"];
                    var address = currentaItem.get_fieldValues()["SiteAddress"];
                    var venu = assetName + ' @ ' + address;
                    $('#eventLocation').val(venu);

                });


            // $('#eventLocation').val(assetsID);
            $('#eventStartDate').val(new Date(currentItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
            $('#eventEndDate').val(new Date(currentItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
            $('#eventDetails').dialog(
         {
             width: 'auto',
             maxWidth: 600,
             height: 'auto',
             modal: true,
             fluid: true,
             show: {
                 effect: "Scale",
                 duration: 1000
             },
             hide: {
                 effect: "Explode",
                 duration: 1000
             }

         });
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var errArea = document.getElementById("errEvents");
            // Remove all nodes from the errEvents <DIV> so we have a clean space to write to
            while (errArea.hasChildNodes()) {
                errArea.removeChild(errArea.lastChild);
            }
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode(args.get_message()));
            errArea.appendChild(divMessage);
        });
}

// This function cancels the event dialog
function cancelEvent() {
    $('#eventDetails').dialog("close");
}

// This function cancels the enrolled event dialog
function cancelEnrollEvent() {
    $('#enrollEventDetails').dialog("close");
}

// This function retrieves all events not assigned to current user
function showAllEvents() {

    var allEventsData = [];

    AllAttendeeControlHide();
    $('#myAvailableEventsDiv').show();
    $('#EventsFeedback').hide();
    $('#AllEnrllEvents').hide();
    $('#OtherEvents').show();
    $('#WaitingEvents').hide();
    $('#AllRoleRequest').hide();
    $('#AllEventTableDiv').show();
    var enrollClear = document.getElementById("AllEventsList");
    //var allEventsTable = document.getElementById("AllEventTable");
    //var allEventsBody = allEventsTable.getElementsByTagName('tbody');
    //var alleventsLength = allEventsBody.length;
    //while (alleventsLength) allEventsTable.removeChild(allEventsBody[--alleventsLength]);
    //var tbodyelemnt = document.createElement("tbody");
    // Remove all nodes from the AllEventsList <DIV> so we have a clean space to write to
    while (enrollClear.hasChildNodes()) {
        enrollClear.removeChild(enrollClear.lastChild);
    }
    var newArr = [];
    var origLen;
    var found;
    var x;
    var y;
    var flag = false;
    var empINEventID = new Array();
    var removeID = new Array();
    list = web.get_lists().getByTitle("Employee");
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();

                var eventLookup = listItem.get_fieldValues()["EventLookup"].get_lookupValue();
                var empName = listItem.get_fieldValues()["Title"];
                var status = listItem.get_fieldValues()["_Status"];
                empINEventID.push(eventLookup);
                if (empName == user && status != "Wait") {
                    empINEventID.pop();
                    removeID.push(eventLookup);
                }
            }
            for (var i in empINEventID) {
                for (var j in removeID) {
                    if (empINEventID[i] == removeID[j]) {
                        delete empINEventID[i];
                    }
                }
            }

            origLen = empINEventID.length;
            //Removes duplicate elements from empINEventID array
            for (x = 0; x < origLen; x++) {
                found = undefined;
                for (y = 0; y < newArr.length; y++) {
                    if (empINEventID[x] == newArr[y]) {
                        found = true;
                        break;
                    }
                }
                if (!found)
                    newArr.push(empINEventID[x]);
            }
            empINEventID = newArr;
            var eventTable = document.getElementById("AllEventsList");

            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            if (empINEventID.length == 0 || empINEventID == "") {

                //var noEvents = document.createElement("div");
                //noEvents.appendChild(document.createTextNode("There are no Events you can enroll for."));
                //eventTable.appendChild(noEvents);

                $('#allEventsDiv').html('<table cellpadding="0" style="cursor: pointer;" cellspacing="0" border="0" class="display" id="allEventsTable"></table>');

                var datat = $('#allEventsTable').dataTable({
                    "data": allEventsData,
                    "columns": [
                   { "title": "ID", "class": "hideColumn", "width": "0%" },
                   { "title": "Event Name", "width": "30%" },
                   { "title": "Start Time", "width": "25%" },
                   { "title": "End Time", "width": "25%" },
                    { "title": "Email", "class": "attendeeEventEmail", "width": "20%" }
                    ],

                    language: {

                        "search": "_INPUT_",
                        "searchPlaceholder": "Search by Event Name or Event Date",
                        "paginate": {
                            "first": "<<",
                            "last": ">>",
                            "next": ">",
                            "previous": "<"
                        },
                        "lengthMenu": "_MENU_",
                        "info": "View _START_ - _END_ of _TOTAL_"
                    },
                    "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                    "initComplete": function (settings, json) {
                        var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                        $(this).siblings(".pCustomTitle").html(pHeadingObj);
                    },
                    "pagingType": "input"
                });
            }
            else {
                for (var i in empINEventID) {
                    getAllEventName(empINEventID[i], allEventsData);
                }
            }
        }, function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

// This function gives all events for an employee
function getAllEventName(empEventID, allEventsData) {

    var context1 = SP.ClientContext.get_current();
    var eventArray = new Array();
    var errArea = document.getElementById("errEvents");
    // Remove all nodes from the error <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    list = web.get_lists().getByTitle("EventList");
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Text'>"
        + empEventID
        + "</Value></Eq></Where></Query></View>");
    var listItems = list.getItems(camlQuery);
    context1.load(listItems);
    context1.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                if (listItem.get_fieldValues()["EventStatus"] == 'Approved') {
                    allEventsData.push(CreatAllEventsDataElement(listItem));
                }
            }
            $('#allEventsDiv').html('<table cellpadding="0" cellspacing="0" border="0" class="display" id="allEventsTable"></table>');

            var datat = $('#allEventsTable').dataTable({
                "data": allEventsData,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#allEventsTable tbody .attendeeEventdialog').on('click', function () {

                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showAllEventDetails(resultArray[0]);
                    });
                    $('#allEventsTable tbody .attendeeEventEmail').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        SendEmaildialog(resultArray[1], resultArray[2], resultArray[3]);

                    });

                    $('#allEventsTable tbody .fbshareattendee').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        //FbSahreDialog();
                        ShareMyFeed(resultArray[1], heceventsappUrl, heceventsappPicUrl, 'HEC Event Management System', 'HEC event management system is going to share a post on facebook', 'Share this post')

                    });
                },
                "columns": [
               { "title": "ID", "class": "attendeeEventdialog hideColumn", "width": "0%" },
               { "title": "Event Name", "class": "attendeeEventdialog", "width": "20%" },
               { "title": "Venue", "class": "attendeeEventdialog", "width": "20%" },
               { "title": "Start Time", "class": "attendeeEventdialog", "width": "20%" },
               { "title": "End Time", "class": "attendeeEventdialog", "width": "20%" },
                { "title": "Recommend Event", "class": "attendeeEventEmail", "width": "20%" },
                { "title": "Share Event", "class": "fbshareattendee", "width": "20%" }
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search by Event Name or Event Date or Time ",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            //$('#allEventsTable tbody .attendeeEventdialog').on('click', function () {

            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();

            //    showAllEventDetails(resultArray[0]);
            //});
            //$('#allEventsTable tbody .attendeeEventEmail').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    SendEmaildialog(resultArray[1], resultArray[2], resultArray[3]);

            //});

            //$('#allEventsTable tbody .fbshareattendee').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    //FbSahreDialog();
            //    //ShareMyFeed(resultArray[1], heceventsappUrl, heceventsappPicUrl, 'HEC Event Management System', 'HEC event management system is going to share a post on facebook', 'Share this post')

            //});
            $('#AllEventsList').fadeIn(500, null);
        });
}

// This function shows the details for a specific event to employee
function showAllEventDetails(itemID) {
    var errArea = document.getElementById("errEvents");
    // Remove all nodes from the errEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    enrollID = itemID;

    currentItem = list.getItemById(itemID);
    context.load(currentItem);
    context.executeQueryAsync(
        function () {

            siteID = currentItem.get_fieldValues()["SiteLookup"].get_lookupValue();
            siteList = web.get_lists().getByTitle('PSites');
            var currentaItem = siteList.getItemById(siteID);
            context.load(currentaItem);
            var assetName = context.executeQueryAsync(
                function () {
                    var assetName = currentaItem.get_fieldValues()["Title"];
                    var address = currentaItem.get_fieldValues()["SiteAddress"];
                    var venu = assetName + ' @ ' + address;
                    $('#enrollEventLocation').val(venu);
                });


            $('#enrollEventName').val(currentItem.get_fieldValues()["Title"]);
            $('#enrollStartDate').val(new Date(currentItem.get_fieldValues()["EventDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
            $('#enrollEndDate').val(new Date(currentItem.get_fieldValues()["EndDate"]).format("MMMM dd, yyyy " + " @ " + " hh:mm tt"));
            $('#enrollEventDetails').dialog({
                width: 'auto',
                maxWidth: 600,
                height: 'auto',
                modal: true,
                fluid: true,
                show: {
                    effect: "Scale",
                    duration: 1000
                },
                hide: {
                    effect: "Explode",
                    duration: 1000
                }

            });
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var errArea = document.getElementById("errEvents");
            // Remove all nodes from the errEvents <DIV> so we have a clean space to write to
            while (errArea.hasChildNodes()) {
                errArea.removeChild(errArea.lastChild);
            }
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode(args.get_message()));
            errArea.appendChild(divMessage);
        });
}

// This function checks for enrollment
function enrollEvent() {
    var errArea = document.getElementById("errEvents");
    // Remove all nodes from the error <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }


    empList = web.get_lists().getByTitle("Employee");
    currentItem = list.getItemById(enrollID);

    currentItem = list.getItemById(enrollID);
    var maxCount = currentItem.get_fieldValues()["EventCap"];

    if (maxCount == -1) {
        maxCount = 10000;
    }

    context.load(currentItem);
    var enrolledCount = 0;
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var camlQuery = new SP.CamlQuery();
            camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
                + enrollID
                + "</Value></Eq></Where></Query></View>");
            var listItems = empList.getItems(camlQuery);
            context.load(listItems);
            someCount = context.executeQueryAsync(
                function () {
                    var listItemEnumerator = listItems.getEnumerator();
                    while (listItemEnumerator.moveNext()) {
                        var listItem = listItemEnumerator.get_current();
                        if (listItem.get_fieldValues()["_Status"] == "Self-Enrolled") {
                            enrolledCount = enrolledCount + 1;
                        }
                    }
                    enrollEmployee(maxCount, enrolledCount, enrollID);
                });
        }, function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });
}

// This function enrolls employee to the event
function enrollEmployee(maxCount, enrolledCount, enrollID) {
    var isWaiting = false;
    var changed = false;

    if (enrolledCount < maxCount) {

        empList = web.get_lists().getByTitle("Employee");
        var camlQuery = new SP.CamlQuery();
        camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + enrollID
            + "</Value></Eq></Where></Query></View>");
        var listItems = empList.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
           function () {
               // Success returned from executeQueryAsync
               var listItemEnumerator = listItems.getEnumerator();
               while (listItemEnumerator.moveNext()) {
                   var listItem = listItemEnumerator.get_current();
                   if (listItem.get_fieldValues()["_Status"] == "Wait" && listItem.get_fieldValues()["Title"] == user) {
                       isWaiting = true;
                       alert("You have been moved from Wait list to Enrolled List");
                       listItem.set_item("_Status", "Self-Enrolled");
                       listItem.update();
                       context.load(listItem);
                       context.executeQueryAsync(function () {
                           cancelEnrollEvent();
                           showAllEvents();
                       },
                       function (sender, args) {
                           alert("Error:" + args.get_message());
                       });


                   }
               }
               if (!isWaiting) {
                   var itemCreateInfo = new SP.ListItemCreationInformation();
                   listItem = empList.addItem(itemCreateInfo);
                   listItem.set_item("Title", user);
                   listItem.set_item("EventLookup", enrollID);
                   listItem.set_item("_Status", "Self-Enrolled");
                   listItem.set_item("AttendeeEmail", useremail);
                   listItem.update();
                   context.load(listItem);
                   context.executeQueryAsync(function () {
                       alert("You are successfully Enrolled");
                       cancelEnrollEvent();
                       Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>You are successfully Enrolled for Event [Name:<b>" + resultArray[1] + "</b>].<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                       cancelEnrollEvent();
                       showAllEvents();
                   });
               }
           },
           function (sender, args) {
               // Failure returned from executeQueryAsync
               alert("Failure " + args.get_message());
           });
    }


    else {

        empList = web.get_lists().getByTitle("Employee");
        var camlQuery = new SP.CamlQuery();
        camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + enrollID
            + "</Value></Eq></Where></Query></View>");
        var listItems = empList.getItems(camlQuery);
        context.load(listItems);
        context.executeQueryAsync(
           function () {
               // Success returned from executeQueryAsync
               var listItemEnumerator = listItems.getEnumerator();
               while (listItemEnumerator.moveNext()) {
                   var listItem = listItemEnumerator.get_current();
                   if (listItem.get_fieldValues()["_Status"] == "Wait" && listItem.get_fieldValues()["Title"] == user) {
                       isWaiting = true;
                       alert("You are already in Waiting List.");

                   }
               }
               if (!isWaiting) {
                   var itemCreateInfo = new SP.ListItemCreationInformation();
                   listItem = empList.addItem(itemCreateInfo);
                   listItem.set_item("Title", user);
                   listItem.set_item("EventLookup", enrollID);
                   listItem.set_item("_Status", "Wait");
                   listItem.set_item("AttendeeEmail", useremail);
                   listItem.update();
                   context.load(listItem);
                   context.executeQueryAsync(function () {

                       alert("There is no free space. You are placed in Wait List");
                       cancelEnrollEvent();
                       Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>You are in waiting list for Event [Name:<b>" + resultArray[1] + "</b>].<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
                   });
               }
           },
           function (sender, args) {
               // Failure returned from executeQueryAsync
               alert("Failure " + args.get_message());
           });
    }



}

//This function cancels the self-enrolled event
function deleteEnrollEvent() {
    var emplist = web.get_lists().getByTitle('Employee');
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + currentItem.get_id()
        + "</Value></Eq><</Where></Query></View>");
    var listItems = emplist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync
        var listItemEnumerator = listItems.getEnumerator();
        while (listItemEnumerator.moveNext()) {
            var listItem = listItemEnumerator.get_current();
            if (listItem.get_fieldValues()["_Status"] == "Self-Enrolled" && listItem.get_fieldValues()["Title"] == user) {
                var empid = listItem.get_id();
                deleteEnrollEmployee(empid);
            }
        }

    }, function (sender, args) {
        // Faliure returned from executeQueryAsync
        alert("Failure " + args.get_message());
    });
}

//This function deletes the employee respective to the event
function deleteEnrollEmployee(empid) {
    list = web.get_lists().getByTitle("Employee");
    var empItem = list.getItemById(empid);
    empItem.deleteObject();
    cancelEvent();
    autoEnroll();
}

//This function automatically enrolls the employee who is in wait list to the event in the first come first serve manner
function autoEnroll() {
    var emplist = web.get_lists().getByTitle('Employee');
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + currentItem.get_id()
        + "</Value></Eq></Where></Query></View>");
    var listItems = emplist.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                if (listItem.get_fieldValues()["_Status"] == "Wait") {
                    listItem.set_item("_Status", "Self-Enrolled");
                    listItem.update();
                    context.load(listItem);
                    context.executeQueryAsync(function () { }, function (sender, args) { alert("Error:" + args.get_message()) });
                    break;
                }
            }
            showEnrllEvents();
        },
        function (sender, args) {
            // Faliure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Error: " + args.get_message()));
            errArea.appendChild(divMessage);
        }
        );
}

//This function shows the new Attendee dialog
function addNewAttendees() {

    $('#editAttendees').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        }
    });
    initializePeoplePicker('editPeoplePicker');

}

// This function saves the Attendees in edit event form
function saveEditAttendee() {
    var maxStudents = getEditPeopleCount();
    maxStudents = maxStudents + attendeeCount;

    var capped = getRadioValue('EditEventType');
    if (((maxStudents <= $('#edittxtExpectedAttendies').val())) || (capped == 1)) {
        getEditUserInfo(eventID);
        cancelAttendee();
    }
    else {
        alert("Number of attendees exceeded Cap. Please remove some attendees");
        ErrorMsg("Number of attendees exceeded Cap. Please remove some attendees");
    }
}

//This function closes the new Attendee dialog
function cancelAttendee() {
    $('#editAttendees').dialog("close");
    $('#editPeoplePicker').val("");
    $('#assignEditResource').show();
    var empList = document.getElementById("showAttendees");
    while (empList.hasChildNodes()) {
        empList.removeChild(empList.lastChild);
    }

    showEventDetails(eventID);
}






// Query the picker for user information.
function getEditUserInfo(editEventID) {

    // Get the people picker object from the page.
    var peoplePicker = this.SPClientPeoplePicker.SPClientPeoplePickerDict.editPeoplePicker_TopSpan;
    // Get information about all users.
    empList = web.get_lists().getByTitle('Employee');
    users = peoplePicker.GetAllUserInfo();
    for (var i = 0; i < users.length; i++) {
        user = users[i];
        employeeName = user["DisplayText"];

        var employeeEmail = user["Description"];

        if (user["ProviderDisplayName"] == "Extranet Users") {
            employeeEmail = user["AutoFillSubDisplayText"];
        }


        addEditEmployee(employeeName, editEventID, employeeEmail);

    }
    attendeeCount = users.length;
}

// This function adds employee to the Employee list
function addEditEmployee(employeeName, editEventID, employeeEmail) {
    empList = web.get_lists().getByTitle("Employee");
    //Create a CAML query that retrieves employees for event
    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + editEventID
            + "</Value></Eq></Where></Query></View>");
    var listItems = empList.getItems(camlQuery);
    var hasEmployee = false;
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var empl = listItem.get_fieldValues()["Title"];
                if (empl == employeeName) {
                    hasEmployee = true;
                }
            }
            if (!hasEmployee) {
                var itemCreateInfo = new SP.ListItemCreationInformation();
                var listItem = empList.addItem(itemCreateInfo);
                listItem.set_item("Title", employeeName);
                listItem.set_item("EventLookup", editEventID);
                listItem.set_item("AttendeeEmail", employeeEmail);

                listItem.update();
                context.load(listItem);
                context.executeQueryAsync(function () {
                },
                function (sender, args) { alert("Error in Saving Attendees: " + args.get_message()); });

            }
            if (eventOrganizer) {
                showEventsForAttendeeView();
            }
            else {
                showEvents();
            }

            showEventDetails(editEventID);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error: " + args.get_message());
        });
}

// This function deletes the employee from event
function deleteEditEmployee(empid, itemID) {
    list = web.get_lists().getByTitle("Employee");
    var empItem = list.getItemById(empid);
    empItem.deleteObject();
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var empList = document.getElementById("showAttendees");
            while (empList.hasChildNodes()) {
                empList.removeChild(empList.lastChild);
            }
            if (eventOrganizer) {
                showEventsForAttendeeView();
            }
            else {
                showEvents();
            }
            showEventDetails(itemID);
        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            alert("Error in Deleting Employee:" + args.get_message());
        });
}

// This function deletes the employee respective to event that is deleted
function removeEmployee(empid) {
    list = web.get_lists().getByTitle("Employee");
    var empItem = list.getItemById(empid);
    empItem.deleteObject();
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var empList = document.getElementById("showAttendees");
            while (empList.hasChildNodes()) {
                empList.removeChild(empList.lastChild);
            }
            if (eventOrganizer) {
                showEventsForAttendeeView();
            }
            else {

                showEvents();
            }

        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            alert("Error in Deleting Employee:" + args.get_message());
        });
}

// This function deletes the selected event
function deleteEditEvent() {
    if ($("#IsRecurring").val() == "true") {
        if (confirm("Deleting the event will delete all the recurring events linked to it. Would you like to continue.") == true) {
            var recurrEventId = $("#editEventid").val();
            DeleteRecurringEvents(recurrEventId);
            //deleteEvent();
        }
    }
    else {
        deleteEvent();
    }
}

function deleteEvent() {
    $('#editProjectors').attr('disabled', true);
    $('#editLocation').attr('disabled', true);
    $('#editInstructors').attr('disabled', true);
    $('#editStudentPCs').attr('disabled', true);

    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var empList = web.get_lists().getByTitle('Employee');
    //Create a CAML query that retrieves the employees
    var empQuery = new SP.CamlQuery();
    empQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + currentItem.get_id()
        + "</Value></Eq></Where></Query></View>");
    var empListItems = empList.getItems(empQuery);
    context.load(empListItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listItemEnumerator = empListItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var empid = listItem.get_id();
                removeEmployee(empid);
            }
            DeleteListData(currentItem.get_id(), 'EventDomainMapList', 'EventId');
            DeleteListData(currentItem.get_id(), 'EventSubDomainMapList', 'EventId');
            //Doamin Deletion goes here
            currentItem.deleteObject();
            cancelEditEvent();
            if (eventOrganizer) {
                showEventsForAttendeeView();
            } else {
                showEvents();
            }

        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Error: " + args.get_message()));
            errArea.appendChild(divMessage);
        }
    );
    deleteSceduledEvent(currentItem.get_id());
    deletespSiteEvents(currentItem.get_id());
}



function deleteEventFromMultiLists(eventid) {


    var errArea = document.getElementById("errAllEvents");
    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var empList = web.get_lists().getByTitle('Employee');
    //Create a CAML query that retrieves the employees
    var empQuery = new SP.CamlQuery();
    empQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventLookup' LookupId='TRUE' /><Value Type='Lookup'>"
        + eventid
        + "</Value></Eq></Where></Query></View>");
    var empListItems = empList.getItems(empQuery);
    context.load(empListItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var listItemEnumerator = empListItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var empid = listItem.get_id();
                removeEmployee(empid);
            }
            DeleteListData(eventid, 'EventDomainMapList', 'EventId');
            DeleteListData(eventid, 'EventSubDomainMapList', 'EventId');
            ////Doamin Deletion goes here
            //currentItem.deleteObject();
            cancelEditEvent();
            //if (eventOrganizer) {
            //    showEventsForAttendeeView();
            //} else {
            //    showEvents();
            //}

        },
        function (sender, args) {
            //Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Error: " + args.get_message()));
            errArea.appendChild(divMessage);
        }
    );
    deleteSceduledEvent(eventid);
}



function DeleteRecurringEvents(recurrEventId) {

    // Get all the Rooms associated with the siteId gotten in eventobject
    var geteventsList = web.get_lists().getByTitle('EventList');
    var geteventsListItems;

    //Create a CAML query that retrieves the sites for this organization
    var delscheventsQuery = new SP.CamlQuery();
    delscheventsQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RecurringEventId'  /><Value Type='Counter'>"
        + recurrEventId
        + "</Value></Eq></Where></Query></View>");
    geteventsListItems = geteventsList.getItems(delscheventsQuery);
    context.load(geteventsListItems);

    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var geteventslistItemEnumerator = geteventsListItems.getEnumerator();
            while (geteventslistItemEnumerator.moveNext()) {
                var geteventslistItem = geteventslistItemEnumerator.get_current();
                var delEventId = geteventslistItem.get_id();
                deleteRecurringEvent(delEventId);
                deleteEventFromMultiLists(delEventId);
            }
            deleteEvent(recurrEventId);
        });
}


// This function deletes the event
function deleteRecurringEvent(delEventId) {
    list = web.get_lists().getByTitle("EventList");
    var eventItem = list.getItemById(delEventId);
    eventItem.deleteObject();
}

//Role Registration
// This function retrieves enrolled events
function showRoleRequest() {
    var roleReqData = [];
    var enrollTable = document.getElementById("EnrllEventList");
    while (enrollTable.hasChildNodes()) {
        enrollTable.removeChild(enrollTable.lastChild);
    }

    var enrollTable2 = document.getElementById("AllEventsList");
    while (enrollTable2.hasChildNodes()) {
        enrollTable2.removeChild(enrollTable2.lastChild);
    }

    var waitTable = document.getElementById("WaitEventList");
    while (waitTable.hasChildNodes()) {
        waitTable.removeChild(waitTable.lastChild);
    }


    var rolerequestTable = document.getElementById("RoleRequestList");
    while (rolerequestTable.hasChildNodes()) {
        rolerequestTable.removeChild(rolerequestTable.lastChild);
    }

    AllAttendeeControlHide();
    $('#myCurrentRoleRequestDiv').show();
    $('#AllEventTableDiv').hide();
    $('#EventsFeedback').hide();
    $('#AllEnrllEvents').hide();
    $('#OtherEvents').hide();
    $('#WaitingEvents').hide();
    $('#AllRoleRequest').show();
    var noEvents = document.createElement("div");
    noEvents.appendChild(document.createTextNode("There are no Role Requests Pending Approval."));
    rolerequestTable.appendChild(noEvents);


    var roleRequestTable = document.getElementById("RoleRequestList");
    while (roleRequestTable.hasChildNodes()) {
        roleRequestTable.removeChild(roleRequestTable.lastChild);
    }


    //asad1
    var roleRequest = [];
    var hasRoleRequest = false;
    var userrolelist = web.get_lists().getByTitle('UserRoles');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();

    //Create a CAML query that retrieves the sites for this organization
    var userRoleQuery = new SP.CamlQuery();
    userRoleQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
        + useremail + "</Value></Eq></Where></Query></View>");
    var userrolelistItems = userrolelist.getItems(userRoleQuery);
    context.load(userrolelistItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var userrolelistItemEnumerator = userrolelistItems.getEnumerator();
            while (userrolelistItemEnumerator.moveNext()) {
                var userrolelistItem = userrolelistItemEnumerator.get_current();
                roleRequest.push(getUserRolesDataElement(userrolelistItem));
                hasRoleRequest = true;
            }

            //------------------------------------------------------------------------------------------

            $('#roleRequestDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="RoleRequestTable"></table>');
            var datat = $('#RoleRequestTable').dataTable({
                "data": roleRequest,
                bProcessing: true,
                "columns": [
                    { "title": "ID", "class": "editAssetEvent hideColumn" },
                    { "title": "Email", "class": "editAssetEvent", hidden: true },
                    { "title": "Event Organizer", "class": "editAssetEvent" },
                    { "title": "Event Organizer Request Status", "class": "editAssetEvent" },
                    { "title": "Site Representative", "class": "editAssetEvent" },
                    { "title": "Site Representative Request Status", "class": "editAssetEvent" }
                ],

                language: {
                    "sSearch": "Search",
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search by Email or Status",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });

            $('#RoleRequestTable tbody .editAssetEvent').on('click', function () {
                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();
                //scheduleEvents(resultArray[1]);
            });

            //$('#RoleRequestTable tbody .ApprovedRequest').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    ApproveRequest(resultArray[0], resultArray[2]);
            //});
            //$('#RoleRequestTable tbody .RejectRequest').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    RejectRequest(resultArray[0], resultArray[2]);
            //});

            //if (!hasRoleRequest) {
            //    var org = document.createElement("div");
            //    org.appendChild(document.createTextNode("There is no Role request."));
            //    roleRequestTable.appendChild(org);
            //}
            $('#AllRoleRequest').fadeIn(500, null);






        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error :" + args.get_message());
        });
}

function getUserRolesDataElement(userrolelistItem) {
    var data = [];
    data.push(userrolelistItem.get_fieldValues()["ID"]);
    data.push(userrolelistItem.get_fieldValues()["Title"]);
    //data.push(userrolelistItem.get_fieldValues()["EventOrganizer"]);
    if (userrolelistItem.get_fieldValues()["EventOrganizer"] == true) {
        data.push("Event Organizer");
        data.push(userrolelistItem.get_fieldValues()["EventOrganizerStatus"]);
    } else {
        data.push("");
        data.push("");
    }

    if (userrolelistItem.get_fieldValues()["Rep"] == true) {
        data.push("Site Representative");
        data.push(userrolelistItem.get_fieldValues()["RepStatus"]);
    } else {
        data.push("");
        data.push("");
    }

    //userRolecurrentItem1.set_item("Rep", true);
    //userRolecurrentItem1.set_item("RepStatus", 'New');

    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true"> Approve</span></button>');
    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true"> Reject</span></button>');
    return data;



}

function addNewRole() {
    $('#roleDetails').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        }
    });
}

// This function cancels the enrolled event dialog
function cancelRole() {
    $('#roleDetails').dialog("close");
}

// This function cancels the enrolled event dialog
function submitRequest() {

    var role = "";
    role = $('#roles').val();


    var emsuser = [];

    // Get all the Rooms associated with the siteId gotten in eventobject
    var emsUserList = web.get_lists().getByTitle('EMSUsers');

    //Create a CAML query that retrieves the sites for this organization
    var emsUserQuery = new SP.CamlQuery();
    emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
        + useremail
        + "</Value></Eq></Where></Query></View>");
    var emsUserListItems = emsUserList.getItems(emsUserQuery);
    context.load(emsUserListItems);


    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
            while (emsUserlistItemEnumerator.moveNext()) {
                var emsUserlistItem = emsUserlistItemEnumerator.get_current();
                // populated the rooms for the specific site
                emsuser.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
            }

            if (emsuser.length > 0) {
                AddModifyUserRoles(emsuser, role);
            } else {

                // get properties from Site EmsUsers
                var hostUrl1;
                hostUrl1 = getSpHostUrl();

                var appWebContext1 = new SP.ClientContext.get_current();
                var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

                var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(EMSUserListName);

                //Create a CAML query that retrieves the sites for this organization
                var siteQuery1 = new SP.CamlQuery();
                siteQuery1.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
                    + useremail
                    + "</Value></Eq></Where></Query></View>");
                var targetUserResult1 = targetUsersList1.getItems(siteQuery1);

                //var targetUserResult = targetUsersList.getItems(camlQuery);
                appWebContext1.load(targetUserResult1);
                appWebContext1.executeQueryAsync(
                    function () {

                        var listItemEnumerator1 = targetUserResult1.getEnumerator();
                        while (listItemEnumerator1.moveNext()) {

                            var listItem1 = listItemEnumerator1.get_current();
                            var siteuserid = listItem1.get_fieldValues()["ID"];

                            //changesuserrroles
                            var emsUserList1 = web.get_lists().getByTitle('EMSUsers');
                            var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                            var emsUserItem1 = emsUserList1.addItem(emsUseritemCreateInfo);
                            alert(listItem1.get_fieldValues()[SiteColInterest].get_lookupValue());
                            emsUserItem1.set_item("Title", useremail);
                            emsUserItem1.set_item("Name1", listItem1.get_fieldValues()[SiteColName]);
                            emsUserItem1.set_item("FieldInterest", listItem1.get_fieldValues()[SiteColInterest].get_lookupValue());
                            emsUserItem1.set_item("ProvinceRegion", listItem1.get_fieldValues()[SiteColRegion].get_lookupValue());
                            emsUserItem1.set_item("UniOrgTitle", listItem1.get_fieldValues()[SiteColUniTitle].get_lookupValue());
                            emsUserItem1.set_item("Status", listItem1.get_fieldValues()[SiteColStatus]);
                            emsUserItem1.update();


                            context.load(emsUserItem1);
                            context.executeQueryAsync(function () {
                                // Success returned from executeQueryAsync
                                //schEventID = emsUserItem.get_id();
                                emsuser.push({ title: useremail, Id: emsUserItem1.get_id() });
                                AddModifyUserRoles(emsuser, role);
                            },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    alert("Failure " + args.get_message());
                                });


                        }
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure " + args.get_message());
                    });




            }


        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error :" + args.get_message());
        });





}


function AddModifyUserRoles(emsuser, role) {

    var userrole = [];

    var userRoleList = web.get_lists().getByTitle('UserRoles');
    var userRoleListItems;

    //Create a CAML query that retrieves the sites for this organization
    var userRoleQuery = new SP.CamlQuery();
    userRoleQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>" + emsuser[0].title + "</Value></Eq></Where></Query></View>");
    userRoleListItems = userRoleList.getItems(userRoleQuery);
    context.load(userRoleListItems);

    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var userRolelistItemEnumerator = userRoleListItems.getEnumerator();
            while (userRolelistItemEnumerator.moveNext()) {
                var userRolelistItem = userRolelistItemEnumerator.get_current();
                // populated the rooms for the specific site
                userrole.push({ title: userRolelistItem.get_fieldValues()["Title"], Id: userRolelistItem.get_fieldValues()["ID"] });
            }


            if (userrole.length > 0) {

                var userRoleList2 = web.get_lists().getByTitle('UserRoles');
                var userRolecurrentItem1 = userRoleList2.getItemById(userrole[0].Id);
                context.load(userRolecurrentItem1);
                context.executeQueryAsync(
                    function () {
                        // Success returned from executeQueryAsync
                        if (role == 'SuperAdmin') {
                            userRolecurrentItem1.set_item("SuperAdmin", true);
                        }
                        else {
                            if (role == 'Event Organizer') {
                                userRolecurrentItem1.set_item("EventOrganizer", true);
                                userRolecurrentItem1.set_item("EventOrganizerStatus", 'New');
                            }
                            if (role == 'Site Representative') {
                                userRolecurrentItem1.set_item("Rep", true);
                                userRolecurrentItem1.set_item("RepStatus", 'New');
                            }
                        }
                        userRolecurrentItem1.set_item("Title", emsuser[0].title);
                        userRolecurrentItem1.set_item("UserID", emsuser[0].Id);

                        userRolecurrentItem1.update();
                        context.load(userRolecurrentItem1);
                        context.executeQueryAsync(function () {
                            // Success returned from executeQueryAsync
                            if (role != 'SuperAdmin') {
                                alert("Dear " + user + "\n" + "Your request to become " + role + " \n has been successfully submitted!");
                                NotificationMsg("Dear " + user + "\n" + "Your request to become " + role + " \n has been successfully submitted!");
                                $('#roleDetails').dialog("close");
                                getUserrolesByEmail(emsuser[0].title);
                            }
                        },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Error :" + args.get_message());
                        });

                    },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error in getting organization records: " + args.get_message());
                });


            } else {


                var userRoleList1 = web.get_lists().getByTitle('UserRoles');
                var userRoleitemCreateInfo = new SP.ListItemCreationInformation();
                var userRoleItem1 = userRoleList1.addItem(userRoleitemCreateInfo);

                if (role == 'SuperAdmin') {
                    userRoleItem1.set_item("SuperAdmin", true);
                }
                else {
                    if (role == 'Event Organizer') {
                        userRoleItem1.set_item("EventOrganizer", true);
                        userRoleItem1.set_item("EventOrganizerStatus", 'New');
                    }
                    if (role == 'Site Representative') {
                        userRoleItem1.set_item("Rep", true);
                        userRoleItem1.set_item("RepStatus", 'New');
                    }
                }
                userRoleItem1.set_item("Title", emsuser[0].title);
                userRoleItem1.set_item("UserID", emsuser[0].Id);

                userRoleItem1.update();
                context.load(userRoleItem1);
                context.executeQueryAsync(function () {
                    // Success returned from executeQueryAsync

                    var userRoleId = userRoleItem1.get_id();
                    if (role != 'SuperAdmin') {
                        alert("Dear " + user + "\n" + "Your request to become " + role + " \n has been successfully submitted!");
                        NotificationMsg("Dear " + user + "\n" + "Your request to become " + role + " \n has been successfully submitted!");
                        $('#roleDetails').dialog("close");
                        showRoleRequest();
                    }
                },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure " + args.get_message());
                    });
            }
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });
}


function SuccessMessage(msg) {
    $(document).ready(function () {

        jSuccess(msg, {
            autoHide: true, // added in v2.0
            clickOverlay: false, // added in v2.0
            MinWidth: 250,
            TimeShown: 3000,
            ShowTimeEffect: 200,
            HideTimeEffect: 200,
            LongTrip: 20,
            HorizontalPosition: 'center',
            VerticalPosition: 'top',
            ShowOverlay: false,
            ColorOverlay: '#000',
            OpacityOverlay: 0.3,
            onClosed: function () { // added in v2.0

            },
            onCompleted: function () { // added in v2.0

            }
        });
    });
}
function NotificationMsg(msg) {
    $(document).ready(function () {

        jNotify(msg, {
            autoHide: true, // added in v2.0
            clickOverlay: false, // added in v2.0
            MinWidth: 250,
            TimeShown: 3000,
            ShowTimeEffect: 200,
            HideTimeEffect: 200,
            LongTrip: 20,
            HorizontalPosition: 'center',
            VerticalPosition: 'top',
            ShowOverlay: false,
            ColorOverlay: '#000',
            OpacityOverlay: 0.3,
            onClosed: function () { // added in v2.0

            },
            onCompleted: function () { // added in v2.0

            }
        });
    });
}

function ErrorMsg(msg) {
    $(document).ready(function () {

        jError(msg, {
            autoHide: true, // added in v2.0
            clickOverlay: false, // added in v2.0
            MinWidth: 250,
            TimeShown: 3000,
            ShowTimeEffect: 200,
            HideTimeEffect: 200,
            LongTrip: 20,
            HorizontalPosition: 'center',
            VerticalPosition: 'top',
            ShowOverlay: false,
            ColorOverlay: '#000',
            OpacityOverlay: 0.3,
            onClosed: function () { // added in v2.0

            },
            onCompleted: function () { // added in v2.0

            }
        });
    });

}

function CancelFeedback() {
    $('#eventFeedbackDiv').dialog("close");
}
function saveFeedback() {


    var eventid = $('#feedbackEventid').val();

    var quertion1 = getRadioValue('optionsRadios1');
    var quertion2 = getRadioValue('optionsRadios2');
    var quertion3 = getRadioValue('optionsRadios3');
    var quertion4 = getRadioValue('optionsRadios4');
    var quertion5 = getRadioValue('optionsRadios5');
    var feedbackComments = $('#FeedbackComments').val();

    var eventfeedbackList = web.get_lists().getByTitle('EventFeedback');
    var itemCreateInfo = new SP.ListItemCreationInformation();
    var eventfeedbackItem = eventfeedbackList.addItem(itemCreateInfo);

    //var eventid = 1;

    eventfeedbackItem.set_item("Title", 'feedback1');
    eventfeedbackItem.set_item("EventID", eventid);
    eventfeedbackItem.set_item("EmployeeID", userid);
    eventfeedbackItem.set_item("EmployeeName", userName);
    eventfeedbackItem.set_item("Question1", quertion1);
    eventfeedbackItem.set_item("Question2", quertion2);
    eventfeedbackItem.set_item("Question3", quertion3);
    eventfeedbackItem.set_item("Question4", quertion4);
    eventfeedbackItem.set_item("Question5", quertion5);
    eventfeedbackItem.set_item("FeedbackComment", feedbackComments);
    eventfeedbackItem.update();

    context.load(eventfeedbackItem);
    context.executeQueryAsync(function () {
        // Success returned from executeQueryAsync

        var eventfeedbackId = eventfeedbackItem.get_id();



    },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Failure " + args.get_message());
        });


    $('#eventFeedbackDiv').dialog("close");
}


function EventLocationSingle() {
    document.getElementById("createEventLocationMultiple").style.display = 'none';
    document.getElementById("createEventLocationSingle").style.display = 'block';
}
function EventLocationMultiple() {
    document.getElementById("createEventLocationSingle").style.display = 'none';
    document.getElementById("createEventLocationMultiple").style.display = 'block';
}

function TappedEvent() {
    document.getElementById("expectedAttendies").style.display = 'block';

}
function EditTappedEvent() {
    document.getElementById("editexpectedAttendies").style.display = 'block';

}
function OpenEvent() {
    document.getElementById("expectedAttendies").style.display = 'none';
}
function EditOpenEvent() {
    document.getElementById("editexpectedAttendies").style.display = 'none';
}
function ShowCharts() {

    $('#myReportsDiv').show();

    cdiv = document.getElementById('divAlleventspisChart');
    while (cdiv.firstChild)
        cdiv.removeChild(cdiv.firstChild);
    hideAllPanels();
    // initialize();
    ShowPirChartOfAllEvents();
    document.getElementById("chartsDiv").style.display = 'block';
    var errArea = document.getElementById("errAllEvents");
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
}

function BindEventType() {

    //actual data
    //var eventtypelist = ["Conference", "Lecture", "Interview", "Meeting", "PhD Defence", "Seminar", "Training", "Workshop"];
    var eventtypes = ["Lecture", "PhD Defence", "Seminar", "Workshop"];
    var optSelect = document.createElement('option');
    optSelect.innerHTML = 'Select Event Type';
    optSelect.value = -1;
    var list = document.getElementById('barcharEventType');
    list.appendChild(optSelect);
    //Lecture
    var opt = document.createElement('option');
    opt.innerHTML = 'Lecture';
    opt.value = 1;
    list.appendChild(opt);
    //PHd Defence
    var optphd = document.createElement('option');
    optphd.innerHTML = 'Phd Defence';
    optphd.value = 4;
    list.appendChild(optphd);
    //PHd seminar
    var optSeminar = document.createElement('option');
    optSeminar.innerHTML = 'Seminar';
    optSeminar.value = 5;
    list.appendChild(optSeminar);
    //WorkShop
    var optWorkshop = document.createElement('option');
    optWorkshop.innerHTML = 'Workshop';
    optWorkshop.value = 7;
    list.appendChild(optWorkshop);


}
function ShowEventChart() {
    divAlleventspisChart
    cdiv = document.getElementById('divEventTypeBasedChart');
    while (cdiv.firstChild)
        cdiv.removeChild(cdiv.firstChild);
    var evntTypeChart;
    evntTypeChart = new cfx.Chart();

    //calling method to draw chart across event type
    //ShowChartByEventType($('#barcharEventType').val(), evntTypeChart);
    ShowChartByEventTypeDynamic($('#barcharEventType').val(), evntTypeChart);
    //setting Chart properties
    evntTypeChart.setGallery(cfx.Gallery.Bar);
    title = new cfx.TitleDockable();
    title.setText("Discipline Wise Report");
    evntTypeChart.getTitles().add(title);
    title = new cfx.TitleDockable();
    title.setText("Number of Events");
    title.setDock(cfx.DockArea.Left);
    evntTypeChart.getTitles().add(title);
    title = new cfx.TitleDockable();
    title.setText("Disciplines");
    title.setDock(cfx.DockArea.Bottom);
    evntTypeChart.getTitles().add(title);

}
function ShowChartByEventType(eventTypeId, evntTypeChart) {
    ///sdfsdfksjldfsjdhflsjdfhlskjdf s
    var AVASlocal = 0;
    var BMSlocal = 0;
    var BAMlocal = 0;
    var ETlocal = 0;
    var PSlocal = 0;
    var SSlocal = 0;
    var AVASForeign = 0;
    var BMSForeign = 0;
    var BAMForeign = 0;
    var ETForeign = 0;
    var PSForeign = 0;
    var SSForeign = 0;

    var eventQuery = new SP.CamlQuery();
    eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='TypeofEvent' /><Value Type='Number'>" +
       eventTypeId + "</Value></Eq></Where></Query></View>");
    list = web.get_lists().getByTitle('EventList');
    var listItems = list.getItems(eventQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("EventList");
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();

                if (listItem.get_fieldValues()["EventDiscispline"] == 0) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        AVASlocal++;
                    else
                        AVASForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 1) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        BMSlocal++;
                    else
                        BMSForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 2) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        BAMlocal++;
                    else
                        BAMForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 3) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        ETForeign++;
                    else
                        ETForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 4) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        PSlocal++;
                    else
                        PSForeign++;

                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 5) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        SSlocal++;
                    else
                        SSForeign++;
                }
                //LectureDataParser(listItem);
            }

            var items = [
 {
     "Discisplince": "Agriculture and Veterinary Animal Sciences",
     "Locale Lecture": AVASlocal,
     "Foreign Lecture": AVASForeign
 },
 {
     "Discisplince": "Biological and Medical Sciences",
     "Locale Lecture": BMSlocal,
     "Foreign Lecture": BMSForeign
 },
 {
     "Discisplince": "Bsiness Administration & Management",
     "Locale Lecture": BAMlocal,
     "Foreign Lecture": BAMForeign
 },
 {
     "Discisplince": "Engineering and Technology",
     "Locale Lecture": ETlocal,
     "Foreign Lecture": ETForeign
 },
 {
     "Discisplince": "Physical Sciences",
     "Locale Lecture": PSlocal,
     "Foreign Lecture": PSForeign
 },
 {
     "Discisplince": "Social Sciences",
     "Locale Lecture": SSlocal,
     "Foreign Lecture": SSForeign
 }
            ];

            evntTypeChart.setDataSource(items);
            evntTypeChart.create('divEventTypeBasedChart');
        },
        function (sender, args) {
        });
}
function ShowChartByEventTypeDynamic(eventTypeId, evntTypeChart) {
    var allDisciplineData = [];
    var EventsTypeData = [];
    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(uniDomainList);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                allDisciplineData.push(listItem.get_fieldValues()["Title"]);
            }
            //get all events Data
            var eventQuery = new SP.CamlQuery();
            eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='TypeofEvent' /><Value Type='Number'>" +
               eventTypeId + "</Value></Eq></Where></Query></View>");
            var elist = web.get_lists().getByTitle('EventList');
            var elistItems = elist.getItems(eventQuery);
            context.load(elistItems);
            context.executeQueryAsync(
                function () {
                    var listItemEnumerator = elistItems.getEnumerator();
                    while (listItemEnumerator.moveNext()) {
                        var listItem = listItemEnumerator.get_current();
                        EventsTypeData.push({ Discipline: listItem.get_fieldValues()["EventDiscispline"], Local: listItem.get_fieldValues()["EventLocal"] });
                    }

                    EventTypeBarChartDataPrepare(allDisciplineData, EventsTypeData, evntTypeChart)

                },
                function (sender, args) {
                    //alert('sdfasd');
                });
        },
        function () {
            alert('error in getting Uni domain from list');
        }
        );

}
function EventTypeBarChartDataPrepare(allDisciplineData, EventsTypeData, charObject) {
    var barChartDataItems = [];
    for (var i = 0; i < allDisciplineData.length; i++) {
        getEventTypeBarChartDataItem(allDisciplineData[i], EventsTypeData, barChartDataItems);
    }
    charObject.setDataSource(barChartDataItems);
    charObject.create('divEventTypeBasedChart');
}
function getEventTypeBarChartDataItem(discipline, EventsTypeData, barChartDataItems) {
    var disciplineEventsCounter = 0;
    var localEventsCounter = 0;
    var ForiegnEentCounter = 0;
    for (var i = 0; i < EventsTypeData.length; i++) {
        if (discipline.toLowerCase() == EventsTypeData[i].Discipline.toLowerCase()) {
            disciplineEventsCounter++;
            if (EventsTypeData[i].Local) {
                localEventsCounter++;
            }
            else {
                ForiegnEentCounter++;
            }
        }
    }
    barChartDataItems.push({ Discisplince: discipline, "Locale Lecture": localEventsCounter, "Foreign Lecture": ForiegnEentCounter });

}
function ShowPirChartOfAllEvents() {
    var allEventspieChart;
    allEventspieChart = new cfx.Chart();
    papulatePieChartDynamic(allEventspieChart);
    //populatePieChart(allEventspieChart)
    allEventspieChart.setGallery(cfx.Gallery.Pie);
    title = new cfx.TitleDockable();
    title.setText("Discipline Wise Events Percentage");
    allEventspieChart.getTitles().add(title);

}
function doInitializeDash() {
    var title;
    // Top 5 Creditors Chart//
    //chartBarforLectures
    ShowLecturesBarChart(chartBarforLectures);
    chartBarforLectures.setGallery(cfx.Gallery.Bar);
    title = new cfx.TitleDockable();
    title.setText("Lectures: Discipline Wise Report");
    chartBarforLectures.getTitles().add(title);
    title = new cfx.TitleDockable();
    title.setText("# of Lectures");
    title.setDock(cfx.DockArea.Left);
    chartBarforLectures.getTitles().add(title);
    title = new cfx.TitleDockable();
    title.setText("Disciplines");
    title.setDock(cfx.DockArea.Bottom);
    chartBarforLectures.getTitles().add(title);


    //previous
    populateBarChart(chart1);
    chart1.setGallery(cfx.Gallery.Gantt);
    title = new cfx.TitleDockable();
    title.setText("Lectures: Discispline Wise Report");
    chart1.getTitles().add(title);
    chart1.getAllSeries().getPointLabels().setVisible(true);
    chart1.getSeries().getItem(0).getPointLabels().setOffset("0,3");
    chart1.getSeries().getItem(1).getPointLabels().setOffset("5,3");
    var gantt = chart1.getGalleryAttributes();
    chart1.getSeries().getItem(0).setVolume(80);
    chart1.getSeries().getItem(1).setVolume(40);
    var axisY = chart1.getAxisY();
    axisY.setScaleUnit(0);
    axisY.setMax(axisY.getMax() * 1.1);
    title = new cfx.TitleDockable();
    title.setText("# of Lectures");
    title.setDock(cfx.DockArea.Bottom);
    chart1.getTitles().add(title);
    //piechart
    populatePieChart(chart2);
    chart2.setGallery(cfx.Gallery.Pie);
    chart2.getAllSeries().getPointLabels().setVisible(true);
    chart2.getPlotAreaMargin().setTop(4);
    chart2.getPlotAreaMargin().setBottom(4);
    chart2.getPlotAreaMargin().setLeft(4);
    chart2.getPlotAreaMargin().setRight(4);
    chart2.getLegendBox().setContentLayout(cfx.ContentLayout.Center);
    title = new cfx.TitleDockable();
    title.setText("Discipline Wise Lecture Percentage");
    chart2.getTitles().add(title);


}

function populateBarChart(chart) {


    var items = [
  {
      "Discisplince": "Agriculture and Veterinary Animal Sciences",
      "Locale Lecture": 20,
      "Foreign Lecture": 48
  },
  {
      "Discisplince": "Biological and Medical Sciences",
      "Locale Lecture": 329,
      "Foreign Lecture": 148
  },
  {
      "Discisplince": "Bsiness Administration & Management",
      "Locale Lecture": 19,
      "Foreign Lecture": 1
  },
  {
      "Discisplince": "Engineering and Technology",
      "Locale Lecture": 217,
      "Foreign Lecture": 35
  },
  {
      "Discisplince": "Physical Sciences",
      "Locale Lecture": 179,
      "Foreign Lecture": 144
  },
  {
      "Discisplince": "Social Sciences",
      "Locale Lecture": 39,
      "Foreign Lecture": 31
  }
    ];

    chart.setDataSource(items);

}
function DrawLecturesBarChart(chart) {


    var items = [
  {
      "Discisplince": "Agriculture and Veterinary Animal Sciences",
      "Locale Lecture": 20,
      "Foreign Lecture": 48
  },
  {
      "Discisplince": "Biological and Medical Sciences",
      "Locale Lecture": 329,
      "Foreign Lecture": 148
  },
  {
      "Discisplince": "Bsiness Administration & Management",
      "Locale Lecture": 19,
      "Foreign Lecture": 1
  },
  {
      "Discisplince": "Engineering and Technology",
      "Locale Lecture": 217,
      "Foreign Lecture": 35
  },
  {
      "Discisplince": "Physical Sciences",
      "Locale Lecture": 179,
      "Foreign Lecture": 144
  },
  {
      "Discisplince": "Social Sciences",
      "Locale Lecture": 39,
      "Foreign Lecture": 31
  }
    ];

    chart.setDataSource(items);

}

function papulatePieChartDynamic(chart2) {
    var allDisciplineData = [];
    var allEventsData = [];
    //papulating all dicipline data

    var hostUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        hostUrl1 = hostUrl1;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostUrl1);
    }
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(uniDomainList);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                allDisciplineData.push(listItem.get_fieldValues()["Title"]);
            }
            //get all events Data
            var mlist = web.get_lists().getByTitle('EventList');
            var camlQuery = SP.CamlQuery.createAllItemsQuery();
            var listItems = mlist.getItems(camlQuery);
            context.load(listItems);
            context.executeQueryAsync(
                function () {
                    var listItemEnumerator = listItems.getEnumerator();
                    while (listItemEnumerator.moveNext()) {
                        var listItem = listItemEnumerator.get_current();
                        // var test = listItem.get_fieldValues()["EventDiscispline"];
                        allEventsData.push({ Discipline: listItem.get_fieldValues()["EventDiscispline"], Local: listItem.get_fieldValues()["EventLocal"] });
                    }
                    getPieChartData(allDisciplineData, allEventsData, chart2);

                },
                function (sender, args) {
                    //alert('sdfasd');
                });
        },
        function () {
            alert('error in getting Uni domain from list');
        }
        );

}

function getPieChartData(allDisciplineData, allEventsData, chart2) {
    var pieChartDataItems = [];
    for (var i = 0; i < allDisciplineData.length; i++) {
        getPieChartElementData(allDisciplineData[i], allEventsData, pieChartDataItems)

    }
    chart2.setDataSource(pieChartDataItems);
    chart2.create('divAlleventspisChart');
}


function getPieChartElementData(discipline, eventsData, pieChartDataItems) {
    var disciplineCounter = 0;
    if (eventsData.length > 0) {

        for (var j = 0; j < eventsData.length; j++) {
            if (discipline.toLowerCase() == eventsData[j].Discipline.toLowerCase()) {
                disciplineCounter++;
            }
        }
        pieChartDataItems.push({ Category: discipline, Events: disciplineCounter });
    }
    else {
        pieChartDataItems.push({ Category: discipline, Events: disciplineCounter });
    }
}
function populatePieChart(chart2) {
    var AVAS = 0;
    var BMS = 0;
    var BAM = 0;
    var ET = 0;
    var PS = 0;
    var SS = 0;
    list = web.get_lists().getByTitle('EventList');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                // var test = listItem.get_fieldValues()["EventDiscispline"];
                var temp = listItem.get_fieldValues()["EventDiscispline"];
                if (listItem.get_fieldValues()["EventDiscispline"] == 0)
                    AVAS++;
                else if (listItem.get_fieldValues()["EventDiscispline"] == 1)
                    BMS++;
                else if (listItem.get_fieldValues()["EventDiscispline"] == 2)
                    BAM++;
                else if (listItem.get_fieldValues()["EventDiscispline"] == 3)
                    ET++;
                else if (listItem.get_fieldValues()["EventDiscispline"] == 4)
                    PS++;
                else if (listItem.get_fieldValues()["EventDiscispline"] == 5)
                    SS++;
            }
            var items = [
{
    "Category": "Agriculture and Veterinary Animal Sciences",
    "Events": AVAS
},
{
    "Category": "Biological and Medical Sciences",
    "Events": BMS
},
{
    "Category": "Business Administration & Management",
    "Events": BAM
},
{
    "Category": "Engineering and Technology",
    "Events": ET
},
{
    "Category": "Physical Sciences",
    "Events": PS
},
{
    "Category": "Social Sciences",
    "Events": SS
}
            ];

            chart2.setDataSource(items);
            chart2.create('divAlleventspisChart');
        },
        function (sender, args) {
            //alert('sdfasd');
        });



}

function populateCapitalAllocation(chart) {
    var items = [
  {
      "SubjectIdName": "Mountain Bikes",
      "InventoryValue": 72396.22
  },
  {
      "SubjectIdName": "Touring Bikes",
      "InventoryValue": 113517.28
  },
  {
      "SubjectIdName": "Road Bikes",
      "InventoryValue": 214871.98
  },
  {
      "SubjectIdName": "Clothing and Accessories",
      "InventoryValue": 789408.38
  },
  {
      "SubjectIdName": "Components",
      "InventoryValue": 1384794.88
  }
    ];

    chart.setDataSource(items);
}

function doConfigureLevelsSections(gauge) {
    var scale = gauge.getMainScale();

    var section = new cfx.gauge.ScaleSection();
    section.setFrom(0);
    section.setTo(150);
    scale.getSections().add(section);

    section = new cfx.gauge.ScaleSection();
    section.setFrom(150);
    section.setTo(300);
    scale.getSections().add(section);

    section = new cfx.gauge.ScaleSection();
    section.setFrom(300);
    section.setTo(500);
    scale.getSections().add(section);
}

function doConfigureSpendingSections(gauge, limit0, limit1, limit2) {
    var scale = gauge.getMainScale();

    var section = new cfx.gauge.ScaleSection();
    section.setFrom(0);
    section.setTo(limit0);
    section.setTag("Section0");
    scale.getSections().add(section);

    section = new cfx.gauge.ScaleSection();
    section.setFrom(limit0);
    section.setTo(limit1);
    section.setTag("Section2");
    scale.getSections().add(section);

    section = new cfx.gauge.ScaleSection();
    section.setFrom(limit1);
    section.setTo(limit2);
    section.setTag("Section0");
    scale.getSections().add(section);

    scale.setMax(limit2);
}

function ShowLecturesBarChart(LecturesChart) {
    var AVASlocal = 0;
    var BMSlocal = 0;
    var BAMlocal = 0;
    var ETlocal = 0;
    var PSlocal = 0;
    var SSlocal = 0;
    var AVASForeign = 0;
    var BMSForeign = 0;
    var BAMForeign = 0;
    var ETForeign = 0;
    var PSForeign = 0;
    var SSForeign = 0;
    list = web.get_lists().getByTitle('EventList');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var listItems = list.getItems(camlQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("EventList");
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();

                if (listItem.get_fieldValues()["EventDiscispline"] == 0) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        AVASlocal++;
                    else
                        AVASForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 1) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        BMSlocal++;
                    else
                        BMSForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 2) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        BAMlocal++;
                    else
                        BAMForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 3) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        ETForeign++;
                    else
                        ETForeign++;
                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 4) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        PSlocal++;
                    else
                        PSForeign++;

                }
                else if (listItem.get_fieldValues()["EventDiscispline"] == 5) {
                    if (listItem.get_fieldValues()["EventLocal"])
                        SSlocal++;
                    else
                        SSForeign++;
                }
                //LectureDataParser(listItem);
            }

            var items = [
 {
     "Discisplince": "Agriculture and Veterinary Animal Sciences",
     "Locale Lecture": AVASlocal,
     "Foreign Lecture": AVASForeign
 },
 {
     "Discisplince": "Biological and Medical Sciences",
     "Locale Lecture": BMSlocal,
     "Foreign Lecture": BMSForeign
 },
 {
     "Discisplince": "Bsiness Administration & Management",
     "Locale Lecture": BAMlocal,
     "Foreign Lecture": BAMForeign
 },
 {
     "Discisplince": "Engineering and Technology",
     "Locale Lecture": ETlocal,
     "Foreign Lecture": ETForeign
 },
 {
     "Discisplince": "Physical Sciences",
     "Locale Lecture": PSlocal,
     "Foreign Lecture": PSForeign
 },
 {
     "Discisplince": "Social Sciences",
     "Locale Lecture": SSlocal,
     "Foreign Lecture": SSForeign
 }
            ];

            LecturesChart.setDataSource(items);

        },
        function (sender, args) {
            //error handling goes here                
        });
}


function LectureDataParser(listItem) {


}

function EventCapped(reservedSpace, objNewEvent) {


    if (objNewEvent[0].EventCap == "-1") {
        $('#txtExpectedAttendees').val("Virtual Event/No Cap");
    } else {
        $('#txtExpectedAttendees').val(objNewEvent[0].EventCap);
    }
    $('#txtReservedSpace').val(reservedSpace);

    if (reservedSpace > objNewEvent[0].EventCap) {
        $("#txtReservedSpace").css({ "color": "green" });
        $("#txtExpectedAttendees").css({ "color": "green" });
    } else {
        $("#txtReservedSpace").css({ "color": "red" });
        $("#txtExpectedAttendees").css({ "color": "red" });
    }


    $('#EventCapped').show();


}

function scheduleEvents(eventId) {
    EmptyglobalArray();
    // Configuration settings for Scheduler
    scheduler.clearAll();
    scheduler.endLightbox(false);
    scheduler.locale.labels.timeline_tab = "Timeline";
    scheduler.locale.labels.section_custom = "Section";
    scheduler.config.details_on_create = true;
    scheduler.config.details_on_dblclick = true;
    scheduler.config.quick_info_detached = true;
    scheduler.config.xml_date = "%Y-%m-%d %H:%i";
    //scheduler.Config.isReadonly = true;



    var schdiv = document.getElementById("schdiv");

    while (schdiv.hasChildNodes()) {
        schdiv.removeChild(schdiv.lastChild);
    }

    var schdiv1 = document.createElement("div");
    schdiv1.appendChild(document.createTextNode("Double click to reserve a room."));
    schdiv.appendChild(schdiv1);


    //For colouring events
    //scheduler.templates.event_class = function (start, end, event) {
    //    event.color = (event.section_id) ? "red" : "";
    //    return "";
    //};

    //eventId = 1;
    //===============
    //Configuration
    //===============

    //Get  the selected uni and site from $ jquery and use it in camel query
    // don't show calender until drpdwn selction 

    var context = SP.ClientContext.get_current();
    var web = context.get_web();

    neweventObject = null;
    modifyeventObject = null;
    var eventlist1 = web.get_lists().getByTitle('EventList');
    var eventcurrentItem1 = eventlist1.getItemById(eventId);
    context.load(eventcurrentItem1);
    //debugger;
    context.executeQueryAsync(
    function () {
        // Success returned from executeQueryAsync
        neweventObject = [{ Id: eventcurrentItem1.get_fieldValues()["ID"], Title: eventcurrentItem1.get_fieldValues()["Title"], Start_Date: eventcurrentItem1.get_fieldValues()["EventDate"], End_Date: eventcurrentItem1.get_fieldValues()["EndDate"], Site_Id: eventcurrentItem1.get_fieldValues()["SiteLookup"].get_lookupValue(), EventCap: eventcurrentItem1.get_fieldValues()["EventCap"], SiteName: eventcurrentItem1.get_fieldValues()["SiteLookupTitle"] }];
        modifyeventObject = [{ Id: eventcurrentItem1.get_fieldValues()["ID"], Title: eventcurrentItem1.get_fieldValues()["Title"], Start_Date: eventcurrentItem1.get_fieldValues()["EventDate"], End_Date: eventcurrentItem1.get_fieldValues()["EndDate"], Site_Id: eventcurrentItem1.get_fieldValues()["SiteLookup"].get_lookupValue() }];
        //neweventStartDatetime = eventcurrentItem1.get_fieldValues()["EventDate"];

        //copiedObject = eval($.toJSON(neweventStartDatetime));
        neweventStartDatetime = JSON.parse(JSON.stringify(eventcurrentItem1.get_fieldValues()["EventDate"]));

        //jQuery.extend(true, copiedObject, neweventObject);
        //copiedObject = jQuery.extend(true, {}, neweventStartDatetime);


        // Get all the Rooms associated with the siteId gotten in eventobject
        var assetList = web.get_lists().getByTitle('Resources');
        var assetListItems;

        //Create a CAML query that retrieves the sites for this organization
        var assetQuery = new SP.CamlQuery();
        assetQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup' LookupId='TRUE' /><Value Type='Lookup'>"
            + neweventObject[0].Site_Id
            + "</Value></Eq></Where></Query></View>");
        assetListItems = assetList.getItems(assetQuery);
        context.load(assetListItems);

        var keyId = 0;
        var capacity = 0;
        context.executeQueryAsync(
            function () {
                // Iterate through the event list
                var assetlistItemEnumerator = assetListItems.getEnumerator();
                while (assetlistItemEnumerator.moveNext()) {
                    var assetlistItem = assetlistItemEnumerator.get_current();
                    if (assetlistItem.get_fieldValues()["StudentPC"] != null) {
                        capacity = assetlistItem.get_fieldValues()["StudentPC"];
                    } else {
                        capacity = 0;
                    }
                    // populated the rooms for the specific site
                    sections.push({ key: ++keyId, label: assetlistItem.get_fieldValues()["Title"] + " / " + capacity, RoomName: assetlistItem.get_fieldValues()["Title"], Id: assetlistItem.get_fieldValues()["ID"], RoomCapacity: assetlistItem.get_fieldValues()["StudentPC"] });
                }
                GetAllRoomsSchEvents(sections, neweventObject);

            },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error in getting organization records: " + args.get_message());
                    });
    }
        ,
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting organization records: " + args.get_message());
        });



}

function GetAllRoomsSchEvents(sections, neweventObject) {
    // Query for getting existing events from scheduleEvents list

    var currentid = 0;
    var scheduleEventListItems;
    var scheduleEventQuery;
    var schedulelistItemEnumerator;

    var scheduleList = web.get_lists().getByTitle('ScheduledEvents');

    if (sections.length > 0) {
        //Create a CAML query that retrieves the sites for this organization
        scheduleEventQuery = new SP.CamlQuery();
        //scheduleEventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ResourceID' LookupId='TRUE' /><Value Type='Lookup'>"
        //    + sections[i].Id
        //    + "</Value></Eq></Where></Query></View>");
        //scheduleEventQuery.set_viewXml("<View><Query><Where><And><Eq><FieldRef Name='RoomID' LookupId='TRUE' /><Value Type='Lookup'>"
        //    + sections[i].Id
        //    + "</Value></Eq><Eq><FieldRef Name='EventDate' /><Value Type='DateTime'>"
        //    + neweventObject[0].Start_Date
        //    + "</Value></Eq></And></Where></Query></View>");
        //scheduleEventQuery.set_viewXml("<View><Query><Where><And><Eq><FieldRef Name='ResourceID' /><Value Type='Lookup'>1</Value></Eq><And><Gt><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE' Type='DateTime'>2015-01-05T19:42:32Z</Value></Gt><Leq><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE' Type='DateTime'>2015-01-07T19:43:45Z</Value></Leq></And></And></Where></Query></View>");
        //var roomid = sections[i].Id;
        //scheduleEventQuery[i].set_viewXml("<View><Query><Where><And><Eq><FieldRef Name='ResourceID' /><Value Type='Lookup'>" + roomid + "</Value></Eq><And><Gt><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE' Type='DateTime'>2015-01-04T23:22:45Z</Value></Gt><Leq><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE' Type='DateTime'>2015-01-08T23:23:07Z</Value></Leq></And></And></Where></Query></View>");
        //<Where><Eq><FieldRef Name='StartDate1' /><Value Type='DateTime'>" + eventcurrentItem1.get_fieldValues()["EventDate"] + "</Value></Eq></Where> \
        //var startDate = "2015-01-04 23:22:45";
        var sd1 = new Date(neweventStartDatetime);
        var startDate = sd1.setDate(sd1.getDate() - 2);
        var formatsd1 = sd1.format("yyyy-MM-dd HH:mm:ss");
        var ed1 = new Date(neweventStartDatetime);
        var endDate = ed1.setDate(ed1.getDate() + 2);
        var formated1 = ed1.format("yyyy-MM-dd HH:mm:ss");
        //var endDate = "2015-01-09 23:23:07 ";
        var querystr1 = "<View><Query><Where><And><In><FieldRef Name='ResourceID' /><Values>";
        var querystr2 = "";
        var querystr3 = "</Values></In><And><Gt><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE'  Type='DateTime'>" + formatsd1 + "</Value></Gt><Leq><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE'  Type='DateTime'>" + formated1 + "</Value></Leq></And></And></Where></Query></View>";
        //var querystr3 = "</Values></In><And><Gt><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE' Type='DateTime'>2015-01-07T06:00:00Z</Value></Gt><Leq><FieldRef Name='StartDate1' /><Value IncludeTimeValue='TRUE' Type='DateTime'>2015-01-09T06:00:00Z</Value></Leq></And></And></Where></Query></View>";

        var queryIterateor = 0;
        while (queryIterateor < sections.length) {
            querystr2 += "<Value Type = 'Lookup'>" + sections[queryIterateor].Id + "</Value>";
            queryIterateor++;
        }
        var querystr4 = querystr1 + querystr2 + querystr3;
        scheduleEventQuery.set_viewXml(querystr4);
        scheduleEventListItems = scheduleList.getItems(scheduleEventQuery);
        context.load(scheduleEventListItems);

        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync
                // Iterate through the event list
                schedulelistItemEnumerator = scheduleEventListItems.getEnumerator();
                while (schedulelistItemEnumerator.moveNext()) {
                    var schedulelistItem = schedulelistItemEnumerator.get_current();
                    schevents.push({ Id: schedulelistItem.get_fieldValues()["EventID"].get_lookupValue(), roomId: schedulelistItem.get_fieldValues()["ResourceID"].get_lookupValue(), SchEventId: schedulelistItem.get_fieldValues()["ID"] });
                }

                if (schevents.length > 0) {
                    //// Query for getting details of the schedule event from EventList
                    var eventlist2 = web.get_lists().getByTitle('EventList');
                    var camlQuery = new SP.CamlQuery();
                    //camlQuery.set_viewXml("<View><Query><Where><IsNotNull><FieldRef Name='ID' /></IsNotNull></Where></Query></View>");
                    //camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Counter'>1</Value></Eq></Where></Query></View>");
                    //camlQuery.set_viewXml("<View><Query><Where><In><FieldRef Name = 'ID'/><Values>" +
                    //    "    <Value Type = 'Counter'>1</Value>" + "    <Value Type = 'Counter'>2</Value>" +
                    //    "</Values>  </In></Where></Query></View>");
                    var eventIterator = 0;
                    var str1 = "<View><Query><Where><In><FieldRef Name = 'ID'/><Values>";
                    var str2 = "";
                    var str3 = "</Values>  </In></Where></Query></View>";
                    while (eventIterator < schevents.length) {
                        str2 += "<Value Type = 'Counter'>" + schevents[eventIterator].Id + "</Value>";
                        eventIterator++;
                    }
                    var str4 = str1 + str2 + str3;

                    camlQuery.set_viewXml(str4);

                    var listItems = eventlist2.getItems(camlQuery);
                    context.load(listItems);
                    context.executeQueryAsync(


                          function () {
                              var eventlistItemEnumerator = listItems.getEnumerator();
                              while (eventlistItemEnumerator.moveNext()) {
                                  var eventlistItem = eventlistItemEnumerator.get_current();
                                  // Success returned from executeQueryAsync
                                  events.push({ Id: eventlistItem.get_fieldValues()["ID"], text: eventlistItem.get_fieldValues()["Title"], start_date: eventlistItem.get_fieldValues()["EventDate"].format("yyyy-MM-dd HH:mm"), end_date: eventlistItem.get_fieldValues()["EndDate"].format("yyyy-MM-dd HH:mm") });
                              }

                              var eventname = neweventObject[0].Title; // setting dafault value of new event
                              var dafaulteventid = neweventObject[0].Id; // setting dafault Id of new event
                              var dafaultdatetime = neweventObject[0].Start_Date.format("yyyy-MM-dd hh:mm") + " - " + neweventObject[0].End_Date.format("yyyy-MM-dd hh:mm");

                              scheduler.createTimelineView({
                                  name: "timeline",
                                  x_unit: "minute",
                                  x_date: "%H:%i",
                                  x_step: 60,
                                  x_size: 10,
                                  x_start: 8,
                                  x_length: 10,
                                  y_unit: sections,
                                  y_property: "section_id",
                                  dy: 80,
                                  render: "bar"
                              });
                              //===============
                              //Data loading
                              //===============
                              scheduler.config.lightbox.sections = [
                                  { name: "Event Name", height: 40, map_to: "text", default_value: eventname, type: "textarea", focus: true },
                                  { name: "Event Id", height: 40, map_to: "eventid", default_value: dafaulteventid, type: "textarea", focus: true },
                                  { name: "Room Name", height: 40, type: "select", options: sections, map_to: "section_id" },
                                  //{ name: "Event time Slot", type: "textarea", default_value: dafaultdatetime, map_to: "event_StartTime" },
                                  { name: "time", height: 72, type: "time", map_to: "auto" }
                              ];
                              //scheduler.init('scheduler_here', new Date(2014, 12, 07), "day");
                              var year = neweventObject[0].Start_Date.getFullYear();
                              var month = neweventObject[0].Start_Date.getMonth();
                              var day = neweventObject[0].Start_Date.getDate();
                              //day++; 
                              var hour = neweventObject[0].Start_Date.getHours();
                              var min = neweventObject[0].Start_Date.getMinutes();
                              scheduler.init('scheduler_here', new Date(year, month, day), "day");
                              var eventiterator = 0;


                              while (eventiterator < schevents.length) {
                                  var z = 0;
                                  var roomId = 0;
                                  roomId = schevents[eventiterator].roomId;
                                  z = 0;
                                  var roomkey = 0;
                                  while (z < sections.length) {
                                      if (sections[z].Id == roomId) {
                                          roomkey = sections[z].key;
                                          break;
                                      }
                                      z++;
                                  }
                                  z = 0;
                                  var eventnumber = 0;
                                  while (z < events.length) {
                                      if (schevents[eventiterator].Id != null) {
                                          if (events[z].Id == schevents[eventiterator].Id) {
                                              eventnumber = z;
                                              break;
                                          }
                                      } else {
                                          eventnumber = -1;
                                          break;
                                      }
                                      z++;
                                  }

                                  scheduler.parse([
                                      { eventid: events[eventnumber].Id, readonly: true, start_date: events[eventnumber].start_date, end_date: events[eventnumber].end_date, text: events[eventnumber].text, section_id: roomkey, event_StartTime: events[eventnumber].start_date, event_EndTime: events[eventnumber].end_date }
                                  ], "json");
                                  eventiterator++;
                              }
                              currentid++;


                              hideAllPanels();
                              if (eventOrganizer == true || siteRepresentative == true) {
                                  $('#EmployeeHome').show();
                              }


                              //$('.dhx_cal_next_button').trigger('click');
                              //$('.dhx_cal_next_button').hide();
                              //$('.dhx_cal_prev_button').hide();
                              //$('.dhx_cal_today_button').hide();

                              //scheduler.config.readonly = true;
                              //scheduler.Config.readonly_form = true;
                              //scheduler.enableDragAndDrop(false);

                              showSchuledEvents(schevents, events, sections, neweventObject);
                              $('#scheduler_here').show();
                              $("#timeline_tab").trigger("click");
                          },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Error in getting EventList records: " + args.get_message());
                        });


                } else {
                    DisplayEmptyCalender(sections, sections[currentid].Id, neweventObject);
                    currentid++;

                    hideAllPanels();
                    if (eventOrganizer == true || siteRepresentative == true) {
                        $('#EmployeeHome').show();
                    }

                    showSchuledEvents(schevents, events, sections, neweventObject);
                    $('#scheduler_here').show();
                    //$('.dhx_cal_next_button').trigger('click');
                    //$('.dhx_cal_next_button').hide();
                    $("#timeline_tab").trigger("click");
                }

            }, function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error in getting ScheduleEvents records: " + args.get_message());
            });
    } else {
        alert("Kindly create a room for the Site Name: " + neweventObject[0].SiteName);
    }
}

function saveNewSchEvent(t) {

    var eventlist1 = web.get_lists().getByTitle('EventList');
    var eventcurrentItem1 = eventlist1.getItemById(t.eventid);
    context.load(eventcurrentItem1);

    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            //eventObject.push({ Id: currentItem.get_fieldValues()["Id"], Start_Date: currentItem.get_fieldValues()["Start Time"], End_Date: currentItem.get_fieldValues()["End Time"], Site_Id: currentItem.get_fieldValues()["SiteLookup"].get_lookupValue() });
            var neweventObject = [{ Id: eventcurrentItem1.get_fieldValues()["ID"], Title: eventcurrentItem1.get_fieldValues()["Title"], Start_Date: eventcurrentItem1.get_fieldValues()["EventDate"], End_Date: eventcurrentItem1.get_fieldValues()["EndDate"], Site_Id: eventcurrentItem1.get_fieldValues()["SiteLookup"].get_lookupValue() }];


            var roomId = sections[t.section_id - 1].Id;

            var scheventList = web.get_lists().getByTitle('ScheduledEvents');
            var itemCreateInfo = new SP.ListItemCreationInformation();
            var scheventItem = scheventList.addItem(itemCreateInfo);
            //uniorgItem.set_item("Title", $('#addOrgName').val());
            scheventItem.set_item("StartDate1", neweventObject[0].Start_Date);
            scheventItem.set_item("EndDate1", neweventObject[0].End_Date);
            scheventItem.set_item("Status", "Approved");
            scheventItem.set_item("EventID", neweventObject[0].Id);
            scheventItem.set_item("ResourceID", roomId);
            scheventItem.update();

            context.load(scheventItem);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                schEventID = scheventItem.get_id();

                $(".dhx_cal_light").hide();
                $(".dhx_cal_cover").hide();
                $(".dhx_cal_event_line").hide();
                scheduleEvents(t.eventid);

            },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Failure " + args.get_message());
                });
        }, function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting EventList records: " + args.get_message());
        });
}
function DisplayEmptyCalender(sections, sectionId, neweventObject) {

    var eventname = neweventObject[0].Title; // setting dafault value of new event
    var dafaulteventid = neweventObject[0].Id; // setting dafault Id of new event
    var dafaultdatetime = neweventObject[0].Start_Date.format("yyyy-MM-dd hh:mm") + " - " + neweventObject[0].End_Date.format("yyyy-MM-dd hh:mm");

    //scheduler.clearAll();
    scheduler.createTimelineView({
        name: "timeline",
        x_unit: "minute",
        x_date: "%H:%i",
        x_step: 60,
        x_size: 10,
        x_start: 8,
        x_length: 10,
        y_unit: sections,
        y_property: "section_id",
        dy: 80,
        render: "bar"
    });


    //===============
    //Data loading
    //===============
    scheduler.config.lightbox.sections = [
                                  { name: "Event Name", height: 40, map_to: "text", default_value: eventname, type: "textarea", focus: true },
                                  { name: "Event Id", height: 40, map_to: "eventid", default_value: dafaulteventid, type: "textarea", focus: true },
                                  { name: "Room Name", height: 40, type: "select", options: sections, map_to: "section_id" },
                                  //{ name: "Event time Slot", type: "textarea", default_value: dafaultdatetime, map_to: "event_StartTime" },
                                  { name: "time", height: 72, type: "time", map_to: "auto" }
    ];

    var year = neweventObject[0].Start_Date.getFullYear();
    var month = neweventObject[0].Start_Date.getMonth();
    var day = neweventObject[0].Start_Date.getDate();
    scheduler.init('scheduler_here', new Date(year, month, day), "day");

    scheduler.parse([
        { start_date: "2013-01-06 09:00", end_date: "2013-01-06 12:00", text: "Just to show Empty room", section_id: sectionId }], "json");


    $("#timeline_tab").trigger("click");
}
function EmptyglobalArray() {
    sections = [];
    schevents = [];
    events = [];
}

function ModifyNewEvent(id) {

    $('.dhx_section_time').find('select').each(function () {
        $(this).prop('disabled', true);
    });

    var ev = scheduler.getEvent(id);

    var time = scheduler.formSection('time');
    var descr = scheduler.formSection('Event Name');

    if (ev.text == "New event") {
        var eventname = modifyeventObject[0].Title;
        //sets the value
        descr.setValue(eventname); //for sections that contain the only control
        descr.control.disabled = true;
        var formeventId = scheduler.formSection("Event Id");
        formeventId.control.disabled = true;

        var custom = scheduler.formSection("Room Name");
        custom.control.disabled = true;
        //time.setValue(null, { start_date: new Date(2015, 01, 08), end_date: new Date(2015, 01, 09) });
        //var startDate = neweventObject[0].Start_Date;
        var startyear = modifyeventObject[0].Start_Date.getFullYear();
        var startmonth = modifyeventObject[0].Start_Date.getMonth();
        var startday = modifyeventObject[0].Start_Date.getDate();
        var starthour = modifyeventObject[0].Start_Date.getHours();
        var startminute = modifyeventObject[0].Start_Date.getMinutes();

        var endyear = modifyeventObject[0].End_Date.getFullYear();
        var endmonth = modifyeventObject[0].End_Date.getMonth();
        var endday = modifyeventObject[0].End_Date.getDate();
        var endHour = modifyeventObject[0].End_Date.getHours();
        var endMinute = modifyeventObject[0].End_Date.getMinutes();
        //var endDate = neweventObject[0].End_Date;

        //var d = new Date(year, month, day, hours, minutes, seconds, milliseconds);

        time.setValue(null, { start_date: new Date(startyear, startmonth, startday, starthour, startminute), end_date: new Date(endyear, endmonth, endday, endHour, endMinute) });
        time.control.disabled = true;
        time.header.disabled = true;
    }
}



function deleteSceduledEvent(delEventid) {

    // Get all the Rooms associated with the siteId gotten in eventobject
    var getscheventsList = web.get_lists().getByTitle('ScheduledEvents');
    var getscheventsListItems;

    //Create a CAML query that retrieves the sites for this organization
    var delscheventsQuery = new SP.CamlQuery();
    delscheventsQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventID' LookupId='TRUE' /><Value Type='Lookup'>"
        + delEventid
        + "</Value></Eq></Where></Query></View>");
    getscheventsListItems = getscheventsList.getItems(delscheventsQuery);
    context.load(getscheventsListItems);

    var keyId = 0;
    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var getscheventslistItemEnumerator = getscheventsListItems.getEnumerator();
            while (getscheventslistItemEnumerator.moveNext()) {
                var getscheventslistItem = getscheventslistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //getschevents.push({ key: ++keyId, label: getscheventslistItem.get_fieldValues()["Title"], Id: getscheventslistItem.get_fieldValues()["ID"] });
                var scheventId = getscheventslistItem.get_id();
                deleteSchEvent(scheventId);
            }
        });
}




// This function deletes the event
function deleteSchEvent(scheventId) {
    list = web.get_lists().getByTitle("ScheduledEvents");
    var scheventItem = list.getItemById(scheventId);
    scheventItem.deleteObject();
}



// This function shows assets
function showSchuledEvents(schevents, events, sections, objNewEvent) {




    var dataroom = [];
    var hasEvents = false;
    var schEventTable = document.getElementById("AllSchEventlist");
    // Remove all nodes from the assetList <DIV> so we have a clean space to write to
    while (schEventTable.hasChildNodes()) {
        schEventTable.removeChild(schEventTable.lastChild);
    }
    // Iterate through the event list
    var i = 0;

    var query = window.location.search.substring(1);
    var parms = query.split('=');
    var eventId = 0;
    if (parms[0] == 'eventId') {
        eventId = parms[1];
    }



    var reservedSpace = 0;

    while (i < schevents.length) {
        if (schevents[i].Id == eventId) {
            dataroom.push(CreateSchEventsDataElement(i, schevents, events, sections));

            var roomId = 0;
            roomId = schevents[i].roomId;
            var z = 0;
            while (z < sections.length) {
                if (sections[z].Id == roomId) {
                    reservedSpace += sections[z].RoomCapacity;
                    break;
                }
                z++;
            }

            hasEvents = true;
        }
        i++;
    }

    EventCapped(reservedSpace, neweventObject);

    $('#AllSchEventDiv').html('<table cellpadding="0" style="cursor: pointer;" cellspacing="0" border="0" class="display" id="SchEventTable"></table>');
    var datat = $('#SchEventTable').dataTable({
        "data": dataroom,
        bProcessing: true,
        "fnDrawCallback": function () {
            $('#SchEventTable tbody .deleteassetEvent').on('click', function () {
                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();
                deleteSchEventforRoom(resultArray[0]);
            });
        },
        "columns": [
            { "title": "ID", "class": "editAssetEvent hideColumn" },
            { "title": "EventId", "class": "editAssetEvent hideColumn", "width": "5%" },
            { "title": "Event Name", "class": "editAssetEvent", "width": "30%" },
            { "title": "Start Time", "class": "editAssetEvent", "width": "25%" },
            { "title": "End Time", "class": "editAssetEvent", "width": "25%" },
            { "title": "Room Reserved", "class": "editAssetEvent", "width": "10%" },
            { "title": "", "class": "deleteassetEvent", "width": "10%" }
        ],
        language: {
            "search": "_INPUT_",
            "searchPlaceholder": "Search by Event Name or Room Reserved or Event Date and Time",
            "paginate": {
                "first": "<<",
                "last": ">>",
                "next": ">",
                "previous": "<"
            },
            "lengthMenu": "_MENU_",
            "info": "View _START_ - _END_ of _TOTAL_"
        },
        "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
        "initComplete": function (settings, json) {
            var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
            $(this).siblings(".pCustomTitle").html(pHeadingObj);
        },
        "pagingType": "input"
    });

    //$('#SchEventTable tbody .editAssetEvent').on('click', function () {
    //    var resultArray = $(this).closest('tr').find('td').map(function () {
    //        return $(this).text();
    //    }).get();
    //    scheduleEvents(resultArray[1]);
    //});

    //$('#SchEventTable tbody .deleteassetEvent').on('click', function () {
    //    var resultArray = $(this).closest('tr').find('td').map(function () {
    //        return $(this).text();
    //    }).get();
    //    deleteSchEventforRoom(resultArray[0]);
    //});

    if (!hasEvents) {
        var noEvents = document.createElement("div");
        noEvents.appendChild(document.createTextNode("There are no Rooms. You can add a new Room from below."));
        schEventTable.appendChild(noEvents);
    }
    $('#AllSchEvent').fadeIn(500, null);
}

function CreateSchEventsDataElement(i, schevents, events, sections) {
    var z = 0;
    var roomId = 0;
    roomId = schevents[i].roomId;
    z = 0;
    var roomName = 0;
    while (z < sections.length) {
        if (sections[z].Id == roomId) {
            roomName = sections[z].RoomName;
            break;
        }
        z++;
    }
    z = 0;
    var eventnumber = 0;
    while (z < events.length) {
        if (events[z].Id == schevents[i].Id) {
            eventnumber = z;
            break;
        }
        z++;
    }
    var data = [];
    data.push(schevents[i].SchEventId);
    data.push(events[eventnumber].Id);
    data.push(events[eventnumber].text);
    data.push(events[eventnumber].start_date);
    data.push(events[eventnumber].end_date);
    data.push(roomName);
    data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true"> Delete</span></button>');
    return data;
}

// This function deletes event when asset assigned to it is deleted 
function deleteSchEventforRoom(schEventId) {
    var schEventlist = web.get_lists().getByTitle("ScheduledEvents");
    var scheventItem = schEventlist.getItemById(schEventId);
    scheventItem.deleteObject();

    var query = window.location.search.substring(1);
    var parms = query.split('=');
    if (parms[0] == 'eventId') {
        var eventId = parms[1];

        scheduleEvents(eventId);

    }
}





function showEventsForAttendeeView() {
    //adding deciplin etc 
    var dataEventsAttendee = [];
    var errArea = document.getElementById("errAllEventsAttendee");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
    AllAttendeeControlHide();
    $('#AllEventsForAttendeeview').show();
    var eventQuery = new SP.CamlQuery();
    eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    list = web.get_lists().getByTitle('EventList');
    var listItems = list.getItems(eventQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("EventListAttendee");
            // Remove all nodes from the EventList <DIV> so we have a clean space to write to
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            // Iterate through the event list
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                dataEventsAttendee.push(CreateEventDataElement(listItem));
                hasEvents = true;
            }
            $('#EventDivAttendee').html('<table cellpadding="0" style="cursor: pointer;" cellspacing="0" border="0" class="display" id="evetnsTableAttendee"></table>');

            var datat = $('#evetnsTableAttendee').dataTable({
                "data": dataEventsAttendee,
                bDestroy: true,
                "fnDrawCallback": function () {
                    $('#evetnsTableAttendee tbody .rowEditEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEventDetails(resultArray[0]);

                    });
                    $('#evetnsTableAttendee tbody .schduleEvent').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();

                        if (resultArray[4] != 'N/A') {
                            ScheduleEventforEventID(resultArray[0]);
                        }
                    });
                    $('#evetnsTableAttendee tbody .eventshareAttendee').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        ShareOnFacebook(resultArray, "EmpView");
                        //ShareMyFeed(resultArray[1], heceventsappUrl, heceventsappPicUrl, 'HEC Event Management System', 'HEC event management system is going to share a post on facebook', 'Share this post');
                        //  shareOnfacebook();

                    });
                    $('#evetnsTableAttendee tbody .emailEventAttendee').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        SendEmaildialog(resultArray[1], resultArray[2], resultArray[3]);

                    });
                    $('#evetnsTableAttendee tbody .EventBill').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        BillChargesforEventID(resultArray, 'EmpView');
                    });

                    $('#evetnsTableAttendee tbody .eventReoccurance').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        eventId_ReOccurance = resultArray[0];
                        EventReOccuranceDialog();
                    });

                    $('#evetnsTableAttendee tbody .htmlBanner').on('click', function (e) {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        HtmlBanner(resultArray, 'EmpView');
                    });

                }
                ,
                "columns": [
                    { "title": "ID", "class": "rowEditEvent hideColumn" },
                    { "title": "Event Name", "class": "rowEditEvent" },
                    { "title": "Start Time", "class": "rowEditEvent" },
                    { "title": "End Time", "class": "rowEditEvent" },
                    { "title": "Reserve Space", "class": "schduleEvent" },
                    { "title": "Recurrence", "width": "5%" },
                    { "title": "Bill", "class": "EventBill" },
                    { "title": "Invite Attendees", "class": "emailEventAttendee" },
                    { "title": "Publish Event", "class": "eventshareAttendee" },
                    { "title": "Banner", "width": "5%" },
                    { "title": "Status" },
                    { "title": "SiteId", "class": "hideColumn" }

                ],
                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search by Event Name or Event Status or Event Date Time",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });
            //$('#evetnsTableAttendee tbody .schduleEvent').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    ScheduleEventforEventID(resultArray[0]);
            //});
            //$('#evetnsTableAttendee tbody .rowEditEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    showEventDetails(resultArray[0]);

            //});
            //$('#evetnsTableAttendee tbody .schduleEvent').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    ScheduleEventforEventID(resultArray[0]);
            //});
            //$('#evetnsTableAttendee tbody .eventshareAttendee').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    //ShareMyFeed(resultArray[1], heceventsappUrl, heceventsappPicUrl, 'HEC Event Management System', 'HEC event management system is going to share a post on facebook', 'Share this post');
            //    //  shareOnfacebook();

            //});
            //$('#evetnsTableAttendee tbody .emailEventAttendee').on('click', function (e) {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    SendEmaildialog(resultArray[1], resultArray[2], resultArray[3]);

            //});

            if (!hasEvents) {
                var noEvents = document.createElement("div");
                noEvents.appendChild(document.createTextNode("There are no events. You can add a new event from below."));
                eventTable.appendChild(noEvents);
            }
            $('#AllEventsForAttendeeview').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get events. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            $('#EventListAttendee').fadeIn(500, null);
        });
}


function showSiteEventsForAttendeeView() {


    var errArea = document.getElementById("errAllSiteEventsAttendee");

    // Remove all nodes from the errAllEvents <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    AllAttendeeControlHide();
    $('#AllSiteEventsForAttendeeview').show();

    var _SiteRepIdlst;
    var _siteIdlst;
    var unireplist;

    var eventlst = [];
    var uniRep = new SP.CamlQuery();
    uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    unireplist = web.get_lists().getByTitle('SiteRepresentatives');
    var unireplistItems = unireplist.getItems(uniRep);
    context.load(unireplistItems);
    context.executeQueryAsync(
          function () {

              var listItemEnumerator = unireplistItems.getEnumerator();
              while (listItemEnumerator.moveNext()) {
                  var listItem = listItemEnumerator.get_current();
                  _SiteRepIdlst += "<Value Type='Counter'>" + listItem.get_fieldValues()["SiteLookup"].get_lookupValue() + "</Value>";
              }
              if (_SiteRepIdlst == null || _SiteRepIdlst == "")
                  _SiteRepIdlst = "<Value Type='Counter'>0</Value>";


              //var tbodyelemnt = document.createElement("tbody");
              //var siteList = document.getElementById("AllSitesAttendee");

              var siteQuery = new SP.CamlQuery();
              siteQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _SiteRepIdlst + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
              list = web.get_lists().getByTitle('PSites');
              var sitelistItems = list.getItems(siteQuery);
              context.load(sitelistItems);
              context.executeQueryAsync(
                  function () {
                      // Success returned from executeQueryAsync
                      var sitelistItemEnumerator = sitelistItems.getEnumerator();
                      while (sitelistItemEnumerator.moveNext()) {
                          var sitelistItem = sitelistItemEnumerator.get_current();
                          _siteIdlst += "<Value Type='Counter'>" + sitelistItem.get_fieldValues()["ID"] + "</Value>";
                          //sitesData.push(CreateSitesDataElement(sitelistItem));
                          //hasSites = true;
                      }
                      if (_siteIdlst == null || _siteIdlst == "")
                          _siteIdlst = "<Value Type='Counter'>0</Value>";

                      var eventQuery = new SP.CamlQuery();


                      eventQuery.set_viewXml("<View><Query><Where><In><FieldRef Name='SiteLookup'  LookupId='TRUE'/><Values>" + _siteIdlst + "</Values></In></Where></Query></View>");


                      //eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='SiteLookup'  LookupId='TRUE' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
                      list = web.get_lists().getByTitle('EventList');
                      var listItems = list.getItems(eventQuery);
                      context.load(listItems);
                      context.executeQueryAsync(
                          function () {
                              // Success returned from executeQueryAsync
                              var eventTable = document.getElementById("SiteEventListAttendee");
                              // Remove all nodes from the EventList <DIV> so we have a clean space to write to
                              while (eventTable.hasChildNodes()) {
                                  eventTable.removeChild(eventTable.lastChild);
                              }
                              // Iterate through the event list
                              var eventlistItemEnumerator = listItems.getEnumerator();
                              while (eventlistItemEnumerator.moveNext()) {
                                  var eventlistItem = eventlistItemEnumerator.get_current();
                                  var eventid = eventlistItem.get_fieldValues()["ID"];

                                  eventlst.push({ ID: eventlistItem.get_fieldValues()["ID"], Title: eventlistItem.get_fieldValues()["Title"], EventDate: eventlistItem.get_fieldValues()["EventDate"], EndDate: eventlistItem.get_fieldValues()["EndDate"], SiteLookupTitle: eventlistItem.get_fieldValues()["SiteLookupTitle"], RoomNames: "", EventStatus: eventlistItem.get_fieldValues()["EventStatus"] });
                              }

                              if (eventlst.length > 0) {
                                  var eventIterator = 0;
                                  Global_Counter_FoEvents = eventlst.length - 1;
                                  getSchEventWithRooms(eventlst, eventIterator);
                              } else {
                                  SiteEventDataTable(eventlst);
                              }
                              //SiteEventDataTable(eventlst,);


                              //                                dataEventsAttendee.push(CreatSiteEventsDataElement(eventlistItem, reservedRooms));
                              //    hasEvents = true;
                              //}


                          },
                    function (sender, args) {

                    });
                  },
        function (sender, args) {

        });
          },
        function (sender, args) {

        });
}


function getSchEventWithRooms(eventlst, eventIterator) {
    var roomIdlst = "";
    var reservedRooms = "";

    var schEventlist = web.get_lists().getByTitle("ScheduledEvents");
    var schEventcamlQuery = new SP.CamlQuery();

    schEventcamlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventID' LookupId='TRUE' /><Value Type='Lookup'>"
        + eventlst[eventIterator].ID
        + "</Value></Eq></Where></Query></View>");
    var schEventlistItems = schEventlist.getItems(schEventcamlQuery);
    context.load(schEventlistItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var schEventlistEnumerator = schEventlistItems.getEnumerator();
            while (schEventlistEnumerator.moveNext()) {
                var schEventlistItem1 = schEventlistEnumerator.get_current();
                //lstSchRooms.push({ RoomId: schEventlistItem1.get_fieldValues()["ResourceID"].get_lookupValue(), Id: schEventlistItem1.get_fieldValues()["ID"] });
                //ReservedRooms += schEventlistItem1.get_fieldValues()["ResourceID"].get_lookupValue()
                roomIdlst += "<Value Type='Counter'>" + schEventlistItem1.get_fieldValues()["ResourceID"].get_lookupValue() + "</Value>";
            }
            if (roomIdlst == null || roomIdlst == "")
                roomIdlst = "<Value Type='Counter'>0</Value>";


            //var tbodyelemnt = document.createElement("tbody");
            //var siteList = document.getElementById("AllSitesAttendee");

            var resourceQuery = new SP.CamlQuery();
            //siteQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _SiteRepIdlst + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
            resourceQuery.set_viewXml("<View><Query><Where><In><FieldRef Name='ID'  /><Values>" + roomIdlst + "</Values></In></Where></Query></View>");
            list = web.get_lists().getByTitle('Resources');
            var roomslistItems = list.getItems(resourceQuery);
            context.load(roomslistItems);
            context.executeQueryAsync(
                function () {
                    //Success returned from executeQueryAsync
                    var roomslistEnumerator = roomslistItems.getEnumerator();
                    while (roomslistEnumerator.moveNext()) {
                        var roomlistItem1 = roomslistEnumerator.get_current();
                        //lstSchRooms.push({ RoomId: schEventlistItem1.get_fieldValues()["ResourceID"].get_lookupValue(), Id: schEventlistItem1.get_fieldValues()["ID"] });
                        reservedRooms += roomlistItem1.get_fieldValues()["Title"] + ";";
                        //roomIdlst += "<Value Type='Counter'>" + schEventlistItem1.get_fieldValues()["ResourceID"].get_lookupValue() + "</Value>";
                        eventlst[eventIterator].RoomNames = reservedRooms;

                    }
                    if (Global_Counter_FoEvents > 0) {
                        Global_Counter_FoEvents--;
                        eventIterator++;
                        //SaveReOccuranceEventToList(_ReOccuranceEventsData, eventid, EventReOccurIterator);
                        getSchEventWithRooms(eventlst, eventIterator);

                    } else {
                        Global_Counter_FoEvents--;
                    }
                    if (Global_Counter_FoEvents < 0) {

                        SiteEventDataTable(eventlst);
                        //ModifyEventAsRecurring(eventid);
                    }
                });
        },
        function (sender, args) {

        });
}

function SiteEventDataTable(eventlst) {
    var hasSiteEvents = false;
    var dataSiteEventsAttendee = [];
    for (var i = 0; i < eventlst.length; i++) {
        dataSiteEventsAttendee.push(CreatSiteEventsDataElement(eventlst, i));
        hasSiteEvents = true;
    }

    var eventTable = document.getElementById("SiteEventListAttendee");
    // Remove all nodes from the EventList <DIV> so we have a clean space to write to
    while (eventTable.hasChildNodes()) {
        eventTable.removeChild(eventTable.lastChild);
    }

    $('#SiteEventDivAttendee').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="SiteEventsTableAttendee"></table>');

    var datat = $('#SiteEventsTableAttendee').dataTable({
        "data": dataSiteEventsAttendee,
        bDestroy: true,
        "fnDrawCallback": function () {
            $('#SiteEventsTableAttendee tbody .btnapproveEvent').on('click', function (e) {
                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();
                UpdateEventStatus(resultArray[0], 'EventList', 'EventStatus', 'Approved');
                Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Event [Name:<b>" + resultArray[1] + "</b>] has been Aprroved. Contact Administrator for details.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
            });
            $('#SiteEventsTableAttendee tbody .btnrejectEvent').on('click', function (e) {
                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();
                UpdateEventStatus(resultArray[0], 'EventList', 'EventStatus', 'Rejected');
                Emailing(resultArray[2], useremail, 'HEC EMS Alert', "Dear User,<br/><br/><br/>Event [Name:<b>" + resultArray[1] + "</b>] has been Rejected. Contact Adminstrator for details.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
            });

        }
        ,
        "columns": [
            { "title": "ID", "class": "rowEditEvent hideColumn" },
            { "title": "Event Name", "class": "rowEditEvent" },
            { "title": "Venue", "class": "rowEditEvent" },
            { "title": "Start Time", "class": "rowEditEvent" },
            { "title": "End Time", "class": "rowEditEvent" },
            { "title": "Status" },
            { "title": "Action" }

        ],
        language: {
            "search": "_INPUT_",
            "searchPlaceholder": "Search by Event Name or Event Status or Event Date Time",
            "paginate": {
                "first": "<<",
                "last": ">>",
                "next": ">",
                "previous": "<"
            },
            "lengthMenu": "_MENU_",
            "info": "View _START_ - _END_ of _TOTAL_"
        },
        "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
        "initComplete": function (settings, json) {
            var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
            $(this).siblings(".pCustomTitle").html(pHeadingObj);
        },
        "pagingType": "input"
    });


    if (!hasSiteEvents) {
        var noEvents = document.createElement("div");
        noEvents.appendChild(document.createTextNode("There are no Site events."));
        eventTable.appendChild(noEvents);
    }
    $('#AllSiteEventsForAttendeeview').fadeIn(500, null);

}

function showUniOrgAttendee() {
    var repuniIds = [];
    var datauni = [];
    var _repIdes = "";
    var errArea = document.getElementById("errAllUniOrgForAttendeeview");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasUniOrg = false;
    AllAttendeeControlHide();
    $('#AllUniOrgForAttendeeview').show();
    var uniRep = new SP.CamlQuery();
    uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    unireplist = web.get_lists().getByTitle('Representative');
    var unireplistItems = unireplist.getItems(uniRep);
    context.load(unireplistItems);
    context.executeQueryAsync(
          function () {

              var listItemEnumerator = unireplistItems.getEnumerator();
              while (listItemEnumerator.moveNext()) {
                  var listItem = listItemEnumerator.get_current();
                  _repIdes += "<Value Type='Counter'>" + listItem.get_fieldValues()["OrgLookup"].get_lookupValue() + "</Value>";
              }
              if (_repIdes == null || _repIdes == "")
                  _repIdes = "<Value Type='Counter'>0</Value>";
              var eventQuery = new SP.CamlQuery();
              eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
              list = web.get_lists().getByTitle('Organizations');
              var listItems = list.getItems(eventQuery);
              context.load(listItems);
              context.executeQueryAsync(
                  function () {
                      // Success returned from executeQueryAsync
                      var uniorgTable = document.getElementById("uniorgListForAttendeeview");
                      // Remove all nodes from the orgList <DIV> so we have a clean space to write to
                      while (uniorgTable.hasChildNodes()) {
                          uniorgTable.removeChild(uniorgTable.lastChild);
                      }

                      // Iterate through the org list
                      var listItemEnumerator = listItems.getEnumerator();
                      while (listItemEnumerator.moveNext()) {
                          var listItem = listItemEnumerator.get_current();
                          //tbodyelemnt.appendChild(CreatElement(listItem));
                          datauni.push(CreateUniOrgDataElement(listItem));

                          hasUniOrg = true;
                      }
                      $('#uniOrgDivForAttendeeview').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="cell-border compact hover strip" id="uniOrgTableAttendeeview"></table>');

                      var datat = $('#uniOrgTableAttendeeview').dataTable({
                          "data": datauni,
                          bDestroy: true,
                          "fnDrawCallback": function () {
                              $('#uniOrgTableAttendeeview tbody').on('click', 'tr', function () {
                                  var id = datat.fnGetData(this)[0];
                                  showEditUniOrg(id);
                              });
                          },
                          "columns": [
                              { "title": "ID", "class": "hideColumn" },
                              { "title": "Name" },
                              { "title": "Type" },
                              { "title": " Description" },
                              { "title": "Website" },
                              { "title": "Phone" },
                              { "title": "Status" }
                          ],

                          language: {
                              "search": "_INPUT_",
                              "searchPlaceholder": "Search by any attribute i.e Name Description or Type of Organization e.t.c",
                              "paginate": {
                                  "first": "<<",
                                  "last": ">>",
                                  "next": ">",
                                  "previous": "<"
                              },
                              "lengthMenu": "_MENU_",
                              "info": "View _START_ - _END_ of _TOTAL_"
                          },
                          "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                          "initComplete": function (settings, json) {
                              var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                              $(this).siblings(".pCustomTitle").html(pHeadingObj);
                          },
                          "pagingType": "input"
                      });
                      //$('#uniOrgTableAttendeeview tbody').on('click', 'tr', function () {
                      //    var id = datat.fnGetData(this)[0];
                      //    showEditUniOrg(id);
                      //});


                      //if (!hasUniOrg) {
                      //    var noUniOrg = document.createElement("div");
                      //    noUniOrg.appendChild(document.createTextNode("There are no University/Organization registered. You can add a new record from below."));
                      //    uniorgTable.appendChild(noUniOrg);
                      //}
                      $('#AllUniOrgForAttendeeview').fadeIn(500, null);
                  },
                  function (sender, args) {
                      // Failure returned from executeQueryAsync
                      var divMessage = document.createElement("DIV");
                      divMessage.setAttribute("style", "padding:5px;");
                      divMessage.appendChild(document.createTextNode("Failed to get University and Organization Records. Error: " + args.get_message()));
                      errArea.appendChild(divMessage);
                      $('#uniorgListForAttendeeview').fadeIn(500, null);
                  });
          }, function (sender, args) {
              var divMessage = document.createElement("DIV");
              divMessage.setAttribute("style", "padding:5px;");
              divMessage.appendChild(document.createTextNode("Failed to get University and Organization Records. Error: " + args.get_message()));
              errArea.appendChild(divMessage);
              $('#uniorgListForAttendeeview').fadeIn(500, null);
          }
          );

}
function showSitesAttendee() {
    var _repIdes = "";
    var sitesData = [];
    var errArea = document.getElementById("errAllSitesAttendee");
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasSites = false;
    AllAttendeeControlHide();
    $('#AllSitesAttendee').show();

    var uniRep = new SP.CamlQuery();
    uniRep.set_viewXml("<View><Query><Where><Eq><FieldRef Name='RepEmail' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    unireplist = web.get_lists().getByTitle('SiteRepresentatives');
    var unireplistItems = unireplist.getItems(uniRep);
    context.load(unireplistItems);
    context.executeQueryAsync(
          function () {

              var listItemEnumerator = unireplistItems.getEnumerator();
              while (listItemEnumerator.moveNext()) {
                  var listItem = listItemEnumerator.get_current();
                  _repIdes += "<Value Type='Counter'>" + listItem.get_fieldValues()["SiteLookup"].get_lookupValue() + "</Value>";
              }
              if (_repIdes == null || _repIdes == "")
                  _repIdes = "<Value Type='Counter'>0</Value>";


              var tbodyelemnt = document.createElement("tbody");
              var siteList = document.getElementById("AllSitesAttendee");

              var eventQuery = new SP.CamlQuery();
              eventQuery.set_viewXml("<View><Query><Where><Or><In><FieldRef Name='ID' /><Values>" + _repIdes + "</Values></In><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Or></Where></Query></View>");
              list = web.get_lists().getByTitle('PSites');
              var listItems = list.getItems(eventQuery);
              context.load(listItems);
              context.executeQueryAsync(
                  function () {
                      // Success returned from executeQueryAsync
                      var siteTable = document.getElementById("PSites");
                      //Remove all nodes from the SiteList <DIV> so we have a clean space to write to
                      while (siteTable.hasChildNodes()) {
                          siteTable.removeChild(siteTable.lastChild);
                      }
                      var listItemEnumerator = listItems.getEnumerator();
                      while (listItemEnumerator.moveNext()) {
                          var listItem = listItemEnumerator.get_current();
                          sitesData.push(CreateSitesDataElement(listItem));
                          hasSites = true;
                      }
                      $('#pSitesDivAttendee').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="sitesTableAttendee"></table>');
                      var datat = $('#sitesTableAttendee').dataTable({
                          "data": sitesData,
                          bProcessing: true,
                          "fnDrawCallback": function () {
                              $('#sitesTableAttendee tbody').on('click', 'tr', function () {
                                  var id = datat.fnGetData(this)[0];
                                  showEditSite(id);
                              });
                          },
                          "columns": [
                              { "title": "ID", "class": "hideColumn" },
                              { "title": "Site Name" },
                              { "title": "Organization Name", "class": "editSiteclass" },
                              { "title": "Site Address" },
                              { "title": "Phone" },
                              { "title": "Site Capacity" },
                              { "title": "Status" }
                          ],

                          language: {
                              "search": "_INPUT_",
                              "searchPlaceholder": "Search by any attribute i.e Name or Address or Site Capacity etc. ",
                              "paginate": {
                                  "first": "<<",
                                  "last": ">>",
                                  "next": ">",
                                  "previous": "<"
                              },
                              "lengthMenu": "_MENU_",
                              "info": "View _START_ - _END_ of _TOTAL_"
                          },
                          "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                          "initComplete": function (settings, json) {
                              var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                              $(this).siblings(".pCustomTitle").html(pHeadingObj);
                          },
                          "pagingType": "input"
                      });
                      //$('#sitesTableAttendee tbody').on('click', 'tr', function () {
                      //    var id = datat.fnGetData(this)[0];
                      //    showEditSite(id);
                      //});

                      if (!hasSites) {
                          var noSites = document.createElement("div");
                          noSites.appendChild(document.createTextNode("There are no sites. You can add a new site from below."));
                          siteTable.appendChild(noSites);
                      }
                      $('#AllSitesAttendee').fadeIn(500, null);
                  },
                  function (sender, args) {
                      // Failure returned from executeQueryAsync
                      var divMessage = document.createElement("DIV");
                      divMessage.setAttribute("style", "padding:5px;");
                      divMessage.appendChild(document.createTextNode("Failed to get sites. Error: " + args.get_message()));
                      errArea.appendChild(divMessage);
                      $('#SiteListAttendee').fadeIn(500, null);
                  });
          }, function (sender, args) {
              var divMessage = document.createElement("DIV");
              divMessage.setAttribute("style", "padding:5px;");
              divMessage.appendChild(document.createTextNode("Failed to get sites. Error: " + args.get_message()));
              errArea.appendChild(divMessage);
              $('#SiteListAttendee').fadeIn(500, null);
          }
          );
}
function showTrainingAssetsAttendee() {
    var dataroom = [];
    var errArea = document.getElementById("errAllAssetsAttendee");
    // Remove all nodes from the errAllAssets <DIV> so we have a clean space to write to in case of errors
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }
    var hasEvents = false;
    AllAttendeeControlHide();
    $('#AllAssetsAttendee').show();


    //var eventQuery = new SP.CamlQuery();
    //eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    //list = web.get_lists().getByTitle('Resources');
    //var listItems = list.getItems(eventQuery);
    //context.load(listItems);
    //context.executeQueryAsync(

    var eventQuery = new SP.CamlQuery();
    eventQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='CustomCreatedBy' /><Value Type='Text'>" + useremail + "</Value></Eq></Where></Query></View>");
    list = web.get_lists().getByTitle('Resources');
    var listItems = list.getItems(eventQuery);
    context.load(listItems);
    context.executeQueryAsync(

        function () {
            // Success returned from executeQueryAsync
            var eventTable = document.getElementById("assetListAttendee");
            // Remove all nodes from the assetList <DIV> so we have a clean space to write to
            while (eventTable.hasChildNodes()) {
                eventTable.removeChild(eventTable.lastChild);
            }
            // Iterate through the event list
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                dataroom.push(CreateAssetsDataElement(listItem));
                hasEvents = true;
            }
            $('#assetsDivAttendee').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="assetsTableAttendee"></table>');
            var datat = $('#assetsTableAttendee').dataTable({
                "data": dataroom,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#assetsTableAttendee tbody .editAssetEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        showEditAssets(resultArray[0]);
                    });

                    $('#assetsTableAttendee tbody .deleteassetEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        deleteEventforAsset(resultArray[0]);
                    });
                },
                "columns": [
                    { "title": "ID", "class": "editAssetEvent hideColumn" },
                    { "title": "Room Name", "class": "editAssetEvent" },
                { "title": "Site Name", "class": "editAssetEvent" },
                    { "title": "Room Charges", "class": "editAssetEvent" },
                    { "title": "Room Capacity", "class": "editAssetEvent" },
                    { "title": "Charge Per Person", "class": "editAssetEvent" },
                    { "title": "Delete", "class": "deleteassetEvent" }
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search by any attribute i.e Room Name or Room Capacity etc.",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_",
                    "sInfoEmpty": "Showing 0 to 0 of 0 entries"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });

            //$('#assetsTableAttendee tbody .editAssetEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    showEditAssets(resultArray[0]);
            //});

            //$('#assetsTableAttendee tbody .deleteassetEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    deleteEventforAsset(resultArray[0]);
            //});

            //if (!hasEvents) {
            //    var noEvents = document.createElement("div");
            //    noEvents.appendChild(document.createTextNode("There are no Rooms. You can add a new Room from below."));
            //    eventTable.appendChild(noEvents);
            //}
            $('#AllAssetsAttendee').fadeIn(500, null);
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            var divMessage = document.createElement("DIV");
            divMessage.setAttribute("style", "padding:5px;");
            divMessage.appendChild(document.createTextNode("Failed to get assets. Error: " + args.get_message()));
            errArea.appendChild(divMessage);
            $('#AssetsListAttendee').fadeIn(500, null);
        });
}

function AllAttendeeControlHide() {
    $('#EventsFeedback').hide();
    $('#AllEnrllEvents').hide();
    $('#OtherEvents').hide();
    $('#WaitingEvents').hide();
    $('#AllRoleRequest').hide();
    $('#AllEventTableDiv').hide();
    $('#AllAssetsAttendee').hide();
    $('#AllSitesAttendee').hide();
    $('#AllUniOrgForAttendeeview').hide();
    $('#AllEventsForAttendeeview').hide();
    $('#AllSiteEventsForAttendeeview').hide();
    $('#calenderLoader').hide();
    $('#scheduler_here').hide();
    $('#AllSchEvent').hide();
    $('#EventCapped').hide();
    $('#AllEventOrg').hide();
    $("#PrintbillCharges").hide();
    $("#AllAppUsersVerification").hide();
}



// This function shows manage Requests
function ManageRequests() {

    $('#myRoleRequestDiv').show();
    hideAllPanels();

    var eventOrg = [];
    var rep = [];
    var hasOrgrequests = false;
    var hasreprequests = false;

    var eventOrgTable = document.getElementById("AllEventOrglist");
    while (eventOrgTable.hasChildNodes()) {
        eventOrgTable.removeChild(eventOrgTable.lastChild);
    }

    var allrepTable = document.getElementById("AllReplist");
    while (allrepTable.hasChildNodes()) {
        allrepTable.removeChild(allrepTable.lastChild);
    }

    var userrolelist = web.get_lists().getByTitle('UserRoles');
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var userrolelistItems = userrolelist.getItems(camlQuery);
    context.load(userrolelistItems);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            var userrolelistItemEnumerator = userrolelistItems.getEnumerator();
            while (userrolelistItemEnumerator.moveNext()) {
                var userrolelistItem = userrolelistItemEnumerator.get_current();
                if (userrolelistItem.get_fieldValues()["EventOrganizer"] == true) {
                    eventOrg.push(CreateUserRolesDataElement('org', userrolelistItem));
                    hasOrgrequests = true;
                }
                if (userrolelistItem.get_fieldValues()["Rep"] == true) {
                    rep.push(CreateUserRolesDataElement('rep', userrolelistItem));
                    hasreprequests = true;
                }
            }

            //------------------------------------------------------------------------------------------

            $('#AllEventOrgDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="EventOrgTable"></table>');
            var data = $('#EventOrgTable').dataTable({
                "data": eventOrg,
                bProcessing: true,
                "fnDrawCallback": function () {
                    $('#EventOrgTable tbody .editAssetEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        // scheduleEvents(resultArray[1]);
                    });

                    $('#EventOrgTable tbody .Request').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        ModifyManageRequestStatus(resultArray[0], resultArray[2], resultArray[4]);
                    });

                },
                "columns": [
                    { "title": "ID", "class": "editAssetEvent hideColumn", "width": "0%" },
                    { "title": "Requested by Email", "class": "editAssetEvent", "width": "30%" },
                    { "title": "Request", "class": "editAssetEvent", "width": "25%" },
                    { "title": "Status", "class": "editAssetEvent", "width": "25%" },
                    { "title": "", "class": "Request", "width": "15%" }
                ],

                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search Requests by Email or Request Status etc.",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });


            //if (!hasOrgrequests) {
            //    var org = document.createElement("div");
            //    org.appendChild(document.createTextNode("There is no event organizer request."));
            //    eventOrgTable.appendChild(org);

            //}


            $('#AllEventOrg').fadeIn(500, null);




            //------------------------------------------------------------------------------------------

            $('#AllRepDiv').html('<table cellpadding="0" cellspacing="0" border="0" style="cursor: pointer;" class="display" id="RepTable"></table>');
            var datat = $('#RepTable').dataTable({
                "data": rep,
                bProcessing: true,
                "columns": [
                    { "title": "ID", "class": "editAssetEvent hideColumn", "width": "0%" },
                    { "title": "Requested by Email", "class": "editAssetEvent", "width": "30%" },
                    { "title": "Request", "class": "editAssetEvent", "width": "25%" },
                    { "title": "Status", "class": "editAssetEvent", "width": "25%" },
                    { "title": "", "class": "Request", "width": "15%" }
                ],
                "fnDrawCallback": function () {
                    $('#RepTable tbody .editAssetEvent').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        //scheduleEvents(resultArray[1]);

                    });

                    $('#RepTable tbody .Request').on('click', function () {
                        var resultArray = $(this).closest('tr').find('td').map(function () {
                            return $(this).text();
                        }).get();
                        ModifyManageRequestStatus(resultArray[0], resultArray[2], resultArray[4]);
                    });
                },
                language: {
                    "search": "_INPUT_",
                    "searchPlaceholder": "Search by Email Request or Status ",
                    "paginate": {
                        "first": "<<",
                        "last": ">>",
                        "next": ">",
                        "previous": "<"
                    },
                    "lengthMenu": "_MENU_",
                    "info": "View _START_ - _END_ of _TOTAL_"
                },
                "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
                "initComplete": function (settings, json) {
                    var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
                    $(this).siblings(".pCustomTitle").html(pHeadingObj);
                },
                "pagingType": "input"
            });

            //$('#RepTable tbody .editAssetEvent').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    //scheduleEvents(resultArray[1]);

            //});

            //$('#RepTable tbody .Request').on('click', function () {
            //    var resultArray = $(this).closest('tr').find('td').map(function () {
            //        return $(this).text();
            //    }).get();
            //    ModifyManageRequestStatus(resultArray[0], resultArray[2], resultArray[4]);
            //});




            //if (!hasreprequests) {
            //    var repdiv = document.createElement("div");
            //    repdiv.appendChild(document.createTextNode("There is no Site representation Request."));
            //    allrepTable.appendChild(repdiv);
            //}
            $('#AllRep').fadeIn(500, null);


            //userrolelistItem.get_fieldValues()["EventLocal"]
        },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Failure " + args.get_message());
                });




}


function ModifyManageRequestStatus(userRoleId, request, requestStatus) {
    var status;
    if (requestStatus == "Approve") {
        status = "Approved";
    }
    else if (requestStatus == "Reject") {
        status = "Rejected";
    }

    var userRoleAppList = web.get_lists().getByTitle('UserRoles');
    var userRoleAppcurrentItem1 = userRoleAppList.getItemById(userRoleId);
    context.load(userRoleAppcurrentItem1);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            if (request == "Event Organizer") {
                userRoleAppcurrentItem1.set_item("EventOrganizerStatus", status);
            }
            else if (request == "Site Representative") {
                userRoleAppcurrentItem1.set_item("RepStatus", status);
            }

            userRoleAppcurrentItem1.update();
            context.load(userRoleAppcurrentItem1);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                ManageRequests();
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });

}

function AssignUserRoles(objuser) {

    $('#superadmin').prop("checked", false);
    $('#admin').prop("checked", false);
    $('#eventOrganizer').prop("checked", false);
    $('#EventOrgStatus').val('');
    $('#rep').prop("checked", false);
    $('#repStatus').val('');

    getUserroles(objuser[4]);


    $('#userEmail').val(objuser[4]);

    $('#AddUserRoles').dialog({
        width: 'auto',
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        closeText: "hide"
    });
}

// This function clears the inputs on the add asset form and cancels it
function cancelAddUserRoles() {
    //$('#addOrgName').val("");
    //$('#addAddress').val("");
    //$('#addPhone').val("");
    //$('#addDescription').val("");
    //initializePeoplePicker('peoplePickerDiv2');
    $('#AddUserRoles').dialog("close");
}


function saveUserRoles() {
    var userRoleId = 0;
    userRoleId = $('#userRoleId').val();

    if (userRoleId > 0) {
        //var flag = $('#superadmin:checked').length;
        var userRoleAppList = web.get_lists().getByTitle('UserRoles');
        var userRoleAppcurrentItem1 = userRoleAppList.getItemById(userRoleId);
        context.load(userRoleAppcurrentItem1);
        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync

                userRoleAppcurrentItem1.set_item("Title", $('#Email').val());

                if ($('#chksuperadmin:checked').length == 1) {
                    userRoleAppcurrentItem1.set_item("SuperAdmin", 'true');
                } else {
                    userRoleAppcurrentItem1.set_item("SuperAdmin", 'false');
                }

                if ($('#chkadmin:checked').length == 1) {
                    userRoleAppcurrentItem1.set_item("Admin", 'true');
                } else {
                    userRoleAppcurrentItem1.set_item("Admin", 'false');
                }

                if ($('#chkeventOrganizer:checked').length == 1) {
                    userRoleAppcurrentItem1.set_item("EventOrganizer", 'true');
                    userRoleAppcurrentItem1.set_item("EventOrganizerStatus", 'Approved');
                } else {
                    userRoleAppcurrentItem1.set_item("EventOrganizer", 'false');
                    userRoleAppcurrentItem1.set_item("EventOrganizerStatus", 'Rejected');
                }

                if ($('#chkrep:checked').length == 1) {
                    userRoleAppcurrentItem1.set_item("Rep", 'true');
                    userRoleAppcurrentItem1.set_item("RepStatus", 'Approved');
                } else {
                    userRoleAppcurrentItem1.set_item("Rep", 'false');
                    userRoleAppcurrentItem1.set_item("RepStatus", 'Rejected');
                }

                userRoleAppcurrentItem1.update();
                context.load(userRoleAppcurrentItem1);
                context.executeQueryAsync(function () {
                    // Success returned from executeQueryAsync
                    //cancelAddUserRoles();
                },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error :" + args.get_message());
                    });
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
    } else {

        var userRoleList1 = web.get_lists().getByTitle('UserRoles');
        var userRoleitemCreateInfo = new SP.ListItemCreationInformation();
        var userRoleItem1 = userRoleList1.addItem(userRoleitemCreateInfo);

        userRoleItem1.set_item("Title", $('#Email').val());

        if ($('#superadmin:checked').length == 1) {
            userRoleItem1.set_item("SuperAdmin", 'true');
        } else {
            userRoleItem1.set_item("SuperAdmin", 'false');
        }

        if ($('#admin:checked').length == 1) {
            userRoleItem1.set_item("Admin", 'true');
        } else {
            userRoleItem1.set_item("Admin", 'false');
        }

        if ($('#eventOrganizer:checked').length == 1) {
            userRoleItem1.set_item("EventOrganizer", 'true');
            userRoleItem1.set_item("EventOrganizerStatus", 'Approved');
        } else {
            userRoleItem1.set_item("EventOrganizer", 'false');
            //userRoleAppcurrentItem1.set_item("EventOrganizerStatus", 'New');
        }

        if ($('#chkrep:checked').length == 1) {
            userRoleItem1.set_item("Rep", 'true');
            userRoleItem1.set_item("RepStatus", 'Approved');
        } else {
            userRoleItem1.set_item("Rep", 'false');
            //userRoleAppcurrentItem1.set_item("RepStatus", 'New');
        }

        userRoleItem1.update();
        context.load(userRoleItem1);
        context.executeQueryAsync(function () {
            // Success returned from executeQueryAsync
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });
    }
}


function getUserrolesByEmail(userRoleTitle) {
    var imgsiteRep = document.getElementById("imgSiteRep");
    imgsiteRep.src = "";
    var imgorg = document.getElementById("imgEventOrganizer");
    imgorg.src = "";
    // Get all the Rooms associated with the siteId gotten in eventobject
    var getUserRoleList = web.get_lists().getByTitle('UserRoles');
    var getUserRoleListItems;
    var hasUserRole = false;
    //Create a CAML query that retrieves the sites for this organization
    var userRoleQuery = new SP.CamlQuery();
    userRoleQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        + userRoleTitle
        + "</Value></Eq></Where></Query></View>");
    getUserRoleListItems = getUserRoleList.getItems(userRoleQuery);
    context.load(getUserRoleListItems);

    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var getUserRolelistItemEnumerator = getUserRoleListItems.getEnumerator();
            while (getUserRolelistItemEnumerator.moveNext()) {
                var getUserRolelistItem = getUserRolelistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //getschevents.push({ key: ++keyId, label: getscheventslistItem.get_fieldValues()["Title"], Id: getscheventslistItem.get_fieldValues()["ID"] });
                var userRoleId = getUserRolelistItem.get_id();

                $('#userRoleId').val(userRoleId);
                if (getUserRolelistItem.get_fieldValues()["SuperAdmin"] != null) {
                    $('#chksuperadmin').prop("checked", getUserRolelistItem.get_fieldValues()["SuperAdmin"]);
                } else {
                    $('#chksuperadmin').prop("checked", false);
                }
                //if (getUserRolelistItem.get_fieldValues()["EventOrganizer"] != null) {
                //    $('#chkeventOrganizer').prop("checked", getUserRolelistItem.get_fieldValues()["EventOrganizer"]);
                //}
                //else {
                //    $('#chkeventOrganizer').prop("checked", false);
                //}
                //if (getUserRolelistItem.get_fieldValues()["Rep"] != null) {
                //    $('#chkrep').prop("checked", getUserRolelistItem.get_fieldValues()["Rep"]);
                //}
                //else {
                //    $('#chkrep').prop("checked", false);
                //}
                //$('#admin').prop("checked", getUserRolelistItem.get_fieldValues()["Admin"]);
                //$('#chkeventOrganizer').prop("checked", getUserRolelistItem.get_fieldValues()["EventOrganizer"]);
                //  $('#EventOrgStatus').val(getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"]);
                //$('#chkrep').prop("checked", getUserRolelistItem.get_fieldValues()["Rep"]);
                // $('#repStatus').val(getUserRolelistItem.get_fieldValues()["RepStatus"]);
                $('#EventOrgStatus').val(getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"]);
                $('#repStatus').val(getUserRolelistItem.get_fieldValues()["RepStatus"]);


                if (getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"] == "New" && getUserRolelistItem.get_fieldValues()["EventOrganizer"] == true) {
                    var imgorg = document.getElementById("imgEventOrganizer");
                    imgorg.src = "../Images/pending1.png";
                    $('#chkeventOrganizer').prop("checked", false);
                }
                else if (getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"] == "Approved" && getUserRolelistItem.get_fieldValues()["EventOrganizer"] == true) {
                    var imgorg = document.getElementById("imgEventOrganizer");
                    imgorg.src = "../Images/approve1.png";
                    $('#chkeventOrganizer').prop("checked", true);
                }
                else if (getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"] == "Rejected" && getUserRolelistItem.get_fieldValues()["EventOrganizer"] == false) {
                    var imgorg = document.getElementById("imgEventOrganizer");
                    imgorg.src = "../Images/reject1.png";
                    $('#chkeventOrganizer').prop("checked", false);
                }
                else {
                    var imgorg = document.getElementById("imgEventOrganizer");
                    imgorg.src = "../Images/pending1.png";
                    $('#chkeventOrganizer').prop("checked", false);
                }


                if (getUserRolelistItem.get_fieldValues()["RepStatus"] == "New" && getUserRolelistItem.get_fieldValues()["Rep"] == true) {
                    var imgorg = document.getElementById("imgSiteRep");
                    imgorg.src = "../Images/New-Pending.png";
                    $('#chkrep').prop("checked", false);
                }
                else if (getUserRolelistItem.get_fieldValues()["RepStatus"] == "Approved" && getUserRolelistItem.get_fieldValues()["Rep"] == true) {
                    var imgorg = document.getElementById("imgSiteRep");
                    imgorg.src = "../Images/approve1.png";
                    $('#chkrep').prop("checked", true);
                }
                else if (getUserRolelistItem.get_fieldValues()["RepStatus"] == "Rejected" && getUserRolelistItem.get_fieldValues()["Rep"] == false) {
                    var imgorg = document.getElementById("imgSiteRep");
                    imgorg.src = "../Images/reject1.png";
                    $('#chkrep').prop("checked", false);
                }
                else {
                    var imgorg = document.getElementById("imgSiteRep");
                    imgorg.src = "../Images/pending1.png";
                    $('#chkrep').prop("checked", false);
                }





                //if (getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"] == "Approved" && getUserRolelistItem.get_fieldValues()["EventOrganizer"] == true) {
                //    var imgorg = document.getElementById("imgEventOrganizer");
                //    imgorg.src = "../Images/reject.png";
                //    $('#chkeventOrganizer').prop("checked", getUserRolelistItem.get_fieldValues()["EventOrganizer"]);
                //}
                //else if (getUserRolelistItem.get_fieldValues()["EventOrganizer"] == null || getUserRolelistItem.get_fieldValues()["EventOrganizer"] == false) {
                //    var imgorg = document.getElementById("imgEventOrganizer");
                //    imgorg.src = "../Images/accept.png";
                //    $('#chkeventOrganizer').prop("checked", false);
                //} else if (getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"] != "Approved" && getUserRolelistItem.get_fieldValues()["EventOrganizer"] == true) {
                //    var imgorg = document.getElementById("imgEventOrganizer");
                //    imgorg.src = "../Images/accept.png";
                //    $('#chkeventOrganizer').prop("checked", false);
                //}

                //if (getUserRolelistItem.get_fieldValues()["RepStatus"] == "Approved" && getUserRolelistItem.get_fieldValues()["Rep"] == true) {
                //    var imgsiteRep = document.getElementById("imgSiteRep");
                //    imgsiteRep.src = "../Images/reject.png";
                //    $('#chkrep').prop("checked", getUserRolelistItem.get_fieldValues()["Rep"]);
                //}
                //else if (getUserRolelistItem.get_fieldValues()["Rep"] == null || getUserRolelistItem.get_fieldValues()["Rep"] == false) {
                //    var imgsiteRep = document.getElementById("imgSiteRep");
                //    imgsiteRep.src = "../Images/accept.png";
                //    $('#chkrep').prop("checked", false);
                //}

                //if (getUserRolelistItem.get_fieldValues()["RepStatus"] != "Approved" && getUserRolelistItem.get_fieldValues()["Rep"] == true) {
                //    var imgsiteRep = document.getElementById("imgSiteRep");
                //    imgsiteRep.src = "../Images/accept.png";
                //    $('#chkrep').prop("checked", false);
                //}


                hasUserRole = true;
            }
            if (!hasUserRole) {
                var imgsiteRep = document.getElementById("imgSiteRep");
                //imgsiteRep.src = "../Images/accept.png";
                var imgorg = document.getElementById("imgEventOrganizer");
                //imgorg.src = "../Images/accept.png";
                $('#userRoleId').val('0');
            }
        },
            function (sender, args) {



                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });



}


function getUserroles(userRoleTitle) {
    var imgsiteRep = document.getElementById("imgSiteRep");
    imgsiteRep.src = "";
    var imgorg = document.getElementById("imgEventOrganizer");
    imgorg.src = "";
    // Get all the Rooms associated with the siteId gotten in eventobject
    var getUserRoleList = web.get_lists().getByTitle('UserRoles');
    var getUserRoleListItems;
    var hasUserRole = false;
    //Create a CAML query that retrieves the sites for this organization
    var userRoleQuery = new SP.CamlQuery();
    userRoleQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        + userRoleTitle
        + "</Value></Eq></Where></Query></View>");
    getUserRoleListItems = getUserRoleList.getItems(userRoleQuery);
    context.load(getUserRoleListItems);

    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var getUserRolelistItemEnumerator = getUserRoleListItems.getEnumerator();
            while (getUserRolelistItemEnumerator.moveNext()) {
                var getUserRolelistItem = getUserRolelistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //getschevents.push({ key: ++keyId, label: getscheventslistItem.get_fieldValues()["Title"], Id: getscheventslistItem.get_fieldValues()["ID"] });
                var userRoleId = getUserRolelistItem.get_id();
                $('#userRoleId').val(userRoleId);
                $('#superadmin').prop("checked", getUserRolelistItem.get_fieldValues()["SuperAdmin"]);
                $('#admin').prop("checked", getUserRolelistItem.get_fieldValues()["Admin"]);
                $('#eventOrganizer').prop("checked", getUserRolelistItem.get_fieldValues()["EventOrganizer"]);
                //  $('#EventOrgStatus').val(getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"]);
                $('#rep').prop("checked", getUserRolelistItem.get_fieldValues()["Rep"]);
                // $('#repStatus').val(getUserRolelistItem.get_fieldValues()["RepStatus"]);
                if (getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"] == "Approved" && getUserRolelistItem.get_fieldValues()["EventOrganizer"] == true) {
                    var imgorg = document.getElementById("imgEventOrganizer");
                    imgorg.src = "../Images/reject.png";
                }
                else if (getUserRolelistItem.get_fieldValues()["EventOrganizer"] == null || getUserRolelistItem.get_fieldValues()["EventOrganizer"] == false) {
                    var imgorg = document.getElementById("imgEventOrganizer");
                    imgorg.src = "../Images/accept.png";
                }
                if (getUserRolelistItem.get_fieldValues()["RepStatus"] == "Approved" && getUserRolelistItem.get_fieldValues()["Rep"] == true) {
                    var imgsiteRep = document.getElementById("imgSiteRep");
                    imgsiteRep.src = "../Images/reject.png";
                }
                else if (getUserRolelistItem.get_fieldValues()["Rep"] == null || getUserRolelistItem.get_fieldValues()["Rep"] == false) {
                    var imgsiteRep = document.getElementById("imgSiteRep");
                    imgsiteRep.src = "../Images/accept.png";
                }


                hasUserRole = true;

            }
            if (!hasUserRole) {
                var imgsiteRep = document.getElementById("imgSiteRep");
                imgsiteRep.src = "../Images/accept.png";
                var imgorg = document.getElementById("imgEventOrganizer");
                imgorg.src = "../Images/accept.png";
                $('#userRoleId').val('0');
            }
        },
            function (sender, args) {



                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });



}

//function getUserroles(userRoleTitle) {

//    // Get all the Rooms associated with the siteId gotten in eventobject
//    var getUserRoleList = web.get_lists().getByTitle('UserRoles');
//    var getUserRoleListItems;
//    var hasUserRole = false;
//    //Create a CAML query that retrieves the sites for this organization
//    var userRoleQuery = new SP.CamlQuery();
//    userRoleQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
//        + userRoleTitle
//        + "</Value></Eq></Where></Query></View>");
//    getUserRoleListItems = getUserRoleList.getItems(userRoleQuery);
//    context.load(getUserRoleListItems);

//    context.executeQueryAsync(
//        function () {
//            // Iterate through the event list
//            var getUserRolelistItemEnumerator = getUserRoleListItems.getEnumerator();
//            while (getUserRolelistItemEnumerator.moveNext()) {
//                var getUserRolelistItem = getUserRolelistItemEnumerator.get_current();
//                // populated the rooms for the specific site
//                //getschevents.push({ key: ++keyId, label: getscheventslistItem.get_fieldValues()["Title"], Id: getscheventslistItem.get_fieldValues()["ID"] });
//                var userRoleId = getUserRolelistItem.get_id();
//                $('#userRoleId').val(userRoleId);
//                $('#superadmin').prop("checked", getUserRolelistItem.get_fieldValues()["SuperAdmin"]);
//                $('#admin').prop("checked", getUserRolelistItem.get_fieldValues()["Admin"]);
//                $('#eventOrganizer').prop("checked", getUserRolelistItem.get_fieldValues()["EventOrganizer"]);
//                $('#EventOrgStatus').val(getUserRolelistItem.get_fieldValues()["EventOrganizerStatus"]);
//                $('#rep').prop("checked", getUserRolelistItem.get_fieldValues()["Rep"]);
//                $('#repStatus').val(getUserRolelistItem.get_fieldValues()["RepStatus"]);

//                hasUserRole = true;

//            }
//            if (!hasUserRole) {
//                $('#userRoleId').val('0');
//            }
//        },
//            function (sender, args) {



//                // Failure returned from executeQueryAsync
//                alert("Error :" + args.get_message());
//            });



//}

function ChangeManageRequestStatus(objuserRole) {
    var userRoleId = objuserRole[0];
    var request = objuserRole[2];
    var changeStatus = objuserRole[4];
    var userRoleAppList = web.get_lists().getByTitle('UserRoles');
    var userRoleAppcurrentItem1 = userRoleAppList.getItemById(userRoleId);
    context.load(userRoleAppcurrentItem1);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            if (request == "Event Organizer") {
                userRoleAppcurrentItem1.set_item("EventOrganizerStatus", changeStatus);
            }
            else if (request == "Site Representative") {
                userRoleAppcurrentItem1.set_item("RepStatus", changeStatus);
            }

            userRoleAppcurrentItem1.update();
            context.load(userRoleAppcurrentItem1);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                ManageRequests();
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });

}
function RejectRequest(userRoleId, request) {
    var userRoleAppList = web.get_lists().getByTitle('UserRoles');
    var userRoleAppcurrentItem1 = userRoleAppList.getItemById(userRoleId);
    context.load(userRoleAppcurrentItem1);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            if (request == "Event Organizer") {
                userRoleAppcurrentItem1.set_item("EventOrganizerStatus", 'Rejected');
            }
            else if (request == "Site Representative") {
                userRoleAppcurrentItem1.set_item("RepStatus", 'Rejected');
            }

            userRoleAppcurrentItem1.update();
            context.load(userRoleAppcurrentItem1);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                ManageRequests();
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
}


function CreateUserRolesDataElement(request, userrolelistItem) {

    var data = [];
    data.push(userrolelistItem.get_fieldValues()["ID"]);
    data.push(userrolelistItem.get_fieldValues()["Title"]);
    //data.push(userrolelistItem.get_fieldValues()["EventOrganizer"]);
    var eventOrganizerStatus = userrolelistItem.get_fieldValues()["EventOrganizerStatus"];
    var repStatus = userrolelistItem.get_fieldValues()["RepStatus"];
    if (request == 'org') {
        data.push("Event Organizer");
        data.push(userrolelistItem.get_fieldValues()["EventOrganizerStatus"]);
    }
    else if (request == 'rep') {
        data.push("Site Representative");
        data.push(userrolelistItem.get_fieldValues()["RepStatus"]);
    }
    //userRolecurrentItem1.set_item("Rep", true);
    //userRolecurrentItem1.set_item("RepStatus", 'New');
    if (request == 'org' && (eventOrganizerStatus == 'New' || eventOrganizerStatus == 'Rejected')) {
        data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-ok" aria-hidden="true">Approve</span></button>');
    } else if (request == 'org' && (eventOrganizerStatus == 'New' || eventOrganizerStatus == 'Approved')) {
        //data.push('');
    }
    if (request == 'org' && (eventOrganizerStatus == 'New' || eventOrganizerStatus == 'Approved')) {
        data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true">Reject</span></button>');
    } else if (request == 'org' && (eventOrganizerStatus == 'New' || eventOrganizerStatus == 'Rejected')) {
        //data.push('');
    }

    if (request == 'rep' && (repStatus == 'New' || repStatus == 'Rejected')) {
        data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-ok" aria-hidden="true">Approve</span></button>');
    } else if (request == 'rep' && (repStatus == 'New' || repStatus == 'Approved')) {
        //data.push('');
    }
    if (request == 'rep' && (repStatus == 'New' || repStatus == 'Approved')) {
        data.push('<button type="button" class="btn btn-default" id="1"><span class="glyphicon glyphicon-trash" aria-hidden="true">Reject</span></button>');
    } else if (request == 'rep' && (repStatus == 'New' || repStatus == 'Rejected')) {
        //data.push('');
    }


    return data;
}

function UpdateEventStatus(Id, listName, ColumnName, Status) {
    var _List = web.get_lists().getByTitle(listName);
    context.load(_List);
    listItemToUpdate = _List.getItemById(Id);
    context.load(listItemToUpdate);
    listItemToUpdate.set_item(ColumnName, Status);
    listItemToUpdate.update();
    context.executeQueryAsync(
        Function.createDelegate(this, success),
        Function.createDelegate(this, fail)
        //showEvents()
        );
    if (siteRepresentative) {
        showSiteEventsForAttendeeView();
    }
    else {
        showEvents()
    }
}

function success() {
    NotificationMsg("Operation Completed Successfully");
}
function fail() {
    ErrorMsg("Operation failed");

}
function UpdateStatus(Id, listName, ColumnName, Status) {
    var _List = web.get_lists().getByTitle(listName);
    context.load(_List);
    listItemToUpdate = _List.getItemById(Id);
    context.load(listItemToUpdate);
    listItemToUpdate.set_item(ColumnName, Status);
    listItemToUpdate.update();
    context.executeQueryAsync(
        Function.createDelegate(this, success),
        Function.createDelegate(this, fail)
        );
}

function UpdateSitesStatus(Id, listName, ColumnName, Status) {
    var _List = web.get_lists().getByTitle(listName);
    context.load(_List);
    listItemToUpdate = _List.getItemById(Id);
    context.load(listItemToUpdate);
    listItemToUpdate.set_item(ColumnName, Status);
    listItemToUpdate.update();
    context.executeQueryAsync(

        Function.createDelegate(this, success),
        Function.createDelegate(this, fail),
        showSites()

        );
}
function UpdateUnoOrgStatus(Id, listName, ColumnName, Status) {
    var _List = web.get_lists().getByTitle(listName);
    context.load(_List);
    listItemToUpdate = _List.getItemById(Id);
    context.load(listItemToUpdate);
    listItemToUpdate.set_item(ColumnName, Status);
    listItemToUpdate.update();
    context.executeQueryAsync(

        Function.createDelegate(this, success),
        Function.createDelegate(this, fail),
        showUniOrg()

        );
}
function BillChargesforEventID(resultArray, request) {

    var eventId;
    var eventName;
    var eventDate;
    var eventCreatedBy;

    if (request == "EmpView") {
        eventId = resultArray[0];
        eventName = resultArray[1];
        eventDate = resultArray[2];
        eventCreatedBy = "NA";

    } else {
        eventId = resultArray[0];
        eventName = resultArray[1];
        eventDate = resultArray[3];
        eventCreatedBy = resultArray[2];
    }


    if (eventOrganizer == true && eventOrganizerStatus == 'Approved') {
        $('#FinalRoomsCharges').attr("disabled", "true");
        $('#FinalChargeDescription').attr("disabled", "true");
    } else {
        $('#FinalRoomsCharges').removeAttr("disabled");
        $('#FinalChargeDescription').removeAttr("disabled");
    }

    $('#EventId').val(eventId);
    $('#prntEventName').val(eventName);
    $('#prntEventDate').val(eventDate);
    $('#prntEventCreatedBy').val(eventCreatedBy);



    var billChargesBodyDiv = document.getElementById("billChargesBody");
    // clearing prev Rows
    while (billChargesBodyDiv.hasChildNodes()) {
        billChargesBodyDiv.removeChild(billChargesBodyDiv.lastChild);
    }

    var printbillChargesBodyDiv = document.getElementById("PrintbillChargesBody");
    // clearing prev Rows from 
    while (printbillChargesBodyDiv.hasChildNodes()) {
        printbillChargesBodyDiv.removeChild(printbillChargesBodyDiv.lastChild);
    }

    var context = SP.ClientContext.get_current();
    var web = context.get_web();

    var lstSchRooms = [];
    var lstRooms = [];
    var schEventlist = web.get_lists().getByTitle("ScheduledEvents");
    var schEventcamlQuery = new SP.CamlQuery();
    schEventcamlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventID' LookupId='TRUE' /><Value Type='Lookup'>"
        + eventId
        + "</Value></Eq></Where></Query></View>");
    var schEventlistItems = schEventlist.getItems(schEventcamlQuery);
    context.load(schEventlistItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var schEventlistEnumerator = schEventlistItems.getEnumerator();
            while (schEventlistEnumerator.moveNext()) {
                var schEventlistItem1 = schEventlistEnumerator.get_current();
                lstSchRooms.push({ RoomId: schEventlistItem1.get_fieldValues()["ResourceID"].get_lookupValue(), Id: schEventlistItem1.get_fieldValues()["ID"] });
            }

            if (lstSchRooms.length > 0) {
                var roomlist = web.get_lists().getByTitle('Resources');
                var camlQuery = new SP.CamlQuery();

                var str1 = "<View><Query><Where><In><FieldRef Name = 'ID'/><Values>";
                var str2 = "";
                var str3 = "</Values>  </In></Where></Query></View>";
                var i = 0;
                while (i < lstSchRooms.length) {
                    str2 += "<Value Type = 'Counter'>" + lstSchRooms[i].RoomId + "</Value>";
                    i++;
                }
                var str4 = str1 + str2 + str3;

                camlQuery.set_viewXml(str4);

                var roomlistItems = roomlist.getItems(camlQuery);
                context.load(roomlistItems);
                context.executeQueryAsync(
                    function () {
                        //Success returned from executeQueryAsync
                        var roomlistEnumerator = roomlistItems.getEnumerator();
                        while (roomlistEnumerator.moveNext()) {
                            var roomlistItem = roomlistEnumerator.get_current();
                            lstRooms.push({ RoomName: roomlistItem.get_fieldValues()["Title"], RoomId: roomlistItem.get_fieldValues()["ID"], RoomCharge: roomlistItem.get_fieldValues()["RoomCharge"], ChargePerPerson: roomlistItem.get_fieldValues()["ChargePerPerson"] });
                        }
                        i = 0;
                        //var newRowContent = null;
                        var sum = 0;
                        while (i < lstRooms.length) {
                            var newRowContent = null;
                            var prntnewRowContent = null;
                            var roomCharge = 0;
                            var chargePerPerson = 0;
                            if (lstRooms[i].RoomCharge != null) {
                                roomCharge = lstRooms[i].RoomCharge;
                                sum += parseInt(lstRooms[i].RoomCharge);
                            }
                            else if (lstRooms[i].RoomCharge == null) {
                                roomCharge = 0;
                                sum += parseInt(0);
                            }

                            if (lstRooms[i].ChargePerPerson != null) {
                                chargePerPerson = lstRooms[i].ChargePerPerson;
                            }
                            else if (lstRooms[i].ChargePerPerson == null) {
                                chargePerPerson = 0;
                            }

                            //newRowContent = "<tr><td>" + lstRooms[i].RoomName + "</td><td><input type=\"text\" class=\"form-control\" disabled placeholder=\"0\" value=\"" + lstRooms[i].RoomCharge + "\" ></td><td><input type=\"text\" class=\"form-control\" id=\"chkAllPrimaryAttrs\" disabled placeholder=\"0\" value=\"" + lstRooms[i].ChargePerPerson + "\"></td></tr>";
                            //$("#tblbillCharges tbody").append(newRowContent);

                            newRowContent = "<tr><td>" + lstRooms[i].RoomName + "</td><td><input type=\"text\" class=\"form-control\" disabled placeholder=\"0\" value=\"" + roomCharge + "\" ></td><td><input type=\"text\" class=\"form-control\" id=\"chkAllPrimaryAttrs\" disabled placeholder=\"0\" value=\"" + chargePerPerson + "\"></td></tr>";
                            $("#tblbillCharges tbody").append(newRowContent);

                            prntnewRowContent = "<tr><td>" + lstRooms[i].RoomName + "</td><td>" + roomCharge + "</td><td>" + chargePerPerson + "</td></tr>";
                            $("#PrinttblbillCharges tbody").append(prntnewRowContent);

                            //sum += parseInt(lstRooms[i].RoomCharge);
                            i++;

                            //sum += parseInt(lstRooms[i].RoomCharge);
                        }
                        prntnewRowContent = "<tr><td></td><td></td><td></td></tr>";
                        $("#PrinttblbillCharges tbody").append(prntnewRowContent);

                        var eventList1 = web.get_lists().getByTitle('EventList');
                        var eventItem = eventList1.getItemById(eventId);
                        context.load(eventItem);
                        context.executeQueryAsync(
                            function () {
                                // Success returned from executeQueryAsync
                                if (eventItem.get_fieldValues()["FinalCharges"] != null) {
                                    $('#FinalRoomsCharges').val(eventItem.get_fieldValues()["FinalCharges"]);
                                }
                                else if (eventItem.get_fieldValues()["FinalCharges"] == null) {
                                    //$('#FinalRoomsCharges').val(0);
                                }

                                if (sum != NaN) {
                                    $('#TotalRoomsCharges').val(sum);
                                }
                                else if (sum == NaN) {
                                    $('#TotalRoomsCharges').val(0);
                                }

                                //$('#TotalRoomsCharges').val(sum);
                                $('#FinalChargeDescription').val(eventItem.get_fieldValues()["FinalChargeDescription"]);

                                var prntnewRowBody = "";
                                prntnewRowBody = "<tr><td>Sum of Room Charges</td><td>" + $('#TotalRoomsCharges').val() + "</td></tr>" +
                                    "<tr><td>Final Charges</td><td>" + $('#FinalRoomsCharges').val() + "</td></tr>" +
                                    "<tr><td>Description</td><td colspan=\"4\">" + $('#FinalChargeDescription').val() + "</td></tr>";
                                $("#PrinttblbillCharges tbody").append(prntnewRowBody);

                                $('#billCharges').dialog(
                                {
                                    width: 700,
                                    height: 700,
                                    modal: true,
                                    fluid: true,
                                    show: {
                                        effect: "Scale",
                                        duration: 1000
                                    },
                                    hide: {
                                        effect: "Explode",
                                        duration: 1000
                                    },
                                    beforeClose: function (event, ui) {

                                    }
                                });
                            });
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error in getting Rooms : " + args.get_message());
                    });
            } else {
                alert('There is no reserved space or resources requested for this event, therefore there are no charges and no bill available.');
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in getting Schevents: " + args.get_message());
        });
}

function CanceleEventCharges() {
    noprintRemoveClass();
    $("#PrintbillCharges").hide();
    $('#billCharges').dialog("close");
}

function PrintEventCharges() {
    //$( ".printable" ).print();

    $("#Home").addClass("noprint");
    $("#AllEvents").addClass("noprint");
    $("#billCharges").addClass("print");
    window.focus();
    window.print();
    noprintRemoveClass();
}

function noprintRemoveClass() {
    $("#Home").removeClass("noprint");
    $("#AllEvents").removeClass("noprint");
    $("#billCharges").removeClass("print");
}

function SaveEventCharges() {

    var eventId = $('#EventId').val();
    var eventList1 = web.get_lists().getByTitle('EventList');
    var eventItem = eventList1.getItemById(eventId);
    context.load(eventItem);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync
            eventItem.set_item("Charges", $('#TotalRoomsCharges').val());
            eventItem.set_item("FinalCharges", $('#FinalRoomsCharges').val());
            eventItem.set_item("FinalChargeDescription", $('#FinalChargeDescription').val());

            eventItem.update();
            context.load(eventItem);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync
                CanceleEventCharges();
            },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Failure " + args.get_message());
                });
        },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure " + args.get_message());
                    });
}


function AddModifySuperAdmin(objSiteEmsUser, request) {
    var userid = 0;
    var emsUserList = web.get_lists().getByTitle('EMSUsers');
    //Create a CAML query that retrieves the sites for this organization
    var emsUserQuery = new SP.CamlQuery();
    emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
        + objSiteEmsUser[0].title
        + "</Value></Eq></Where></Query></View>");
    var emsUserListItems = emsUserList.getItems(emsUserQuery);
    context.load(emsUserListItems);
    var emsUserlistItem;
    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
            while (emsUserlistItemEnumerator.moveNext()) {
                emsUserlistItem = emsUserlistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //userid.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                userid = emsUserlistItem.get_fieldValues()["ID"];
            }
            if (userid > 0) {

                emsUserlistItem.set_item("Title", objSiteEmsUser[0].title);
                if ((objSiteEmsUser[0].prefix != null) && (objSiteEmsUser[0].prefix != "")) {
                    emsUserlistItem.set_item("prefix", objSiteEmsUser[0].prefix);
                }
                if ((objSiteEmsUser[0].FirstName != null) && (objSiteEmsUser[0].FirstName != "")) {
                    emsUserlistItem.set_item("FirstName", objSiteEmsUser[0].FirstName);
                }
                if ((objSiteEmsUser[0].LastName != null) && (objSiteEmsUser[0].LastName != "")) {
                    emsUserlistItem.set_item("LastName", objSiteEmsUser[0].LastName);
                }
                if ((objSiteEmsUser[0].Address != null) && (objSiteEmsUser[0].Address != "")) {
                    emsUserlistItem.set_item("Address", objSiteEmsUser[0].Address);
                }

                if ((objSiteEmsUser[0].CNIC != null) && (objSiteEmsUser[0].CNIC != "")) {
                    emsUserlistItem.set_item("CNIC", objSiteEmsUser[0].CNIC);
                }
                if ((objSiteEmsUser[0].PassportNumber != null) && (objSiteEmsUser[0].PassportNumber != "")) {
                    emsUserlistItem.set_item("PassportNumber", objSiteEmsUser[0].PassportNumber);
                }
                if ((objSiteEmsUser[0].Occupation != null) && (objSiteEmsUser[0].Occupation != "")) {
                    emsUserlistItem.set_item("Occupation", objSiteEmsUser[0].Occupation);
                }

                if ((objSiteEmsUser[0].ContactNumber != null) && (objSiteEmsUser[0].ContactNumber != "")) {
                    emsUserlistItem.set_item("ContactNumber", objSiteEmsUser[0].ContactNumber);
                }

                if ((objSiteEmsUser[0].FieldInterest != null) && (objSiteEmsUser[0].FieldInterest != "")) {
                    emsUserlistItem.set_item("FieldInterest", objSiteEmsUser[0].FieldInterest);
                }

                if ((objSiteEmsUser[0].FieldSubInterest != null) && (objSiteEmsUser[0].FieldSubInterest != "")) {
                    emsUserlistItem.set_item("FieldSubInterest", objSiteEmsUser[0].FieldSubInterest);
                }

                if ((objSiteEmsUser[0].Country != null) && (objSiteEmsUser[0].Country != "")) {
                    emsUserlistItem.set_item("Country", objSiteEmsUser[0].Country);
                }

                if ((objSiteEmsUser[0].City != null) && (objSiteEmsUser[0].City != "")) {
                    emsUserlistItem.set_item("City", objSiteEmsUser[0].City);
                }
                if ((objSiteEmsUser[0].RegionProvince != null) && (objSiteEmsUser[0].RegionProvince != "")) {
                    emsUserlistItem.set_item("Region_x002f_Province", objSiteEmsUser[0].RegionProvince);
                }
                if ((objSiteEmsUser[0].PrimaryAffiliation != null) && (objSiteEmsUser[0].PrimaryAffiliation != "")) {
                    emsUserlistItem.set_item("PrimaryAffiliation", objSiteEmsUser[0].PrimaryAffiliation);
                }
                if ((objSiteEmsUser[0].IsVerified != null) && (objSiteEmsUser[0].IsVerified != "")) {
                    emsUserlistItem.set_item("IsVerified", objSiteEmsUser[0].IsVerified);
                }
                if ((objSiteEmsUser[0].UniOrgTitle != null) && (objSiteEmsUser[0].UniOrgTitle != "")) {
                    emsUserlistItem.set_item("UniOrgTitle", objSiteEmsUser[0].UniOrgTitle);
                }
                if (request == 'SuperAdmin') {
                    emsUserlistItem.set_item("Status", objSiteEmsUser[0].Status);
                }

                emsUserlistItem.update();
                context.load(emsUserlistItem);
                context.executeQueryAsync(function () {
                    // Success returned from executeQueryAsync
                    var appEmsUserId = emsUserlistItem.get_id();

                    objSiteEmsUser[0].Id = appEmsUserId;
                    AddModifyUserRoles(objSiteEmsUser, 'SuperAdmin');

                },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });
            }
            else {
                var emsUserList1 = web.get_lists().getByTitle('EMSUsers');
                var emsUseritemCreateInfo = new SP.ListItemCreationInformation();
                var emsUserItem = emsUserList1.addItem(emsUseritemCreateInfo);


                emsUserItem.set_item("Title", objSiteEmsUser[0].title);
                if ((objSiteEmsUser[0].prefix != null) && (objSiteEmsUser[0].prefix != "")) {
                    emsUserItem.set_item("prefix", objSiteEmsUser[0].prefix);
                }
                if ((objSiteEmsUser[0].FirstName != null) && (objSiteEmsUser[0].FirstName != "")) {
                    emsUserItem.set_item("FirstName", objSiteEmsUser[0].FirstName);
                }
                if ((objSiteEmsUser[0].LastName != null) && (objSiteEmsUser[0].LastName != "")) {
                    emsUserItem.set_item("LastName", objSiteEmsUser[0].LastName);
                }
                if ((objSiteEmsUser[0].Address != null) && (objSiteEmsUser[0].Address != "")) {
                    emsUserItem.set_item("Address", objSiteEmsUser[0].Address);
                }

                if ((objSiteEmsUser[0].CNIC != null) && (objSiteEmsUser[0].CNIC != "")) {
                    emsUserItem.set_item("CNIC", objSiteEmsUser[0].CNIC);
                }
                if ((objSiteEmsUser[0].PassportNumber != null) && (objSiteEmsUser[0].PassportNumber != "")) {
                    emsUserItem.set_item("PassportNumber", objSiteEmsUser[0].PassportNumber);
                }
                if ((objSiteEmsUser[0].Occupation != null) && (objSiteEmsUser[0].Occupation != "")) {
                    emsUserItem.set_item("Occupation", objSiteEmsUser[0].Occupation);
                }

                if ((objSiteEmsUser[0].ContactNumber != null) && (objSiteEmsUser[0].ContactNumber != "")) {
                    emsUserItem.set_item("ContactNumber", objSiteEmsUser[0].ContactNumber);
                }

                if ((objSiteEmsUser[0].FieldInterest != null) && (objSiteEmsUser[0].FieldInterest != "")) {
                    emsUserItem.set_item("FieldInterest", objSiteEmsUser[0].FieldInterest);
                }

                if ((objSiteEmsUser[0].FieldSubInterest != null) && (objSiteEmsUser[0].FieldSubInterest != "")) {
                    emsUserItem.set_item("FieldSubInterest", objSiteEmsUser[0].FieldSubInterest);
                }

                if ((objSiteEmsUser[0].Country != null) && (objSiteEmsUser[0].Country != "")) {
                    emsUserItem.set_item("Country", objSiteEmsUser[0].Country);
                }

                if ((objSiteEmsUser[0].City != null) && (objSiteEmsUser[0].City != "")) {
                    emsUserItem.set_item("City", objSiteEmsUser[0].City);
                }
                if ((objSiteEmsUser[0].RegionProvince != null) && (objSiteEmsUser[0].RegionProvince != "")) {
                    emsUserItem.set_item("Region_x002f_Province", objSiteEmsUser[0].RegionProvince);
                }
                if ((objSiteEmsUser[0].PrimaryAffiliation != null) && (objSiteEmsUser[0].PrimaryAffiliation != "")) {
                    emsUserItem.set_item("PrimaryAffiliation", objSiteEmsUser[0].PrimaryAffiliation);
                }
                if ((objSiteEmsUser[0].IsVerified != null) && (objSiteEmsUser[0].IsVerified != "")) {
                    emsUserItem.set_item("IsVerified", objSiteEmsUser[0].IsVerified);
                }
                if ((objSiteEmsUser[0].UniOrgTitle != null) && (objSiteEmsUser[0].UniOrgTitle != "")) {
                    emsUserItem.set_item("UniOrgTitle", objSiteEmsUser[0].UniOrgTitle);
                }
                if (request == 'SuperAdmin') {
                    emsUserItem.set_item("Status", objSiteEmsUser[0].Status);
                }


                emsUserItem.update();

                context.load(emsUserItem);
                context.executeQueryAsync(function () {
                    // Success returned from executeQueryAsync
                    var appEmsUserId = emsUserItem.get_id();
                    objSiteEmsUser[0].Id = appEmsUserId;
                    AddModifyUserRoles(objSiteEmsUser, 'SuperAdmin');
                },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure " + args.get_message());
                    });
            }

        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
}

function getSpHostUrl() {
    var hostUrl1;
    var hostSiteUrl1;
    var urlFlag = false;
    urlFlag = checkQueryStringParameter("SPHostUrl");
    if (!urlFlag) {
        hostUrl1 = localStorage.getItem("SPHostUrl");
        //window.location = "../Pages/Default.aspx?SPHostUrl=" + hostSiteUrl;
    } else {
        hostUrl1 = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        hostSiteUrl1 = JSON.parse(JSON.stringify(hostUrl1));
        localStorage.setItem("SPHostUrl", hostSiteUrl1);
    }
    return hostUrl1;
}


function getEmsUserproperties(objSuperuser, request) {
    var hostUrl1;
    hostUrl1 = getSpHostUrl();

    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(EMSUserListName);

    //Create a CAML query that retrieves the sites for this organization
    var siteQuery1 = new SP.CamlQuery();
    siteQuery1.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        + objSuperuser[0].title
        + "</Value></Eq></Where></Query></View>");
    var targetUserResult1 = targetUsersList1.getItems(siteQuery1);

    //var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {

            var listItemEnumerator1 = targetUserResult1.getEnumerator();
            while (listItemEnumerator1.moveNext()) {
                var listItem = listItemEnumerator1.get_current();


                var role = "";
                if (listItem.get_fieldValues()[SiteColProfession] != null) {
                    role = listItem.get_fieldValues()[SiteColProfession].get_lookupValue();
                } else {
                    role = "";
                }
                var uniOrgTitle = "";
                if ((listItem.get_fieldValues()[SiteColUniTitle] != null) && (listItem.get_fieldValues()[SiteColUniTitle].length != 0)) {
                    var x = listItem.get_fieldValues()[SiteColUniTitle].length;
                    for (var i = 0; i < x; i++) {
                        uniOrgTitle += (listItem.get_fieldValues()[SiteColUniTitle][i]).get_lookupValue() + " ; ";

                    }
                } else { uniOrgTitle = ""; }
                var fieldInterest = "";
                if ((listItem.get_fieldValues()[SiteColInterest] != null) && (listItem.get_fieldValues()[SiteColInterest].length != 0)) {

                    var x = listItem.get_fieldValues()[SiteColInterest].length;
                    for (var i = 0; i < x; i++) {
                        fieldInterest += (listItem.get_fieldValues()[SiteColInterest][i]).get_lookupValue() + " ; ";
                    }
                } else { fieldInterest = ""; }
                var fieldSubInterest = "";
                if ((listItem.get_fieldValues()[SiteColSubInterest] != null) && (listItem.get_fieldValues()[SiteColSubInterest].length != 0)) {
                    var x = listItem.get_fieldValues()[SiteColSubInterest].length;
                    for (var i = 0; i < x; i++) {
                        fieldSubInterest += (listItem.get_fieldValues()[SiteColSubInterest][i]).get_lookupValue() + " ; ";
                    }
                } else { fieldSubInterest = ""; }
                var provinceRegion = "";
                if (listItem.get_fieldValues()[SiteColRegion] != null) {
                    provinceRegion = listItem.get_fieldValues()[SiteColRegion].get_lookupValue();
                } else { provinceRegion = ""; }
                var Country = "";
                if (listItem.get_fieldValues()[SiteColCountry] != null) {
                    Country = listItem.get_fieldValues()[SiteColCountry].get_lookupValue();
                } else { Country = ""; }
                var City = "";
                if (listItem.get_fieldValues()[SiteColCity] != null) {
                    City = listItem.get_fieldValues()[SiteColCity].get_lookupValue();
                } else { City = ""; }
                var objSiteEmsUser = [];
                objSiteEmsUser.push({ Id: listItem.get_fieldValues()["ID"], title: listItem.get_fieldValues()[SiteTitle], prefix: listItem.get_fieldValues()[SiteColPrefix], FirstName: listItem.get_fieldValues()[SiteColName], LastName: listItem.get_fieldValues()[SiteColLName], Address: listItem.get_fieldValues()[SiteColAddress], CNIC: listItem.get_fieldValues()[SiteColCNIC], PassportNumber: listItem.get_fieldValues()[SitePassportNumber], Occupation: role, ContactNumber: listItem.get_fieldValues()[SiteContactNumber], Status: listItem.get_fieldValues()[SiteColStatus], FieldInterest: fieldInterest, FieldSubInterest: fieldSubInterest, Country: Country, City: City, RegionProvince: provinceRegion, PrimaryAffiliation: listItem.get_fieldValues()[SitePrimaryAffiliation], IsVerified: listItem.get_fieldValues()[SiteisVerified], UniOrgTitle: uniOrgTitle });

                if (request == 'SuperAdmin') {
                    AddModifySuperAdmin(objSiteEmsUser, 'SuperAdmin');
                }
                else if (request == 'ManageUser') {
                    ChangeSiteEmsUsersStatus(objSiteEmsUser[0].Id, 'Approved');
                    var user = [];
                    user[0] = objSiteEmsUser[0].Id;
                    user[4] = objSiteEmsUser[0].title;
                    user[2] = objSiteEmsUser[0].FirstName;
                    user[3] = objSiteEmsUser[0].LastName;
                    //ChangeEmsUsersProfile('New', user);
                    ChangeSiteAppStatuses('New', user, 'ManageUser');
                }

            }
        },

            function (sender, args) {

                changestatusrejected(objSuperuser[0].title);
                alert('getting site user failed. ' + args.get_message());

            });
}

function IsAllRowsChecked(userTable, id) {
    var tblElem = $('#' + userTable);
    var isAllChecked = false;
    var elemChks = tblElem.find("input[type=checkbox]");
    //var elemChks = tblElem;
    for (var i = 1; i < elemChks.length; i++) {
        // first checkbox is in header
        if (elemChks[i].checked == true) {
            isAllChecked = true;
        } else {
            isAllChecked = false;
            break;
        }
    }
    if (isAllChecked == true) {
        $('#' + id).prop("checked", true);
    } else {
        $('#' + id).prop("checked", false);
    }

}

function IsCheckedAll(userTable, id) {
    // get Table elememt
    var tblElem = $('#' + userTable);
    // get all checked from table
    //var elemChks = tblElem.find("input[type=checkbox]:checked");
    var elemChks = tblElem.find("input[type=checkbox]");
    //var elemChks = tblElem;
    for (var i = 1; i < elemChks.length; i++) {
        // first checkbox is in header

        if ($('#' + id + ':checked').length == 1) {
            elemChks[i].checked = true;
        } else {
            elemChks[i].checked = false;
        }

    }



}

function ApproveUser(request) {
    var rows = $("#usersTable").dataTable().fnGetNodes();
    for (var i = 0; i < rows.length; i++) {
        if (rows[i].cells[0].firstChild.checked == true) {
            var resultArraycells = rows[i].cells;
            var resultArray = [];
            for (var j = 1; j < resultArraycells.length; j++) {
                resultArray[j - 1] = resultArraycells[j].outerText;
            }
            if ((resultArray[resultArray.length - 1] == 'New' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Approve')) {
                //ChangeEmsUsersStatus('New', resultArray, false);
                ChangeEmsUsersProfile('New', resultArray, false);
                ChangeSiteEmsUsersStatus(resultArray[0], 'Approved', false);
            }
            else if ((resultArray[resultArray.length - 1] == 'Approved' || resultArray[resultArray.length - 1] == 'Added') && request == 'Sync') {
                //SynSiteEmsUsersToApp(resultArray[resultArray.length - 1], resultArray, false);
                //ChangeEmsUsersProfile(resultArray[resultArray.length - 1], resultArray, false);
                ChangeEmsUsersProfile(resultArray[resultArray.length - 1], resultArray, true);
            }
            }
    }
}


function SiteAppUserRequest(request) {
    var resultArray = [];
    GC_ForSiteAppUsersRequest = 0;
    var rows = $("#SiteAppusersTable").dataTable().fnGetNodes();
    for (var i = 0; i < rows.length; i++) {
        if (rows[i].cells[0].firstChild.checked == true) {
            var resultArraycells = rows[i].cells;
            for (var j = 1; j < resultArraycells.length; j++) {
                resultArray[j - 1] = resultArraycells[j].outerText;
            }

            if ((resultArray[resultArray.length - 1] == 'New' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Approve')) {
                GC_ForSiteAppUsersRequest++;
            }
            if ((resultArray[resultArray.length - 1] == 'Approved' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Add')) {
                GC_ForSiteAppUsersRequest++;
            }
            if (((resultArray[resultArray.length - 1] == 'Added')) && request == 'Reject') {
                GC_ForSiteAppUsersRequest++;
            }
        }
    }
    

    if (GC_ForSiteAppUsersRequest > 0)
        {
        GC_ForSiteAppUsersRequest--;
        for (var i = 0; i < rows.length; i++) {
                if (rows[i].cells[0].firstChild.checked == true) {
                    var resultArraycells = rows[i].cells;
                    for (var j = 1; j < resultArraycells.length; j++) {
                        resultArray[j - 1] = resultArraycells[j].outerText;
                    }
                    //SiteAppUserRequest_1(resultArray);
                    if ((resultArray[resultArray.length - 1] == 'New' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Approve')) {
                        var objuser = null;
                        objuser = [{ Id: resultArray[0], title: resultArray[4], userloginname: resultArray[2] }];
                        getEmsUserproperties(objuser, 'ManageUser');
                        //ChangeSiteEmsUsersStatus(resultArray[0], 'Approved');
                        //ChangeEmsUsersProfile('New', resultArray, false);
                    }
                    if ((resultArray[resultArray.length - 1] == 'Approved' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Add')) {
                        ChangeSiteAppStatuses('Approved', resultArray, 'ManageUser');
                        //ChangeEmsUsersStatus('Approved', resultArray, false);
                        //ChangeEmsUsersProfile('Approved', resultArray, false);
                    }
                    if (((resultArray[resultArray.length - 1] == 'Added')) && request == 'Reject') {
                        ChangeSiteAppStatuses('Rejected', resultArray, 'ManageUser');
                        //ChangeEmsUsersProfile('Rejected', resultArray, false);
                        //ChangeEmsUsersStatus('Rejected', resultArray, false);
                    }
                }
            }
        }
}

function SiteAppUserRequest_1(resultArray)
{

 if ((resultArray[resultArray.length - 1] == 'New' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Approve')) {
                var objuser = null;
                objuser = [{ Id: resultArray[0], title: resultArray[4], userloginname: resultArray[2] }];
                getEmsUserproperties(objuser, 'ManageUser');
                //ChangeSiteEmsUsersStatus(resultArray[0], 'Approved');
                //ChangeEmsUsersProfile('New', resultArray, false);
            }
            if ((resultArray[resultArray.length - 1] == 'Approved' || resultArray[resultArray.length - 1] == 'Rejected') && (request == 'Add')) {
                ChangeSiteAppStatuses('Approved', resultArray, 'ManageUser');
                //ChangeEmsUsersStatus('Approved', resultArray, false);
                //ChangeEmsUsersProfile('Approved', resultArray, false);
            }
            if (((resultArray[resultArray.length - 1] == 'Added')) && request == 'Reject') {
                ChangeSiteAppStatuses('Rejected', resultArray, 'ManageUser');
                //ChangeEmsUsersProfile('Rejected', resultArray, false);
                //ChangeEmsUsersStatus('Rejected', resultArray, false);
            }
}


function ApproveAppUser(request) {
    var resultArray = [];
    var rows = $("#AppUserTable").dataTable().fnGetNodes();
    for (var i = 0; i < rows.length; i++) {
        if (rows[i].cells[0].firstChild.checked == true) {
            var resultArraycells = rows[i].cells;
            for (var j = 1; j < resultArraycells.length; j++) {
                resultArray[j - 1] = resultArraycells[j].outerText;
            }

            if (resultArray[resultArray.length - 1] == 'Approved' && request == 'Add') {
                ChangeEmsUsersStatus('Approved', resultArray, false);
            }
            if (((resultArray[resultArray.length - 1] == 'Added') || (resultArray[resultArray.length - 1] == 'Rejected')) && request == 'Reject') {
                ChangeEmsUsersStatus('Rejected', resultArray, false);
            }
        }
    }
}

function saveUserProfile() {
    var countryName = $("#ddlCountry option[value='" + $('#ddlCountry').val() + "']")[0].text;
    var errArea;
    //if ($('#FirstName').val() == "") {

    //    if (siteRepresentative) {
    //        errArea = document.getElementById("errAllUniOrg");
    //    } else {
    //        errArea = document.getElementById("errAllUniOrg");
    //    }
    //    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
    //    while (errArea.hasChildNodes()) {
    //        errArea.removeChild(errArea.lastChild);
    //    }
    //    var divMessage = document.createElement("DIV");
    //    divMessage.setAttribute("style", "padding:5px;");
    //    divMessage.appendChild(document.createTextNode("'First Name' field is required."));
    //    errArea.appendChild(divMessage);
    //}
    //else
    if ($('#ddlPrefix').val() == "Select" || $('#ddlPrefix').val().length == null) {
        ErrorMsg("Select Title.");
    }
    else if ($('#FirstName').val() == "") {
        ErrorMsg("'First Name' field is required.");
    }
    else if ($('#LastName').val() == "") {
        ErrorMsg("Select Last Name.");
    }
    else if ($('#Address').val() == "") {
        ErrorMsg("Select Address.");
    }
    else if ($('#Phone').val() == "") {
        ErrorMsg("Select Phone.");
    }
    else if ($('#ddlRole').val() == -1 || $('#ddlRole').val().length == null) {
        ErrorMsg("Select Role.");
    }
    else if ($('#ddlCountry').val() == -1 || $('#ddlCountry').val().length == null) {
        ErrorMsg("Select Country.");
    }
    else if ($('#ddlCity').val() == -1 && countryName == "Pakistan") {
        ErrorMsg("Select City.");
    }
    else if ($('#ddlRegionProvince').val() == -1 && countryName == "Pakistan") {
        ErrorMsg("Select Region/Province.");
    }
    else if ($('#CNIC').val() == "" && countryName == "Pakistan") {
        ErrorMsg("Select CNIC ");
    } else if ($('#passportNumber').val() == "" && countryName != "Pakistan") {
        ErrorMsg("Select Passport Number/Traveling Doc. Number");
    }
    else if ($('#lstAffiliation').val() == null) {
        ErrorMsg("Must Select atleast one Affiliation.");
    } else if ($('#EditUserUniversityDomain').val() == null) {
        ErrorMsg("Must Select atleast one Discipline.");
    } else if ($('#EditUserUniversitySubDomain').val() == null) {
        ErrorMsg("Must Select atleast one Specialization.");
    } else {

        var userList = web.get_lists().getByTitle("EMSUsers");
        //Create a CAML query that retrieves representative for org
        var camlQuery = new SP.CamlQuery();
        camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title'  /><Value Type='Text'>"
            + $('#Email').val()
            + "</Value></Eq></Where></Query></View>");
        var userlistItems = userList.getItems(camlQuery);
        var hasUser = false;
        context.load(userlistItems);
        context.executeQueryAsync(
            function () {
                // Success returned from executeQueryAsync
                var listItemEnumerator = userlistItems.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    var title = listItem.get_fieldValues()["Title"];

                    listItem.set_item("prefix", $('#ddlPrefix').val());
                    listItem.set_item("FirstName", $('#FirstName').val());
                    listItem.set_item("LastName", $('#LastName').val());
                    listItem.set_item("Address", $('#Address').val());
                    listItem.set_item("ContactNumber", $('#Phone').val());
                    listItem.set_item("Occupation", $('#ddlRole').val());
                    var countryName = $("#ddlCountry option[value='" + $('#ddlCountry').val() + "']")[0].text;
                    listItem.set_item("Country", countryName);
                    listItem.set_item("City", $('#ddlCity').val());

                    if (countryName == 'Pakistan') {
                        listItem.set_item("CNIC", $('#CNIC').val());
                        listItem.set_item("Region_x002f_Province", $('#ddlRegionProvince').val());
                    } else {
                        listItem.set_item("PassportNumber", $('#passportNumber').val());
                    }
                    listItem.set_item("PrimaryAffiliation", $('#ddlPrimaryAffiliation').val());
                    var values = $('#lstAffiliation').val();
                    var lstAffiliation = "";
                    for (var i = 0; i < values.length; i++) {
                        lstAffiliation += values[i] + ";";
                    }
                    listItem.set_item("UniOrgTitle", lstAffiliation);


                    var valuesUniDomain = $('#EditUserUniversityDomain').val();
                    var lstUserUniversityDomain = "";
                    for (i = 0; i < valuesUniDomain.length; i++) {
                        lstUserUniversityDomain += valuesUniDomain[i] + ";";
                    }
                    listItem.set_item("FieldInterest", lstUserUniversityDomain);

                    var valuesUniSubDomain = $('#EditUserUniversitySubDomain').val();
                    var lstUniSubDomain = "";
                    for (i = 0; i < valuesUniSubDomain.length; i++) {
                        lstUniSubDomain += valuesUniSubDomain[i] + ";";
                    }
                    listItem.set_item("FieldSubInterest", lstUniSubDomain);

                    listItem.update();
                    context.load(listItem);
                    context.executeQueryAsync(function () {
                        var userid = listItem.get_id();
                    },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Error :" + args.get_message());
                        });

                    if ($('#request').val() == 'AdminView') {
                        saveUserRoles();
                    }
                    SaveUserprofileToSiteList();


                }
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
    }
}

function getSplists(spList, populatinglist , request) {
    var hostUrl;
    hostUrl = getSpHostUrl();
    hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl);
    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(spList);
    var camlQuery = SP.CamlQuery.createAllItemsQuery();
    var targetUserResult1 = targetUsersList1.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {
            var listItemEnumerator = targetUserResult1.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var title = listItem.get_fieldValues()["Title"];

                populatinglist.push({ lstItem: listItemEnumerator.get_current() });
            }
            if (spList == AffiliationSplst && request == 'userProfile') {
                SaveUserprofileToSiteList2();
            }
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                //alert("Error :" + args.get_message());
            });

}
function SaveUserprofileToSiteList() {
    SpUniDomain = [];
    SpUniSubDomain = [];
    SpAffiliationlst = [];
    SpCountrylst = [];
    SpCitylst = [];
    SpRegionlst = [];
    getSplists(CountrySplst, SpCountrylst, 'userProfile');
    getSplists(CitySplst, SpCitylst, 'userProfile');
    getSplists(RegionSplst, SpRegionlst, 'userProfile');
    getSplists(uniDomainList, SpUniDomain, 'userProfile');
    getSplists(unisubDomainList, SpUniSubDomain, 'userProfile');
    getSplists(AffiliationSplst, SpAffiliationlst, 'userProfile');

}
function SaveUserprofileToSiteList2() {
    var hostUrl1;
    hostUrl1 = getSpHostUrl();
    var appWebContext1 = new SP.ClientContext.get_current();
    var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl1);

    var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(EMSUserListName);

    //Create a CAML query that retrieves the sites for this organization
    var siteQuery1 = new SP.CamlQuery();
    siteQuery1.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' /><Value Type='Text'>"
        + $('#Email').val()
        + "</Value></Eq></Where></Query></View>");
    var targetUserResult1 = targetUsersList1.getItems(siteQuery1);

    //var targetUserResult = targetUsersList.getItems(camlQuery);
    appWebContext1.load(targetUserResult1);
    appWebContext1.executeQueryAsync(
        function () {

            var listItemEnumerator1 = targetUserResult1.getEnumerator();
            while (listItemEnumerator1.moveNext()) {

                var listItem1 = listItemEnumerator1.get_current();
                var siteuserid = listItem1.get_fieldValues()["ID"];

                ModifySiteList(siteuserid);
            }
        },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error :" + args.get_message());
                    });
}

function ModifySiteList(siteUserid) {
    var lstRole = [];
    var hostUrl;

    hostUrl = getSpHostUrl();
    //var hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
    hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
    appWebContext = new SP.ClientContext.get_current();
    var hostWebContext = new SP.AppContextSite(appWebContext, hostUrl);
    var targetUsersList = hostWebContext.get_web().get_lists().getByTitle(EMSUserListName);
    //var camlQuery = SP.CamlQuery.createAllItemsQuery();
    //var targetUserResult = targetUsersList.getItems(camlQuery);
    var targetUseritem = targetUsersList.getItemById(siteUserid);
    appWebContext.load(targetUseritem);
    appWebContext.executeQueryAsync(
        function () {




            appWebContext1 = new SP.ClientContext.get_current();
            var hostWebContext1 = new SP.AppContextSite(appWebContext1, hostUrl);
            var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(RoleSplst);
            var camlQuery = SP.CamlQuery.createAllItemsQuery();
            var targetUserResult1 = targetUsersList1.getItems(camlQuery);
            appWebContext1.load(targetUserResult1);
            appWebContext1.executeQueryAsync(
                function () {
                    var listItemEnumerator = targetUserResult1.getEnumerator();
                    while (listItemEnumerator.moveNext()) {
                        var listItem = listItemEnumerator.get_current();
                        var Title = listItem.get_fieldValues()["Title"];



                        lstRole.push({ lstItem: listItemEnumerator.get_current() });

                    }

                    for (var i = 0; i < lstRole.length; i++) {
                        var roleItem = lstRole[i];
                        if ($('#ddlRole').val() == roleItem.lstItem.get_fieldValues()["Title"]) {
                            targetUseritem.set_item(SiteColProfession, lstRole[i].lstItem);
                        }
                    }

                    //var values = $('#lstAffiliation').val();
                    //if (SpAffialiationlst.length > 0) {
                    //    for (i = 0; i < values.length; i++) {
                    //        for (var j = 0; j < SpAffialiationlst.length; j++) {
                    //            var roleItem1 = SpAffialiationlst[j];
                    //            if (values[i] == roleItem1.lstItem.get_fieldValues()["Title"]) {
                    //                var id = roleItem1.lstItem.get_fieldValues()["ID"];
                    //                var title = roleItem1.lstItem.get_fieldValues()["Title"];
                    //                var item = id + ";#" + title;
                    //                targetUseritem.set_item(SiteColUniTitle, item);
                    //                break;
                    //            }

                    //        }
                    //    }
                    //}
                    //---------------------------------------------------------
                    var affiliationlookupVals = [];
                    var affiliationvalues = $('#lstAffiliation').val();
                    if (SpAffiliationlst.length > 0) {
                        for (i = 0; i < affiliationvalues.length; i++) {
                            for (var j = 0; j < SpAffiliationlst.length; j++) {
                                var affiliationroleItem = SpAffiliationlst[j];
                                if (affiliationvalues[i] == affiliationroleItem.lstItem.get_fieldValues()["Title"]) {
                                    var id = affiliationroleItem.lstItem.get_fieldValues()["ID"];
                                    //var title = roleItem1.lstItem.get_fieldValues()["Title"];
                                    //var item = id + ";#" + title;
                                    //targetUseritem.set_item(SiteColUniTitle, item);
                                    var affiliationlookupVal = new SP.FieldLookupValue();
                                    affiliationlookupVal.set_lookupId(id);
                                    affiliationlookupVals.push(affiliationlookupVal);
                                    break;
                                }

                            }
                        }
                    }
                    targetUseritem.set_item(SiteColUniTitle, affiliationlookupVals);


                    for (var i = 0; i < SpAffiliationlst.length; i++) {
                        var PrimaryAffItem = SpAffiliationlst[i];
                        if ($('#ddlPrimaryAffiliation').val() == PrimaryAffItem.lstItem.get_fieldValues()["AppOrgID"]) {
                            targetUseritem.set_item(SitePrimaryAffiliation, PrimaryAffItem.lstItem.get_fieldValues()["AppOrgID"]);
                            //targetUseritem.set_item(SitePrimaryAffiliation, SpAffiliationlst[i].lstItem);
                            }
                    }







                    //---------------------------------------------------------
                    var uniDomainlookupVals = [];
                    var uniDomainvalues = $('#EditUserUniversityDomain').val();
                    if (SpUniDomain.length > 0) {
                        for (i = 0; i < uniDomainvalues.length; i++) {
                            for (j = 0; j < SpUniDomain.length; j++) {
                                var uniDomainroleItem1 = SpUniDomain[j];
                                if (uniDomainvalues[i] == uniDomainroleItem1.lstItem.get_fieldValues()["Title"]) {
                                    id = uniDomainroleItem1.lstItem.get_fieldValues()["ID"];
                                    var uniDomainlookupVal = new SP.FieldLookupValue();
                                    uniDomainlookupVal.set_lookupId(id);
                                    uniDomainlookupVals.push(uniDomainlookupVal);
                                    break;
                                }

                            }
                        }
                    }
                    targetUseritem.set_item(SiteColInterest, uniDomainlookupVals);

                    //---------------------------------------------------------
                    var uniSubDomainlookupVals = [];
                    var uniSubDomainvalues = $('#EditUserUniversitySubDomain').val();
                    if (SpUniSubDomain.length > 0) {
                        for (i = 0; i < uniSubDomainvalues.length; i++) {
                            for (j = 0; j < SpUniSubDomain.length; j++) {
                                var uniSubDomainroleItem = SpUniSubDomain[j];
                                if (uniSubDomainvalues[i] == uniSubDomainroleItem.lstItem.get_fieldValues()["Title"]) {
                                    id = uniSubDomainroleItem.lstItem.get_fieldValues()["ID"];
                                    //var title = roleItem1.lstItem.get_fieldValues()["Title"];
                                    //var item = id + ";#" + title;
                                    //targetUseritem.set_item(SiteColUniTitle, item);
                                    var uniSubDomainlookupVal = new SP.FieldLookupValue();
                                    uniSubDomainlookupVal.set_lookupId(id);
                                    uniSubDomainlookupVals.push(uniSubDomainlookupVal);
                                    break;
                                }

                            }
                        }
                    }
                    targetUseritem.set_item(SiteColSubInterest, uniSubDomainlookupVals);


                    var countryName = $("#ddlCountry option[value='" + $('#ddlCountry').val() + "']")[0].text;
                    //targetUseritem.set_item(SiteColCountry, countryName);
                    //targetUseritem.set_item(SiteColCity, $('#ddlCity').val());

                    for (var i = 0; i < SpCountrylst.length; i++) {
                        var countryItem = SpCountrylst[i];
                        if (countryName == countryItem.lstItem.get_fieldValues()["Title"]) {
                            targetUseritem.set_item(SiteColCountry, SpCountrylst[i].lstItem);
                        }
                    }

                    for (var i = 0; i < SpCitylst.length; i++) {
                        var cityItem = SpCitylst[i];
                        if ($('#ddlCity').val() == cityItem.lstItem.get_fieldValues()["Title"]) {
                            targetUseritem.set_item(SiteColCity, SpCitylst[i].lstItem);
                        }
                    }


                    if (countryName == 'Pakistan') {
                        targetUseritem.set_item(SiteColCNIC, $('#CNIC').val());
                        //targetUseritem.set_item(SiteColRegion, $('#ddlRegionProvince').val());
                        for (var i = 0; i < SpRegionlst.length; i++) {
                            var RegionItem = SpRegionlst[i];
                            if ($('#ddlRegionProvince').val() == RegionItem.lstItem.get_fieldValues()["Title"]) {
                                targetUseritem.set_item(SiteColRegion, SpRegionlst[i].lstItem);
                            }
                        }
                        

                    } else {
                        targetUseritem.set_item(SitePassportNumber, $('#passportNumber').val());
                    }
                    
                    targetUseritem.set_item(SiteColName, $('#FirstName').val());
                    targetUseritem.set_item(SiteColLName, $('#LastName').val());
                    targetUseritem.set_item(SitePrefix, $('#ddlPrefix').val());
                    targetUseritem.set_item(SiteContactNumber, $('#Phone').val());
                    targetUseritem.set_item(SiteColAddress, $('#Address').val());

                    targetUseritem.update();
                    appWebContext.load(targetUseritem);
                    appWebContext.executeQueryAsync(function () {
                        // Success returned from executeQueryAsync
                        var userid = targetUseritem.get_id();
                        syncSiteAppusers();
                    },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Error :" + args.get_message());
                    });
                },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
        },
function (sender, args) {
    // Failure returned from executeQueryAsync
    alert("Error :" + args.get_message());
});
}

function CancelUserProfile() {


    var errArea = document.getElementById("errAllAppUsers");
    // Remove all nodes from the errAllUniOrg <DIV> so we have a clean space to write to
    while (errArea.hasChildNodes()) {
        errArea.removeChild(errArea.lastChild);
    }

    $('#ModifyUserProfile').dialog("close");

}
function eventRODaily() {
    hideUsAll();
    document.getElementById("rodaily").style.display = 'block';
}
function eventROWeekly() {
    hideUsAll();
    document.getElementById("roweekly").style.display = 'block';
}
function eventROMonthy() {
    hideUsAll();
    document.getElementById("romonthly").style.display = 'block';
}
function eventROYearly() {
    hideUsAll();
    document.getElementById("royearly").style.display = 'block';
}

function hideUsAll() {
    document.getElementById("rodaily").style.display = 'none';
    document.getElementById("roweekly").style.display = 'none';
    document.getElementById("romonthly").style.display = 'none';
    document.getElementById("royearly").style.display = 'none';
}
function CleanUsAll() {
    $('#rodailyFrequency').val("");
    $('#rodailyRange').val("");
    $('#rodailyweekly').val("");
    $('#roweeklyRange').val("");
    $('#rodailymonthly').val("");
    $('#romonthlyRange').val("");
    $('#rodailyyearly').val("");
    $('#royearlyRange').val("");

}
function EventReOccuranceDialog() {
    $('#eventReOccurance').dialog({
        width: 'auto',
        maxWidth: 600,
        height: 'auto',
        modal: true,
        fluid: true,
        show: {
            effect: "Scale",
            duration: 1000
        },
        hide: {
            effect: "Explode",
            duration: 1000
        },
        closeText: "hide"
    });
}

function cancelEventReoccurance() {
    CleanUsAll();
    $('#eventReOccurance').dialog("close");
    //showEvents();
}
function hideLoader() {
    $("#loader").hide();
}
function showLoader() {
    $("#loader").show();
}

function saveReOccuranceEvent() {

    var _ReOccuranceEventsData = [];
    var maxStudents = getPeopleCount();
    var eventReOCRDelay = 0;
    var eventReOCRRange = 0;
    var eventReOccurSettings = getRadioValue('eventrocr');
    var eventFrequency = "";


    if (eventReOccurSettings.toLowerCase() == "daily") {
        if ($('#rodailyFrequency').val() == "" || $('#rodailyFrequency').val() > 30) {
            alert('Enter Valid Number');

            return false;
        }

        else if ($('#rodailyRange').val() == "" || $('#rodailyRange').val() > 30) {
            alert('Enter Valid Number For Range');
            return false;
        }
        else {
            eventReOCRDelay = $('#rodailyFrequency').val();
            eventReOCRRange = $('#rodailyRange').val();
        }
    }
    else if (eventReOccurSettings.toLowerCase() == "weekly") {
        if ($('#rodailyweekly').val() == "" || $('#rodailyweekly').val() > 24) {
            alert('Enter Valid Number');
            return false;
        }

        else if ($('#roweeklyRange').val() == "" || $('#roweeklyRange').val() > 24) {
            alert('Enter Valid Number For Range');

            return false;
        }

        else {
            eventReOCRDelay = $('#rodailyweekly').val();
            eventReOCRRange = $('#roweeklyRange').val();
        }
    }
    else if (eventReOccurSettings.toLowerCase() == "monthly") {
        if ($('#rodailymonthly').val() == "" || $('#rodailymonthly').val() > 12) {
            alert('Enter Valid Number');

            return false;
        }

        else if ($('#romonthlyRange').val() == "" || $('#romonthlyRange').val() > 12) {
            alert('Eneter Valid Number For Range');
            return false;
        }

        else {
            eventReOCRDelay = $('#rodailymonthly').val();
            eventReOCRRange = $('#romonthlyRange').val();
        }
    }
    else if (eventReOccurSettings.toLowerCase() == "yearly") {
        if ($('#rodailyyearly').val() == "" || $('#rodailyyearly').val() > 10) {
            alert('Eneter Valid Number');
            return false;
        }

        else if ($('#royearlyRange').val() == "" || $('#royearlyRange').val() > 10) {
            alert('Enter Valid Number For Range');
            return false;
        }
        else {
            eventReOCRDelay = $('#rodailyyearly').val();
            eventReOCRRange = $('#royearlyRange').val();
        }
    }

    if (eventId_ReOccurance > 0) {
        showLoader();
        var event_Re_OccuranceObj = [];
        var _EQuery = new SP.CamlQuery();
        _EQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Counter'>" + eventId_ReOccurance + "</Value></Eq></Where></Query></Query></View>");
        eList = web.get_lists().getByTitle('EventList');
        var elistItems = eList.getItems(_EQuery);
        context.load(elistItems);
        context.executeQueryAsync(
              function () {
                  var elistItemEnumerator = elistItems.getEnumerator();
                  while (elistItemEnumerator.moveNext()) {
                      var listItem = elistItemEnumerator.get_current();
                      areaofinterest = listItem.get_fieldValues()["EventDiscispline"];
                      event_Re_OccuranceObj.push({
                          Title: listItem.get_fieldValues()["Title"],
                          StartTime: new Date(listItem.get_fieldValues()["EventDate"]),
                          EndTime: new Date(listItem.get_fieldValues()["EndDate"]),
                          StartTimeSpan: new Date(listItem.get_fieldValues()["EndDate"]).format("hh:mm"),
                          EndTimeSpan: new Date(listItem.get_fieldValues()["EndDate"]).format("hh:mm"),
                          SiteLookup: listItem.get_fieldValues()["SiteLookup"],
                          StudentPC: listItem.get_fieldValues()["StudentPC"],
                          InstructorPC: listItem.get_fieldValues()["InstructorPC"],
                          EventCap: listItem.get_fieldValues()["EventCap"],
                          EventDescription: listItem.get_fieldValues()["EventDescription"],
                          TypeofEvent: listItem.get_fieldValues()["TypeofEvent"], EventDiscispline: listItem.get_fieldValues()["EventDiscispline"],
                          EventLocal: listItem.get_fieldValues()["EventLocal"], EventOpen: listItem.get_fieldValues()["EventOpen"],
                          EventStatus: listItem.get_fieldValues()["EventStatus"], CustomCreatedBy: listItem.get_fieldValues()["CustomCreatedBy"],
                          CustomModifiedBy: listItem.get_fieldValues()["CustomModifiedBy"], Charges: listItem.get_fieldValues()["Charges"],
                          FinalCharges: listItem.get_fieldValues()["FinalCharges"], FinalChargeDescription: listItem.get_fieldValues()["FinalChargeDescription"], SiteLookupTitle: listItem.get_fieldValues()["SiteLookupTitle"]
                      });
                  }
                  var subDomainCol = [];
                  var eList2;
                  var _EQuery2 = new SP.CamlQuery();
                  //_EQuery2.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Counter'>" + eventId_ReOccurance + "</Value></Eq></Where></Query></Query></View>");
                  _EQuery2.set_viewXml("<View><Query><Where><Eq><FieldRef Name='EventId' /><Value Type='Text'>" + eventId_ReOccurance + "</Value></Eq></Where></Query></Query></View>");

                  eList2 = web.get_lists().getByTitle('EventSubDomainMapList');
                  var elistItems2 = eList2.getItems(_EQuery2);
                  context.load(elistItems2);
                  context.executeQueryAsync(
                      function () {
                          var elistItemEnumerator = elistItems2.getEnumerator();
                          while (elistItemEnumerator.moveNext()) {
                              var listItem = elistItemEnumerator.get_current();

                              subDomainCol.push(listItem.get_fieldValues()["Title"]);

                          }
                          Re_OccuranceCalculator(event_Re_OccuranceObj, subDomainCol, eventReOccurSettings, eventReOCRDelay, eventReOCRRange, _ReOccuranceEventsData, maxStudents, eventFrequency);
                      },
                      function () {

                      }
                      );



              }

              ,
              function () {
              }
              );

    }

}


//function saveReOccuranceEvent() {

//    var _ReOccuranceEventsData = [];
//    var maxStudents = getPeopleCount();
//    var eventReOCRDelay = 0;
//    var eventReOCRRange = 0;
//    var eventReOccurSettings = getRadioValue('eventrocr');
//    var eventFrequency = "";


//    if (eventReOccurSettings.toLowerCase() == "daily") {
//        if ($('#rodailyFrequency').val() == "" || $('#rodailyFrequency').val() > 30) {
//            alert('Enter Valid Number');

//            return false;
//        }

//        else if ($('#rodailyRange').val() == "" || $('#rodailyRange').val() > 30) {
//            alert('Enter Valid Number For Range');
//            hideLoader();
//            return false;
//        }
//        else {
//            eventReOCRDelay = $('#rodailyFrequency').val();
//            eventReOCRRange = $('#rodailyRange').val();
//        }
//    }
//    else if (eventReOccurSettings.toLowerCase() == "weekly") {
//        if ($('#rodailyweekly').val() == "" || $('#rodailyweekly').val() > 24) {
//            alert('Enter Valid Number');
//            return false;
//        }

//        else if ($('#roweeklyRange').val() == "" || $('#roweeklyRange').val() > 24) {
//            alert('Enter Valid Number For Range');

//            return false;
//        }

//        else {
//            eventReOCRDelay = $('#rodailyweekly').val();
//            eventReOCRRange = $('#roweeklyRange').val();
//        }
//    }
//    else if (eventReOccurSettings.toLowerCase() == "monthly") {
//        if ($('#rodailymonthly').val() == "" || $('#rodailymonthly').val() > 12) {
//            alert('Enter Valid Number');

//            return false;
//        }

//        else if ($('#romonthlyRange').val() == "" || $('#romonthlyRange').val() > 12) {
//            alert('Eneter Valid Number For Range');
//            return false;
//        }

//        else {
//            eventReOCRDelay = $('#rodailymonthly').val();
//            eventReOCRRange = $('#romonthlyRange').val();
//        }
//    }
//    else if (eventReOccurSettings.toLowerCase() == "yearly") {
//        if ($('#rodailyyearly').val() == "" || $('#rodailyyearly').val() > 10) {
//            alert('Eneter Valid Number');
//            return false;
//        }

//        else if ($('#royearlyRange').val() == "" || $('#royearlyRange').val() > 10) {
//            alert('Enter Valid Number For Range');
//            return false;
//        }
//        else {
//            eventReOCRDelay = $('#rodailyyearly').val();
//            eventReOCRRange = $('#royearlyRange').val();
//        }
//    }

//    if (eventId_ReOccurance > 0) {
//        showLoader();
//        var event_Re_OccuranceObj = [];
//        var _EQuery = new SP.CamlQuery();
//        _EQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='ID' /><Value Type='Counter'>" + eventId_ReOccurance + "</Value></Eq></Where></Query></Query></View>");
//        eList = web.get_lists().getByTitle('EventList');
//        var elistItems = eList.getItems(_EQuery);
//        context.load(elistItems);
//        context.executeQueryAsync(
//              function () {
//                  var elistItemEnumerator = elistItems.getEnumerator();
//                  while (elistItemEnumerator.moveNext()) {
//                      var listItem = elistItemEnumerator.get_current();
//                      areaofinterest = listItem.get_fieldValues()["EventDiscispline"];
//                      event_Re_OccuranceObj.push({
//                          Title: listItem.get_fieldValues()["Title"],
//                          StartTime: new Date(listItem.get_fieldValues()["EventDate"]),
//                          EndTime: new Date(listItem.get_fieldValues()["EndDate"]),
//                          StartTimeSpan: new Date(listItem.get_fieldValues()["EndDate"]).format("hh:mm"),
//                          EndTimeSpan: new Date(listItem.get_fieldValues()["EndDate"]).format("hh:mm"),
//                          SiteLookup: listItem.get_fieldValues()["SiteLookup"],
//                          StudentPC: listItem.get_fieldValues()["StudentPC"],
//                          InstructorPC: listItem.get_fieldValues()["InstructorPC"],
//                          EventCap: listItem.get_fieldValues()["EventCap"],
//                          EventDescription: listItem.get_fieldValues()["EventDescription"],
//                          TypeofEvent: listItem.get_fieldValues()["TypeofEvent"], EventDiscispline: listItem.get_fieldValues()["EventDiscispline"],
//                          EventLocal: listItem.get_fieldValues()["EventLocal"], EventOpen: listItem.get_fieldValues()["EventOpen"],
//                          EventStatus: listItem.get_fieldValues()["EventStatus"], CustomCreatedBy: listItem.get_fieldValues()["CustomCreatedBy"],
//                          CustomModifiedBy: listItem.get_fieldValues()["CustomModifiedBy"], Charges: listItem.get_fieldValues()["Charges"],
//                          FinalCharges: listItem.get_fieldValues()["FinalCharges"], FinalChargeDescription: listItem.get_fieldValues()["FinalChargeDescription"],
//                          SiteTitle: listItem.get_fieldValues()["SiteLookupTitle"]
//                      });
//                  }
//                  var eventOccuranceDate;
//                  var eventDayDiff = DaysDif(event_Re_OccuranceObj[0].StartTime, event_Re_OccuranceObj[0].EndTime);

//                  if (event_Re_OccuranceObj.length > 0) {
//                      for (var i = 0; i < event_Re_OccuranceObj.length; i++) {
//                          if (eventReOccurSettings.toLowerCase() == "daily") {
//                              var delayCounter = parseInt(eventReOCRDelay);
//                              //alert(event_Re_OccuranceObj[0].StartTime);
//                              for (var i = 0; i < eventReOCRRange; i++) {

//                                  var startdate;
//                                  var enddate;
//                                  if (i == 0) {
//                                      if (event_Re_OccuranceObj[0].StartTime < new Date()) {
//                                          eventOccuranceDate = new Date();
//                                      } else {
//                                          eventOccuranceDate = event_Re_OccuranceObj[0].StartTime;
//                                      }


//                                      if (eventOccuranceDate.getDate() == event_Re_OccuranceObj[0].StartTime.getDate()) {
//                                          //eventOccuranceDate.setDate(eventOccuranceDate.getDate() + delayCounter);
//                                          eventOccuranceDate = AddDays(eventOccuranceDate, 0, delayCounter);
//                                      }
//                                      eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));


//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));

//                                  } else {

//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      startdate = AddDays(startdate, 0, delayCounter);
//                                      startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());

//                                      //startdate = AddDays(event_occurance_date, 0, 0);
//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
//                                  }

//                                  _ReOccuranceEventsData.push({
//                                      Title: event_Re_OccuranceObj[0].Title,
//                                      StartTime: startdate,
//                                      EndTime: enddate,
//                                      SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
//                                      StudentPC: event_Re_OccuranceObj[0].StudentPC,
//                                      InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
//                                      EventCap: event_Re_OccuranceObj[0].EventCap,
//                                      EventDescription: event_Re_OccuranceObj[0].EventDescription,
//                                      TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
//                                      EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
//                                      EventLocal: event_Re_OccuranceObj[0].EventLocal,
//                                      EventOpen: event_Re_OccuranceObj[0].EventOpen,
//                                      EventStatus: event_Re_OccuranceObj[0].EventStatus,
//                                      CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
//                                      CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
//                                      Charges: event_Re_OccuranceObj[0].Charges,
//                                      FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
//                                      FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
//                                      SiteTitle: event_Re_OccuranceObj[0].SiteTitle
//                                  });

//                              }
//                              var EventReOccurIterator = 0;
//                              if (_ReOccuranceEventsData.length > 0) {
//                                  Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
//                                  SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator);
//                              }
//                          }
//                          else if (eventReOccurSettings.toLowerCase() == "weekly") {

//                              var delayCounter = parseInt(eventReOCRDelay);
//                              for (var i = 0; i < eventReOCRRange; i++) {
//                                  var startdate;
//                                  var enddate;
//                                  if (i == 0) {
//                                      eventOccuranceDate = new Date();
//                                      if (eventOccuranceDate.getDate() == event_Re_OccuranceObj[0].StartTime.getDate()) {
//                                          //eventOccuranceDate.setDate(eventOccuranceDate.getDate() + 7);
//                                          eventOccuranceDate = AddDays(eventOccuranceDate, 0, delayCounter * 7);
//                                          //alert(eventOccuranceDate.get_weekOfYear());
//                                      }
//                                      eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      //startdate = event_occurance_date;


//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));


//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());


//                                  } else {

//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      startdate = AddDays(startdate, 0, delayCounter * 7);
//                                      startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

//                                      //startdate = AddDays(event_occurance_date, 0, 0);
//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
//                                  }

//                                  _ReOccuranceEventsData.push({
//                                      Title: event_Re_OccuranceObj[0].Title,
//                                      StartTime: startdate,
//                                      EndTime: enddate,
//                                      SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
//                                      StudentPC: event_Re_OccuranceObj[0].StudentPC,
//                                      InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
//                                      EventCap: event_Re_OccuranceObj[0].EventCap,
//                                      EventDescription: event_Re_OccuranceObj[0].EventDescription,
//                                      TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
//                                      EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
//                                      EventLocal: event_Re_OccuranceObj[0].EventLocal,
//                                      EventOpen: event_Re_OccuranceObj[0].EventOpen,
//                                      EventStatus: event_Re_OccuranceObj[0].EventStatus,
//                                      CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
//                                      CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
//                                      Charges: event_Re_OccuranceObj[0].Charges,
//                                      FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
//                                      FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
//                                      SiteTitle: event_Re_OccuranceObj[0].SiteTitle
//                                  });
//                              }
//                              var EventReOccurIterator = 0;
//                              if (_ReOccuranceEventsData.length > 0) {
//                                  Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
//                                  SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator);
//                              }
//                          }
//                          else if (eventReOccurSettings.toLowerCase() == "monthly") {
//                              var delayCounter = parseInt(eventReOCRDelay);;

//                              for (var i = 0; i < eventReOCRRange; i++) {

//                                  var startdate;
//                                  var enddate;
//                                  if (i == 0) {
//                                      eventOccuranceDate = new Date();
//                                      if (eventOccuranceDate.getMonth() == event_Re_OccuranceObj[0].StartTime.getMonth()) {
//                                          //eventOccuranceDate.setMonth(eventOccuranceDate.getMonth() + 1);
//                                          eventOccuranceDate = AddMonths(eventOccuranceDate, 0, delayCounter);
//                                      }
//                                      eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      //startdate = event_occurance_date;
//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      //enddate = AddMonths(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));

//                                  } else {

//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      //startdate = AddDays(startdate, 0, delayCounter * );
//                                      startdate = AddMonths(startdate, 0, delayCounter);

//                                      startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

//                                      //startdate = AddDays(event_occurance_date, 0, 0);
//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      //enddate = AddMonths(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
//                                  }

//                                  //event_occurance_date = startdate; 
//                                  _ReOccuranceEventsData.push({
//                                      Title: event_Re_OccuranceObj[0].Title,
//                                      StartTime: startdate,
//                                      EndTime: enddate,
//                                      SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
//                                      StudentPC: event_Re_OccuranceObj[0].StudentPC,
//                                      InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
//                                      EventCap: event_Re_OccuranceObj[0].EventCap,
//                                      EventDescription: event_Re_OccuranceObj[0].EventDescription,
//                                      TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
//                                      EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
//                                      EventLocal: event_Re_OccuranceObj[0].EventLocal,
//                                      EventOpen: event_Re_OccuranceObj[0].EventOpen,
//                                      EventStatus: event_Re_OccuranceObj[0].EventStatus,
//                                      CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
//                                      CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
//                                      Charges: event_Re_OccuranceObj[0].Charges,
//                                      FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
//                                      FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
//                                      SiteTitle: event_Re_OccuranceObj[0].SiteTitle
//                                  });

//                              }
//                              var EventReOccurIterator = 0;
//                              if (_ReOccuranceEventsData.length > 0) {
//                                  Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
//                                  SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator);
//                              }
//                          }
//                          else if (eventReOccurSettings.toLowerCase() == "yearly") {
//                              var delayCounter = parseInt(eventReOCRDelay);;
//                              for (var i = 0; i < eventReOCRRange; i++) {
//                                  var startdate;
//                                  var enddate;
//                                  if (i == 0) {
//                                      eventOccuranceDate = new Date();
//                                      if (eventOccuranceDate.getFullYear() == event_Re_OccuranceObj[0].StartTime.getFullYear()) {
//                                          //eventOccuranceDate.setFullYear(eventOccuranceDate.getFullYear() + 1);
//                                          eventOccuranceDate = AddYear(eventOccuranceDate, 0, delayCounter);
//                                      }
//                                      eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      //startdate = event_occurance_date;
//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));


//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      //enddate = AddYear(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));

//                                  } else {

//                                      startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
//                                      //startdate = AddDays(startdate, 0, delayCounter);
//                                      startdate = AddYear(startdate, 0, delayCounter);
//                                      startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
//                                      startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
//                                      eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

//                                      //startdate = AddDays(event_occurance_date, 0, 0);
//                                      enddate = new Date(JSON.parse(JSON.stringify(startdate)));
//                                      enddate = AddDays(enddate, eventDayDiff, 0);
//                                      //enddate = AddYear(enddate, eventDayDiff, 0);
//                                      enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
//                                      enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
//                                      //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
//                                  }


//                                  //event_occurance_date = startdate; 

//                                  _ReOccuranceEventsData.push({
//                                      Title: event_Re_OccuranceObj[0].Title,
//                                      StartTime: startdate,
//                                      EndTime: enddate,
//                                      SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
//                                      StudentPC: event_Re_OccuranceObj[0].StudentPC,
//                                      InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
//                                      EventCap: event_Re_OccuranceObj[0].EventCap,
//                                      EventDescription: event_Re_OccuranceObj[0].EventDescription,
//                                      TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
//                                      EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
//                                      EventLocal: event_Re_OccuranceObj[0].EventLocal,
//                                      EventOpen: event_Re_OccuranceObj[0].EventOpen,
//                                      EventStatus: event_Re_OccuranceObj[0].EventStatus,
//                                      CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
//                                      CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
//                                      Charges: event_Re_OccuranceObj[0].Charges,
//                                      FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
//                                      FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
//                                      SiteTitle: event_Re_OccuranceObj[0].SiteTitle
//                                  });
//                                  //delayCounter += eventReOCRDelay;
//                              }
//                              var EventReOccurIterator = 0;
//                              if (_ReOccuranceEventsData.length > 0) {
//                                  Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
//                                  SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator);
//                              }
//                          }
//                      }
//                  }
//              }

//              ,
//              function () {
//              }
//              );

//    }

//}

//function SaveReOccuranceEventToList(_ReOccuranceEventsData, eventid, EventReOccurIterator) {
//    var myList = web.get_lists().getByTitle('EventList');

//    // for (i = 0; i < _ReOccuranceEventsData.length; i++) {
//    var itemCreateInfo = new SP.ListItemCreationInformation();
//    var eventItem = myList.addItem(itemCreateInfo);
//    //alert(counter);
//    eventItem.set_item("Title", _ReOccuranceEventsData[EventReOccurIterator].Title);
//    eventItem.set_item("EventDate", _ReOccuranceEventsData[EventReOccurIterator].StartTime);
//    eventItem.set_item("EndDate", _ReOccuranceEventsData[EventReOccurIterator].EndTime);
//    eventItem.set_item("EventDescription", _ReOccuranceEventsData[EventReOccurIterator].EventDescription);
//    eventItem.set_item("TypeofEvent", _ReOccuranceEventsData[EventReOccurIterator].TypeofEvent);
//    eventItem.set_item("EventDiscispline", _ReOccuranceEventsData[EventReOccurIterator].EventDiscispline);
//    eventItem.set_item("CustomCreatedBy", useremail);
//    if (eventOrganizer) {
//        eventItem.set_item("EventStatus", 'New');
//    }
//    else {
//        eventItem.set_item("EventStatus", 'Approved');
//    }
//    eventItem.set_item("EventCap", _ReOccuranceEventsData[EventReOccurIterator].EventCap);
//    eventItem.set_item("EventOpen", _ReOccuranceEventsData[EventReOccurIterator].EventOpen);
//    eventItem.set_item("EventLocal", _ReOccuranceEventsData[EventReOccurIterator].EventLocal);
//    eventItem.set_item("SiteLookup", _ReOccuranceEventsData[EventReOccurIterator].SiteLookup);
//    eventItem.set_item("RecurringEventId", eventid);

//    eventItem.update();
//    context.load(eventItem);
//    context.executeQueryAsync(function () {
//        var mieventid = eventItem.get_id();

//        //addEmployeeRecursion("System", mieventid);

//        empList = web.get_lists().getByTitle("Employee");
//        var camlQuery = SP.CamlQuery.createAllItemsQuery();
//        var listItems = empList.getItems(camlQuery);
//        var hasEmployee = false;
//        context.load(listItems);
//        context.executeQueryAsync(
//           function () {
//               // Success returned from executeQueryAsync
//               var itemCreateInfo = new SP.ListItemCreationInformation();
//               var listItem = empList.addItem(itemCreateInfo);
//               listItem.set_item("Title", "System");
//               listItem.set_item("EventLookup", mieventid);
//               listItem.set_item("_Status", "Enrolled");

//               listItem.update();
//               context.load(listItem);
//               context.executeQueryAsync(function () {
//                   //dont modify this >-1 to >0 , it is already runing for zero case as well
//                   if (mieventid > 0 && Global_Counter_FoRecursion > 0) {
//                       Global_Counter_FoRecursion--;
//                       EventReOccurIterator++;
//                       SaveReOccuranceEventToList(_ReOccuranceEventsData, eventid, EventReOccurIterator);

//                   } else {
//                       Global_Counter_FoRecursion--;
//                   }
//                   if (Global_Counter_FoRecursion < 0) {
//                       ModifyEventAsRecurring(eventid);
//                       cancelEventReoccurance();
//                       hideLoader();
//                       if (eventOrganizer) {
//                           showEventsForAttendeeView();
//                       } else {
//                           showEvents();
//                       }
//                   }

//               });
//           },
//           function (sender, args) {
//               // Failure returned from executeQueryAsync
//               alert("Failure " + args.get_message());
//           });







//    },
//     function (sender, args) {
//         alert('Error');
//     });
//}

function SaveReOccuranceEventToList(_ReOccuranceEventsData, eventid, EventReOccurIterator, subDomainCol) {
    var myList = web.get_lists().getByTitle('EventList');

    // for (i = 0; i < _ReOccuranceEventsData.length; i++) {
    var itemCreateInfo = new SP.ListItemCreationInformation();
    var eventItem = myList.addItem(itemCreateInfo);
    //alert(counter);
    eventItem.set_item("Title", _ReOccuranceEventsData[EventReOccurIterator].Title);
    eventItem.set_item("EventDate", _ReOccuranceEventsData[EventReOccurIterator].StartTime);
    eventItem.set_item("EndDate", _ReOccuranceEventsData[EventReOccurIterator].EndTime);
    eventItem.set_item("EventDescription", _ReOccuranceEventsData[EventReOccurIterator].EventDescription);
    eventItem.set_item("TypeofEvent", _ReOccuranceEventsData[EventReOccurIterator].TypeofEvent);
    eventItem.set_item("EventDiscispline", _ReOccuranceEventsData[EventReOccurIterator].EventDiscispline);
    eventItem.set_item("CustomCreatedBy", useremail);
    if (eventOrganizer) {
        eventItem.set_item("EventStatus", 'New');
    }
    else {
        eventItem.set_item("EventStatus", 'Approved');
    }
    eventItem.set_item("EventCap", _ReOccuranceEventsData[EventReOccurIterator].EventCap);
    eventItem.set_item("EventOpen", _ReOccuranceEventsData[EventReOccurIterator].EventOpen);
    eventItem.set_item("EventLocal", _ReOccuranceEventsData[EventReOccurIterator].EventLocal);
    eventItem.set_item("SiteLookup", _ReOccuranceEventsData[EventReOccurIterator].SiteLookup);
    eventItem.set_item("SiteLookupTitle", _ReOccuranceEventsData[EventReOccurIterator].SiteLookupTitle);
    eventItem.set_item("RecurringEventId", eventid);

    eventItem.update();


    context.load(eventItem);
    context.executeQueryAsync(function () {
        var objspevent = [];
        var mieventid = eventItem.get_id();
        objspevent.push({ ID: mieventid, title: _ReOccuranceEventsData[EventReOccurIterator].Title, StartDate: _ReOccuranceEventsData[EventReOccurIterator].StartTime, EndDate: _ReOccuranceEventsData[EventReOccurIterator].EndTime, SiteName: _ReOccuranceEventsData[EventReOccurIterator].SiteLookupTitle, EventUniversityDomain: _ReOccuranceEventsData[EventReOccurIterator].EventDiscispline, IsRecurring: false, RecurrenceEventId: 0 });
        var request = 'ADD';
        saveEventToSiteList(objspevent, request);

        var icsFile = CreateICSLink(mieventid);
        eventItem.set_item("ICSFile", icsFile);
        eventItem.update();
        AddEventDomainMappingItems('EventSubDomainMapList', subDomainCol, mieventid);
        if (eventOrganizer) {
            Emailing(useremail, dont_Reply_Email_Address, 'HEC EMS Alert', "Dear " + user + ",<br/><br/><br/>Your request for new EVENT Creation [Name: <b>" + $('#newEvent').val() + "</b>] has submitted sucessfully.<br/><br/><br/>HEC Event Management System<br/><br/><br/>*************system generated email,do not reply to this email.*************");
        }

        empList = web.get_lists().getByTitle("Employee");
        var camlQuery = SP.CamlQuery.createAllItemsQuery();
        var listItems = empList.getItems(camlQuery);
        var hasEmployee = false;
        context.load(listItems);
        context.executeQueryAsync(
           function () {
               // Success returned from executeQueryAsync
               var itemCreateInfo = new SP.ListItemCreationInformation();
               var listItem = empList.addItem(itemCreateInfo);
               listItem.set_item("Title", "System");
               listItem.set_item("EventLookup", mieventid);
               listItem.set_item("_Status", "Enrolled");

               listItem.update();
               context.load(listItem);
               context.executeQueryAsync(function () {
                   //dont modify this >-1 to >0 , it is already runing for zero case as well
                   if (mieventid > 0 && Global_Counter_FoRecursion > 0) {
                       Global_Counter_FoRecursion--;
                       EventReOccurIterator++;
                       SaveReOccuranceEventToList(_ReOccuranceEventsData, eventid, EventReOccurIterator, subDomainCol);

                   } else {
                       Global_Counter_FoRecursion--;
                   }
                   if (Global_Counter_FoRecursion < 0) {
                       ModifyEventAsRecurring(eventid);
                       cancelEventReoccurance();
                       hideLoader();
                       if (eventOrganizer) {
                           showEventsForAttendeeView();
                       } else {
                           showEvents();
                       }
                   }

               });
           },
           function (sender, args) {
               // Failure returned from executeQueryAsync
               alert("Failure " + args.get_message());
           });

    },
     function (sender, args) {
         alert('Error');
     });
}

function Re_OccuranceCalculator(event_Re_OccuranceObj, subDomainCol, eventReOccurSettings, eventReOCRDelay, eventReOCRRange, _ReOccuranceEventsData, maxStudents, eventFrequency) {

    var eventOccuranceDate;
    var eventDayDiff = DaysDif(event_Re_OccuranceObj[0].StartTime, event_Re_OccuranceObj[0].EndTime);

    if (event_Re_OccuranceObj.length > 0) {
        for (var i = 0; i < event_Re_OccuranceObj.length; i++) {
            if (eventReOccurSettings.toLowerCase() == "daily") {
                var delayCounter = parseInt(eventReOCRDelay);
                //alert(event_Re_OccuranceObj[0].StartTime);
                for (var i = 0; i < eventReOCRRange; i++) {

                    var startdate;
                    var enddate;
                    if (i == 0) {
                        if (event_Re_OccuranceObj[0].StartTime < new Date()) {
                            eventOccuranceDate = new Date();
                        } else {
                            eventOccuranceDate = event_Re_OccuranceObj[0].StartTime;
                        }


                        if (eventOccuranceDate.getDate() == event_Re_OccuranceObj[0].StartTime.getDate()) {
                            //eventOccuranceDate.setDate(eventOccuranceDate.getDate() + delayCounter);
                            eventOccuranceDate = AddDays(eventOccuranceDate, 0, delayCounter);
                        }
                        eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));


                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));

                    } else {

                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        startdate = AddDays(startdate, 0, delayCounter);
                        startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());

                        //startdate = AddDays(event_occurance_date, 0, 0);
                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
                    }

                    _ReOccuranceEventsData.push({
                        Title: event_Re_OccuranceObj[0].Title,
                        StartTime: startdate,
                        EndTime: enddate,
                        SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
                        StudentPC: event_Re_OccuranceObj[0].StudentPC,
                        InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
                        EventCap: event_Re_OccuranceObj[0].EventCap,
                        EventDescription: event_Re_OccuranceObj[0].EventDescription,
                        TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
                        EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
                        EventLocal: event_Re_OccuranceObj[0].EventLocal,
                        EventOpen: event_Re_OccuranceObj[0].EventOpen,
                        EventStatus: event_Re_OccuranceObj[0].EventStatus,
                        CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
                        CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
                        Charges: event_Re_OccuranceObj[0].Charges,
                        FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
                        FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
                        SiteLookupTitle: event_Re_OccuranceObj[0].SiteLookupTitle,
                    });

                }
                var EventReOccurIterator = 0;
                if (_ReOccuranceEventsData.length > 0) {
                    Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
                    SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator, subDomainCol);
                }
            }
            else if (eventReOccurSettings.toLowerCase() == "weekly") {

                var delayCounter = parseInt(eventReOCRDelay);
                for (var i = 0; i < eventReOCRRange; i++) {
                    var startdate;
                    var enddate;
                    if (i == 0) {
                        eventOccuranceDate = new Date();
                        if (eventOccuranceDate.getDate() == event_Re_OccuranceObj[0].StartTime.getDate()) {
                            //eventOccuranceDate.setDate(eventOccuranceDate.getDate() + 7);
                            eventOccuranceDate = AddDays(eventOccuranceDate, 0, delayCounter * 7);
                            //alert(eventOccuranceDate.get_weekOfYear());
                        }
                        eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        //startdate = event_occurance_date;


                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));


                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());


                    } else {

                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        startdate = AddDays(startdate, 0, delayCounter * 7);
                        startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

                        //startdate = AddDays(event_occurance_date, 0, 0);
                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
                    }

                    _ReOccuranceEventsData.push({
                        Title: event_Re_OccuranceObj[0].Title,
                        StartTime: startdate,
                        EndTime: enddate,
                        SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
                        StudentPC: event_Re_OccuranceObj[0].StudentPC,
                        InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
                        EventCap: event_Re_OccuranceObj[0].EventCap,
                        EventDescription: event_Re_OccuranceObj[0].EventDescription,
                        TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
                        EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
                        EventLocal: event_Re_OccuranceObj[0].EventLocal,
                        EventOpen: event_Re_OccuranceObj[0].EventOpen,
                        EventStatus: event_Re_OccuranceObj[0].EventStatus,
                        CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
                        CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
                        Charges: event_Re_OccuranceObj[0].Charges,
                        FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
                        FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
                        SiteLookupTitle: event_Re_OccuranceObj[0].SiteLookupTitle
                    });
                }
                var EventReOccurIterator = 0;
                if (_ReOccuranceEventsData.length > 0) {
                    Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
                    SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator, subDomainCol);
                }
            }
            else if (eventReOccurSettings.toLowerCase() == "monthly") {
                var delayCounter = parseInt(eventReOCRDelay);;

                for (var i = 0; i < eventReOCRRange; i++) {

                    var startdate;
                    var enddate;
                    if (i == 0) {
                        eventOccuranceDate = new Date();
                        if (eventOccuranceDate.getMonth() == event_Re_OccuranceObj[0].StartTime.getMonth()) {
                            //eventOccuranceDate.setMonth(eventOccuranceDate.getMonth() + 1);
                            eventOccuranceDate = AddMonths(eventOccuranceDate, 0, delayCounter);
                        }
                        eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        //startdate = event_occurance_date;
                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        //enddate = AddMonths(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));

                    } else {

                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        //startdate = AddDays(startdate, 0, delayCounter * );
                        startdate = AddMonths(startdate, 0, delayCounter);

                        startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

                        //startdate = AddDays(event_occurance_date, 0, 0);
                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        //enddate = AddMonths(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
                    }

                    //event_occurance_date = startdate; 
                    _ReOccuranceEventsData.push({
                        Title: event_Re_OccuranceObj[0].Title,
                        StartTime: startdate,
                        EndTime: enddate,
                        SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
                        StudentPC: event_Re_OccuranceObj[0].StudentPC,
                        InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
                        EventCap: event_Re_OccuranceObj[0].EventCap,
                        EventDescription: event_Re_OccuranceObj[0].EventDescription,
                        TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
                        EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
                        EventLocal: event_Re_OccuranceObj[0].EventLocal,
                        EventOpen: event_Re_OccuranceObj[0].EventOpen,
                        EventStatus: event_Re_OccuranceObj[0].EventStatus,
                        CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
                        CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
                        Charges: event_Re_OccuranceObj[0].Charges,
                        FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
                        FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
                        SiteLookupTitle: event_Re_OccuranceObj[0].SiteLookupTitle
                    });

                }
                var EventReOccurIterator = 0;
                if (_ReOccuranceEventsData.length > 0) {
                    Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
                    SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator, subDomainCol);
                }
            }
            else if (eventReOccurSettings.toLowerCase() == "yearly") {
                var delayCounter = parseInt(eventReOCRDelay);;
                for (var i = 0; i < eventReOCRRange; i++) {
                    var startdate;
                    var enddate;
                    if (i == 0) {
                        eventOccuranceDate = new Date();
                        if (eventOccuranceDate.getFullYear() == event_Re_OccuranceObj[0].StartTime.getFullYear()) {
                            //eventOccuranceDate.setFullYear(eventOccuranceDate.getFullYear() + 1);
                            eventOccuranceDate = AddYear(eventOccuranceDate, 0, delayCounter);
                        }
                        eventOccuranceDate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        eventOccuranceDate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        //startdate = event_occurance_date;
                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));


                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        //enddate = AddYear(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));

                    } else {

                        startdate = new Date(JSON.parse(JSON.stringify(eventOccuranceDate)));
                        //startdate = AddDays(startdate, 0, delayCounter);
                        startdate = AddYear(startdate, 0, delayCounter);
                        startdate.setHours(event_Re_OccuranceObj[0].StartTime.getHours());
                        startdate.setMinutes(event_Re_OccuranceObj[0].StartTime.getMinutes());
                        eventOccuranceDate = new Date(JSON.parse(JSON.stringify(startdate)));

                        //startdate = AddDays(event_occurance_date, 0, 0);
                        enddate = new Date(JSON.parse(JSON.stringify(startdate)));
                        enddate = AddDays(enddate, eventDayDiff, 0);
                        //enddate = AddYear(enddate, eventDayDiff, 0);
                        enddate.setHours(event_Re_OccuranceObj[0].EndTime.getHours());
                        enddate.setMinutes(event_Re_OccuranceObj[0].EndTime.getMinutes());
                        //eventOccuranceDate = new Date(JSON.parse(JSON.stringify(enddate)));
                    }


                    //event_occurance_date = startdate; 

                    _ReOccuranceEventsData.push({
                        Title: event_Re_OccuranceObj[0].Title,
                        StartTime: startdate,
                        EndTime: enddate,
                        SiteLookup: event_Re_OccuranceObj[0].SiteLookup,
                        StudentPC: event_Re_OccuranceObj[0].StudentPC,
                        InstructorPC: event_Re_OccuranceObj[0].InstructorPC,
                        EventCap: event_Re_OccuranceObj[0].EventCap,
                        EventDescription: event_Re_OccuranceObj[0].EventDescription,
                        TypeofEvent: event_Re_OccuranceObj[0].TypeofEvent,
                        EventDiscispline: event_Re_OccuranceObj[0].EventDiscispline,
                        EventLocal: event_Re_OccuranceObj[0].EventLocal,
                        EventOpen: event_Re_OccuranceObj[0].EventOpen,
                        EventStatus: event_Re_OccuranceObj[0].EventStatus,
                        CustomCreatedBy: event_Re_OccuranceObj[0].CustomCreatedBy,
                        CustomModifiedBy: event_Re_OccuranceObj[0].CustomModifiedBy,
                        Charges: event_Re_OccuranceObj[0].Charges,
                        FinalCharges: event_Re_OccuranceObj[0].FinalCharges,
                        FinalChargeDescription: event_Re_OccuranceObj[0].FinalChargeDescription,
                        SiteLookupTitle: event_Re_OccuranceObj[0].SiteLookupTitle,
                    });
                    //delayCounter += eventReOCRDelay;
                }
                var EventReOccurIterator = 0;
                if (_ReOccuranceEventsData.length > 0) {
                    Global_Counter_FoRecursion = _ReOccuranceEventsData.length - 1;//dont modify ,critical falg
                    SaveReOccuranceEventToList(_ReOccuranceEventsData, eventId_ReOccurance, EventReOccurIterator, subDomainCol);
                }
            }
        }
    }

}






function ModifyEventAsRecurring(eventid) {

    var eventList = web.get_lists().getByTitle('EventList');
    var eventcurrentItem1 = eventList.getItemById(eventid);
    context.load(eventcurrentItem1);
    context.executeQueryAsync(
        function () {
            // Success returned from executeQueryAsync

            eventcurrentItem1.set_item("IsRecurring", true);

            eventcurrentItem1.update();
            context.load(eventcurrentItem1);
            context.executeQueryAsync(function () {
                // Success returned from executeQueryAsync

            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Error :" + args.get_message());
            });

}



function DaysDif(startDate, endDate) {
    var diffDay = endDate.getDate() - startDate.getDate();
    return diffDay;
}

function AddDays(date, dayDiff, days) {
    if (dayDiff > 0) {
        date.setDate(date.getDate() + dayDiff);
    }
    if (days > 0) {
        date.setDate(date.getDate() + days);
    }
    return date;
}

function AddMonths(date, dayDiff, days) {
    if (dayDiff > 0) {
        date.setMonth(date.getMonth() + dayDiff);
    }
    if (days > 0) {
        date.setMonth(date.getMonth() + days);
    }
    return date;
}

function AddYear(date, dayDiff, days) {
    if (dayDiff > 0) {
        date.setFullYear(date.getFullYear() + dayDiff);
    }
    if (days > 0) {
        date.setFullYear(date.getFullYear() + days);
    }
    return date;
}


function ShareOnFacebook(myArray, request) {
    showLoader();
    var eventid = myArray[0];
    var eventDesc = "";
    var siteId = 0;
    var _event;
    var _EventList = web.get_lists().getByTitle('EventList');
    _event = _EventList.getItemById(eventid);
    var evetCxt = SP.ClientContext.get_current();
    evetCxt.load(_event);
    evetCxt.executeQueryAsync(
         function () {
             eventDesc = _event.get_fieldValues()["EventDescription"];
             if (eventDesc == null)
                 eventDesc = "";
             var imgUrl = _event.get_fieldValues()["ImgURL"];
             //alert(imgUrl); for testing
             siteId = _event.get_fieldValues()["SiteLookup"].get_lookupValue();
             shareonFb(myArray, request, eventDesc, siteId, imgUrl);

         },
function (sender, args) {
    hideLoader();
    alert("Failure " + args.get_message());
});



}
function shareonFb(myArray, request, eventDesc, siteId, imgUrl) {
    var hostweburl;
    hostweburl = getSpHostUrl();
    var eventVenue;
    var startime;
    var endtime;
    if (request == "EmpView") {
        startime = myArray[2];
        endtime = myArray[3];
    } else {
        startime = myArray[3];
        endtime = myArray[4];
    }

    siteList = web.get_lists().getByTitle('PSites');
    siteItem = siteList.getItemById(siteId);
    var siteContext = SP.ClientContext.get_current();
    siteContext.load(siteItem);
    siteContext.executeQueryAsync(
        function () {
            eventVenue = siteItem.get_fieldValues()["Title"];
            ShareMyFeed(myArray[1], hostweburl, imgUrl, eventVenue, " Starting " + startime + " To " + endtime + " " + eventDesc, 'Share this post');
            hideLoader();
        },
function (sender, args) {
    hideLoader();
    alert("Failure " + args.get_message());
});
}

function emsHelp() {

    alert('please email webmaster@hec.gov.pk for help');

}
function emsLogOut() {
    if (confirm("Are you sure you want to log out of EMS?") == true) {
        var hostUrl;
        hostUrl = decodeURIComponent(getQueryStringParameter("SPHostUrl"));
        var hostSiteUrl = JSON.parse(JSON.stringify(hostUrl));
        // alert(hostUrl);
        // alert(hostSiteUrl);
        var redirect = hostUrl + "/_layouts/15/SignOut.aspx";
        //alert(redirect);

        window.location = redirect;

    }


}

function ExportBill() {
    //$('#tblbillCharges').tableExport({ type: 'pdf', escape: 'false' });
    $("#PrintbillCharges").show();
    //document.getElementById("PrinttblbillCharges").style.display = 'block';
    //$('#PrinttblbillCharges').css("display", "block");
    //$('#PrinttblbillCharges').style.display = 'block';
    $('#PrinttblbillCharges').tableExport({ type: 'pdf', escape: 'false' });
    $("#PrintbillCharges").hide();
    //document.getElementById("chartsDiv").style.display = 'none';

}
function CreateICSLink(eventId) {

    var hostSiteUrl = window.location.protocol + "//" + window.location.host + _spPageContextInfo.siteServerRelativeUrl;
    var link = "";
    link = hostSiteUrl + "/HECEMS/_vti_bin/owssvr.dll?CS=109&Cmd=Display&List={" + eventListId + "}&CacheControl=1&ID=" + eventId + "&Using=event.ics";
    return link;
}
function GetEventListId() {
    context = SP.ClientContext.get_current();
    list = web.get_lists().getByTitle('EventList');
    context.load(list, 'Title', 'Id');
    context.load(list);
    context.executeQueryAsync(function () {
        var listId = list.get_id();
        testId = listId;
        eventListId = listId._m_guidString$p$0;
        //console.log(listId);
        console.log("Test ID:" + testId);
    });

}

function ChangeGroupColor() {

    $('#evetnsTable > tbody > tr').each(function () {
        var $tds = $(this).find('td');
        var reoccuringId = $tds.eq(15).text();
        if (parseInt(reoccuringId) > 0) {
            $(this).removeClass("even").removeClass("odd");
            $(this).find('td').removeClass("rowEditEvent").removeClass("sorting_1");
            $(this).find('td').addClass("event-group");
        }
    });
}

function saveEventToSiteList(objspevent, request) {

    // get properties from Site EmsUsers
    var hostUrl2;
    hostUrl2 = getSpHostUrl();

    var appWebContext2 = new SP.ClientContext.get_current();
    var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl2);
    var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(EventSplst);
    if (request != 'update') {

        var itemCreateInfo = new SP.ListItemCreationInformation();
        var eventItem1 = targetUsersList2.addItem(itemCreateInfo);


        //eventItem.set_item("EventDescription", $('#newEventDescription').val());
        //eventItem.set_item("EventDiscispline", $('#newEventUniversityDomain').val());


        var lstRole = [];
        var uniDomainList2 = hostWebContext2.get_web().get_lists().getByTitle(uniDomainList);
        //var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(RoleSplst);
        var unidomaincamlQuery = SP.CamlQuery.createAllItemsQuery();
        var targetUserResult1 = uniDomainList2.getItems(unidomaincamlQuery);
        context.load(targetUserResult1);
        context.executeQueryAsync(
            function () {
                var listItemEnumerator = targetUserResult1.getEnumerator();
                while (listItemEnumerator.moveNext()) {
                    var listItem = listItemEnumerator.get_current();
                    var title = listItem.get_fieldValues()["Title"];



                    lstRole.push({ lstItem: listItemEnumerator.get_current() });

                }


                for (var i = 0; i < lstRole.length; i++) {


                    var roleItem = lstRole[i];
                    if (objspevent[0].EventUniversityDomain == roleItem.lstItem.get_fieldValues()["Title"]) {
                        eventItem1.set_item(SpEventDiscipline, lstRole[i].lstItem);
                    }
                }



                eventItem1.set_item(SpAppEventID, objspevent[0].ID);
                eventItem1.set_item(SpTitle, objspevent[0].title);
                eventItem1.set_item(SpStartDate, objspevent[0].StartDate);
                eventItem1.set_item(SpEndDate, objspevent[0].EndDate);
                eventItem1.set_item(SpCustomCreatedBy, useremail);
                eventItem1.set_item(SpIsRecurring, objspevent[0].IsRecurring);
                eventItem1.set_item(SpRecurrenceEventId, objspevent[0].RecurrenceEventId);

                if (!eventOrganizer) {
                    eventItem1.set_item(SpEventStatus, 'Approved');
                }

                eventItem1.set_item(SpSiteName, objspevent[0].SiteName);


                eventItem1.update();


                context.load(eventItem1);
                context.executeQueryAsync(function () {

                    // Success returned from executeQueryAsync
                    var eventId = eventItem1.get_id();

                },
                    function (sender, args) {
                        // Failure returned from executeQueryAsync
                        alert("Failure " + args.get_message());
                    });
            },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });
    } else {

        var camlQuery = new SP.CamlQuery();
        camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='AppEventID' /><Value Type='Text'>"
            + objspevent[0].ID
            + "</Value></Eq></Where></Query></View>");
        var targetUseritems = targetUsersList2.getItems(camlQuery);
        //var targetUseritem = targetUsersList2.getItemById(objspevent[0].ID);
        context.load(targetUseritems);
        context.executeQueryAsync(
            function () {
                var eventId = 0;
                var eventlistEnumerator = targetUseritems.getEnumerator();
                while (eventlistEnumerator.moveNext()) {
                    var eventlistItem = eventlistEnumerator.get_current();
                    eventId = eventlistItem.get_id();
                }

                lstRole = [];
                //var eventId = eventItem1.get_id();
                var targetUseritem3 = targetUsersList2.getItemById(eventId);
                context.load(targetUseritem3);
                context.executeQueryAsync(
                    function () {



                        var uniDomainList3 = hostWebContext2.get_web().get_lists().getByTitle(uniDomainList);
                        //var targetUsersList1 = hostWebContext1.get_web().get_lists().getByTitle(RoleSplst);
                        var unidomaincamlQuery3 = SP.CamlQuery.createAllItemsQuery();
                        var targetUserResult3 = uniDomainList3.getItems(unidomaincamlQuery3);
                        context.load(targetUserResult3);
                        context.executeQueryAsync(
                            function () {
                                var listItemEnumerator = targetUserResult3.getEnumerator();
                                while (listItemEnumerator.moveNext()) {
                                    var listItem = listItemEnumerator.get_current();
                                    var title = listItem.get_fieldValues()["Title"];



                                    lstRole.push({ lstItem: listItemEnumerator.get_current() });

                                }


                                for (var i = 0; i < lstRole.length; i++) {


                                    var roleItem = lstRole[i];
                                    if (objspevent[0].EventUniversityDomain == roleItem.lstItem.get_fieldValues()["Title"]) {
                                        targetUseritem3.set_item(SpEventDiscipline, lstRole[i].lstItem);
                                    }
                                }






                                targetUseritem3.set_item(SpAppEventID, objspevent[0].ID);
                                targetUseritem3.set_item(SpTitle, objspevent[0].title);
                                targetUseritem3.set_item(SpStartDate, objspevent[0].StartDate);
                                targetUseritem3.set_item(SpEndDate, objspevent[0].EndDate);
                                targetUseritem3.set_item(SpRecurrenceEventId, objspevent[0].RecurrenceEventId);
                                targetUseritem3.set_item(SpCustomCreatedBy, useremail);
                                if (!eventOrganizer) {
                                    targetUseritem3.set_item(SpEventStatus, 'Approved');
                                }

                                targetUseritem3.set_item(SpSiteName, objspevent[0].SiteName);

                                targetUseritem3.update();
                                context.load(targetUseritem3);
                                context.executeQueryAsync(function () {
                                    // Success returned from executeQueryAsync
                                    var speventId = targetUseritem3.get_id();
                                },
                                function (sender, args) {
                                    // Failure returned from executeQueryAsync
                                    alert("Error :" + args.get_message());
                                });
                            },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });

                    },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });
            },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });
    }
}


function saveOrganizaionToSiteList(objOrg, request) {

    // get properties from Site EmsUsers
    var hostUrl2;
    hostUrl2 = getSpHostUrl();

    var appWebContext2 = new SP.ClientContext.get_current();
    var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl2);
    var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(AffiliationSplst);
    if (request != 'update') {

        var itemCreateInfo = new SP.ListItemCreationInformation();
        var orgItem1 = targetUsersList2.addItem(itemCreateInfo);

        orgItem1.set_item(SpAppOrgID, objOrg[0].AppOrgId);
        orgItem1.set_item(SpAffTitle, objOrg[0].title);

        orgItem1.update();

        context.load(orgItem1);
        context.executeQueryAsync(function () {
            // Success returned from executeQueryAsync
            var eventId = orgItem1.get_id();
        },
            function (sender, args) {
                // Failure returned from executeQueryAsync
                alert("Failure " + args.get_message());
            });

    } else {

        var camlQuery = new SP.CamlQuery();
        camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name=" + SpAppOrgID + " /><Value Type='Text'>"
            + objOrg[0].AppOrgId
            + "</Value></Eq></Where></Query></View>");
        var targetUseritems = targetUsersList2.getItems(camlQuery);
        //var targetUseritem = targetUsersList2.getItemById(objspevent[0].ID);
        context.load(targetUseritems);
        context.executeQueryAsync(
            function () {
                var orgId = 0;
                var orglistEnumerator = targetUseritems.getEnumerator();
                while (orglistEnumerator.moveNext()) {
                    var orglistItem = orglistEnumerator.get_current();
                    orgId = orglistItem.get_id();
                }

                //var eventId = eventItem1.get_id();
                var targetUseritem3 = targetUsersList2.getItemById(orgId);
                context.load(targetUseritem3);
                context.executeQueryAsync(
                    function () {

                        targetUseritem3.set_item(SpAppOrgID, objOrg[0].AppOrgId);
                        targetUseritem3.set_item(SpAffTitle, objOrg[0].title);


                        targetUseritem3.update();
                        context.load(targetUseritem3);
                        context.executeQueryAsync(function () {
                            // Success returned from executeQueryAsync
                            var spOrgId = targetUseritem3.get_id();
                        },
                        function (sender, args) {
                            // Failure returned from executeQueryAsync
                            alert("Error :" + args.get_message());
                        });

                    },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });
            },
                function (sender, args) {
                    // Failure returned from executeQueryAsync
                    alert("Error :" + args.get_message());
                });
    }
}




// This function deletes event when asset assigned to it is deleted 
function deletespSiteEvents(appEventId) {


    // get properties from Site EmsUsers
    var hostUrl2;
    hostUrl2 = getSpHostUrl();

    var appWebContext2 = new SP.ClientContext.get_current();
    var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl2);
    var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(EventSplst);

    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='AppEventID' /><Value Type='Text'>"
        + appEventId
        + "</Value></Eq></Where></Query></View>");
    var targetUseritems = targetUsersList2.getItems(camlQuery);
    context.load(targetUseritems);
    context.executeQueryAsync(
        function () {
            var eventlistEnumerator = targetUseritems.getEnumerator();
            while (eventlistEnumerator.moveNext()) {
                var eventlistItem = eventlistEnumerator.get_current();
                var speventId = eventlistItem.get_id();
                delspEvent(speventId);
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in user roles: " + args.get_message());
        }
        );
}

// This function deletes the event
function delspEvent(speventId) {
    var hostUrl2;
    hostUrl2 = getSpHostUrl();

    var appWebContext2 = new SP.ClientContext.get_current();
    var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl2);
    var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(EventSplst);
    var targetUseritem3 = targetUsersList2.getItemById(speventId);
    targetUseritem3.deleteObject();
}


// This function deletes event when asset assigned to it is deleted 
function deletespOrganization(appEventId, splst , spColumn) {


    // get properties from Site EmsUsers
    var hostUrl2;
    hostUrl2 = getSpHostUrl();

    var appWebContext2 = new SP.ClientContext.get_current();
    var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl2);
    var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(splst);

    var camlQuery = new SP.CamlQuery();
    camlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name=" + spColumn + " /><Value Type='Text'>"
        + appEventId
        + "</Value></Eq></Where></Query></View>");
    var targetUseritems = targetUsersList2.getItems(camlQuery);
    context.load(targetUseritems);
    context.executeQueryAsync(
        function () {
            var eventlistEnumerator = targetUseritems.getEnumerator();
            while (eventlistEnumerator.moveNext()) {
                var eventlistItem = eventlistEnumerator.get_current();
                var speventId = eventlistItem.get_id();
                delspOrg(speventId, splst);
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error in user roles: " + args.get_message());
        }
        );
}

// This function deletes the event
function delspOrg(spId, splst) {
    var hostUrl2;
    hostUrl2 = getSpHostUrl();

    var appWebContext2 = new SP.ClientContext.get_current();
    var hostWebContext2 = new SP.AppContextSite(appWebContext2, hostUrl2);
    var targetUsersList2 = hostWebContext2.get_web().get_lists().getByTitle(splst);
    var targetUseritem3 = targetUsersList2.getItemById(spId);
    targetUseritem3.deleteObject();
}

function getSitesByDescipline(descipline) {
    var SitesIds = "";
    showLoader();
    var _counter = 0;
    var eventQuery = new SP.CamlQuery();
    eventQuery.set_viewXml("<View><Query><Where><Contains><FieldRef Name='Title' /><Value Type='Text'>" + descipline + "</Value></Contains></Where></Query></View>");
    list = web.get_lists().getByTitle('SiteDomainMapList');
    var listItems = list.getItems(eventQuery);
    context.load(listItems);
    context.executeQueryAsync(

        function () {
            // Success returned from executeQueryAsyncble.lastChild);
            var listItemEnumerator = listItems.getEnumerator();
            while (listItemEnumerator.moveNext()) {
                var listItem = listItemEnumerator.get_current();
                var id = listItem.get_fieldValues()["SiteId"];
                SitesIds += "<Value Type='Counter'>" + id + "</Value>";
            }
            var sQuery = new SP.CamlQuery();


            if (SitesIds == null || SitesIds == "")
                SitesIds = "<Value Type='Counter'>0</Value>";
            sQuery.set_viewXml("<View><Query><Where><In><FieldRef Name='ID' /><Values>" + SitesIds + "</Values></In></Where></Query></View>");
            var slist = web.get_lists().getByTitle('PSites');
            var slistItems = slist.getItems(sQuery);
            //show
            context.load(slistItems);
            context.executeQueryAsync(
                function () {
                    var location = document.getElementById("location");
                    while (location.hasChildNodes()) {
                        location.removeChild(location.lastChild);
                    }
                    // Success returned from executeQueryAsync
                    var listItemEnumerator1 = slistItems.getEnumerator();
                    while (listItemEnumerator1.moveNext()) {
                        _counter++;
                        var listItem1 = listItemEnumerator1.get_current();
                        var title = listItem1.get_fieldValues()["Title"];
                        var id = listItem1.get_fieldValues()["ID"];
                        var capacity = listItem1.get_fieldValues()["SiteCapacity"];
                        var option = document.createElement('option');
                        if (capacity != null)
                            title = title + " - " + capacity;
                        option.innerHTML = title;
                        option.value = id;
                        location.appendChild(option);
                    }
                    hideLoader();
                    if (_counter == 0)
                        ErrorMsg("You dont have relevant sites for selected descipline. create some now");
                    //hide

                },
                function () {
                    alert('Error');
                }
                );
        },
        function () {
            alert('Error');
        }
        );
}



function getEMSUsersForPrimaryAffiliation(organizationlst, organizationIterator) {
    var emsUsersForPrimaryAffiliation = [];
    var emsUserslist = web.get_lists().getByTitle("EMSUsers");
    var emsUserscamlQuery = new SP.CamlQuery();

    emsUserscamlQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='PrimaryAffiliation'  /><Value Type='Text'>"
        + organizationlst[organizationIterator].ID
        + "</Value></Eq></Where></Query></View>");
    var emsUserslistItems = emsUserslist.getItems(emsUserscamlQuery);
    context.load(emsUserslistItems);
    context.executeQueryAsync(
        function () {
            //Success returned from executeQueryAsync
            var emsUserslistEnumerator = emsUserslistItems.getEnumerator();
            while (emsUserslistEnumerator.moveNext()) {
                var emsUserslistItem = emsUserslistEnumerator.get_current();
                emsUsersForPrimaryAffiliation.push({
                    ID: emsUserslistItem.get_fieldValues()["ID"],
                    Title: emsUserslistItem.get_fieldValues()["Title"],
                    FirstName: emsUserslistItem.get_fieldValues()["FirstName"],
                    LastName: emsUserslistItem.get_fieldValues()["LastName"],
                    Status: emsUserslistItem.get_fieldValues()["Status"],
                    FieldInterest: emsUserslistItem.get_fieldValues()["FieldInterest"],
                    FieldSubInterest: emsUserslistItem.get_fieldValues()["FieldSubInterest"],
                    CNIC: emsUserslistItem.get_fieldValues()["CNIC"],
                    Occupation: emsUserslistItem.get_fieldValues()["Occupation"],
                    ContactNumber: emsUserslistItem.get_fieldValues()["ContactNumber"],
                    ProvinceRegion: emsUserslistItem.get_fieldValues()["ProvinceRegion"],
                    UniOrgTitle: emsUserslistItem.get_fieldValues()["UniOrgTitle"],
                    PrimaryAffiliation: emsUserslistItem.get_fieldValues()["PrimaryAffiliation"],
                    IsVerified: emsUserslistItem.get_fieldValues()["IsVerified"]
                });
            }

            if (Global_Counter_ForOrganization > 0) {
                Global_Counter_ForOrganization--;
                organizationIterator++;
                getEMSUsersForPrimaryAffiliation(organizationlst, organizationIterator);

            } else {
                Global_Counter_ForOrganization--;
            }
            if (Global_Counter_ForOrganization < 0) {

                EMSUsersDataTable(emsUsersForPrimaryAffiliation);
            }
        },
function (sender, args) {

});
}

function EMSUsersDataTable(emsUsersForPrimaryAffiliation) {
    AllAttendeeControlHide();
    $('#AllAppUsersVerification').show();
    var hasUserProfile = false;
    var appuserTable = document.getElementById("errAllAppUsersVerification");
    //Remove all nodes from the SiteList <DIV> so we have a clean space to write to
    while (appuserTable.hasChildNodes()) {
        appuserTable.removeChild(appuserTable.lastChild);
    }
    var dataSiteEventsAttendee = [];
    for (var i = 0; i < emsUsersForPrimaryAffiliation.length; i++) {
        dataSiteEventsAttendee.push(CreateSiteEmsUsersDataElement(emsUsersForPrimaryAffiliation, i));
        hasUserProfile = true;
    }

    $('#AppusersDivVerification').html('<table cellpadding="0" cellspacing="0" style="cursor: pointer;" border="0" class="display" id="AppUserVerificationTable"></table>');
    var datat = $('#AppUserVerificationTable').dataTable({
        "data": dataSiteEventsAttendee,
        bProcessing: true,
        "fnDrawCallback": function () {
            $('#AppUserVerificationTable tbody .verifyUser').on('click', function () {

                var resultArray = $(this).closest('tr').find('td').map(function () {
                    return $(this).text();
                }).get();
                VerifyUserProfile(resultArray);
            });
        },
        "columns": [

        { "title": "ID", "class": "rowEditUser hideColumn", "width": "1%" },
             { "title": "ID#", "class": "rowEditUser", "width": "5%" },
             { "title": "First Name", "class": "rowEditUser", "width": "10%" },
             { "title": "Last Name", "class": "rowEditUser", "width": "10%" },
             { "title": "Email", "class": "rowEditUser", "width": "10%" },
             { "title": "Address", "class": "rowEditUser", "width": "10%" },
             { "title": "Phone", "class": "rowEditUser", "width": "5%" },
             { "title": "Affiliation", "class": "rowEditUser", "width": "15%" },
             { "title": "Role", "class": "rowEditUser", "width": "5%" },
             { "title": "Discipline", "class": "rowEditUser", "width": "15%" },
             { "title": "Specialization", "class": "rowEditUser", "width": "20%" },
             { "title": "Status", "class": "rowEditUser", "width": "5%" },
             { "title": "Verify", "class": "verifyUser", "width": "5%" }


        ],

        language: {
            "search": "_INPUT_",
            "searchPlaceholder": "Search Users by any attribute i.e Name Email Role etc. ",
            "paginate": {
                "first": "<<",
                "last": ">>",
                "next": ">",
                "previous": "<"
            },
            "lengthMenu": "_MENU_",
            "info": "View _START_ - _END_ of _TOTAL_"
        },
        "sDom": '<"pCustomSearch"f><"pCustomTitle pHeadingCustom">t<"pBottomWrapper"<"pInfo"i><"pBottom" lp>>',
        "initComplete": function (settings, json) {
            var pHeadingObj = $(this).parent().parent().siblings(".headingCustom").html();
            $(this).siblings(".pCustomTitle").html(pHeadingObj);
        },
        "pagingType": "input"
    });



    if (!hasUserProfile) {
        var noSites = document.createElement("div");
        noSites.appendChild(document.createTextNode("There are no University/Orgainzation users."));
        appuserTable.appendChild(noSites);
    }
    showLoader();
    $('#AllAppUsersVerification').fadeIn(500, null);
}



function getEmsUserProperties() {


    var emsUserList = web.get_lists().getByTitle('EMSUsers');

    //Create a CAML query that retrieves the sites for this organization
    var emsUserQuery = new SP.CamlQuery();
    emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
        + useremail
        + "</Value></Eq></Where></Query></View>");
    var emsUserListItems = emsUserList.getItems(emsUserQuery);
    context.load(emsUserListItems);
    var emsUserlistItem;
    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
            while (emsUserlistItemEnumerator.moveNext()) {
                emsUserlistItem = emsUserlistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //userid.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                userid = emsUserlistItem.get_fieldValues()["ID"];
                EMSUserPrimaryAffiliation = emsUserlistItem.get_fieldValues()["PrimaryAffiliation"];

            }

        }, function () {
            alert('Error');

        });
}

function uploadImagestoStyleLib() {
    showLoader();

    if (document.getElementById("eventImageFile").files.length === 0) {
        alert("Select a file!");
        hideLoader();
        return;

    }

    CreateFile();

}
function uploadImagestoStyleLibEdit() {
    showLoader();

    if (document.getElementById("editeventImageFile").files.length === 0) {
        alert("Select a file!");
        hideLoader();
        return;

    }

    CreateFileEdit();

} 
function CreateFile() {
    // Ensure the HTML5 FileReader API is supported
    if (window.FileReader) {
        input = document.getElementById("eventImageFile");
        if (input) {
            file = input.files[0];
            fr = new FileReader();
            fr.onload = receivedBinary;
            fr.readAsDataURL(file);
        }
    }
    else {
        alert("The HTML5 FileSystem APIs are not fully supported in this browser.");
    }
}
function CreateFileEdit() {
    // Ensure the HTML5 FileReader API is supported
    if (window.FileReader) {
        input = document.getElementById("editeventImageFile");
        if (input) {
            file = input.files[0];
            fr = new FileReader();
            fr.onload = receivedBinary;
            fr.readAsDataURL(file);
        }
    }
    else {
        alert("The HTML5 FileSystem APIs are not fully supported in this browser.");
    }
}
function receivedBinary() {
    var hostweburl;
    hostweburl = getSpHostUrl();
     // Get the ClientContext for the app web

    clientContext = new SP.ClientContext.get_current();
    // Use the host web URL to get a parent context - this allows us to get data from the parent
    parentCtx = new SP.AppContextSite(clientContext, hostweburl);
    parentWeb = parentCtx.get_web();
    parentList = parentWeb.get_lists().getByTitle(imageUploadLib);
    var guidIm = (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
  
    fileCreateInfo = new SP.FileCreationInformation();
    fileCreateInfo.set_url(guidIm + "_" + file.name);
    fileCreateInfo.set_overwrite(true);
    fileCreateInfo.set_content(new SP.Base64EncodedByteArray());
    var arr = convertDataURIToBinary(this.result);
    for (var i = 0; i < arr.length; ++i) {
        fileCreateInfo.get_content().append(arr[i]);
    }
     uploadedImageUrl = hostweburl + "/"+imageUploadLib+"/" + guidIm + "_" + file.name;
     //Upload the file to the root folder of the document library
    this.newFile = parentList.get_rootFolder().get_files().add(fileCreateInfo);

    clientContext.load(this.newFile);
    clientContext.executeQueryAsync(onSuccessImgUpload, onFailureImgFail);
  
}
function S4() {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
}

// then to call it, plus stitch in '4' in the third group

function onSuccessImgUpload() {
    // File successfully uploaded
    hideLoader();
    alert("Image Uploaded Successfully!");
}

function onFailureImgFail() {
    // Error occurred
    uploadedImageUrl = "-1";
    hideLoader();
    alert("Upload Request failed: " + arguments[1].get_message());
}


function convertDataURIToBinary(dataURI) {
    var BASE64_MARKER = ';base64,';
    var base64Index = dataURI.indexOf(BASE64_MARKER) + BASE64_MARKER.length;
    var base64 = dataURI.substring(base64Index);
    var raw = window.atob(base64);
    var rawLength = raw.length;
    var array = new Uint8Array(new ArrayBuffer(rawLength));

    for (i = 0; i < rawLength; i++) {
        array[i] = raw.charCodeAt(i);
    }
    return array;
}


function EMSUsers(email, request) {
    var emsUserList = web.get_lists().getByTitle('EMSUsers');

    //Create a CAML query that retrieves the sites for this organization
    var emsUserQuery = new SP.CamlQuery();
    emsUserQuery.set_viewXml("<View><Query><Where><Eq><FieldRef Name='Title' LookupId='TRUE' /><Value Type='Text'>"
        + email
        + "</Value></Eq></Where></Query></View>");
    var emsUserListItems = emsUserList.getItems(emsUserQuery);
    context.load(emsUserListItems);
    var emsUserlistItem;
    context.executeQueryAsync(
        function () {
            // Iterate through the event list
            var emsUserlistItemEnumerator = emsUserListItems.getEnumerator();
            while (emsUserlistItemEnumerator.moveNext()) {
                emsUserlistItem = emsUserlistItemEnumerator.get_current();
                // populated the rooms for the specific site
                //userid.push({ title: emsUserlistItem.get_fieldValues()["Title"], Id: emsUserlistItem.get_fieldValues()["ID"] });
                userid = emsUserlistItem.get_fieldValues()["ID"];
                var userprefix = emsUserlistItem.get_fieldValues()["prefix"];
                var userFName = emsUserlistItem.get_fieldValues()["FirstName"];
                var userLName = emsUserlistItem.get_fieldValues()["LastName"];
                //var userid = emsUserlistItem.get_fieldValues()["ID"];
                if (userprefix == null) {
                    userprefix = "";
                }
                if (userFName == null) {
                    userFName = "";
            }
                if (userLName == null) {
                    userLName = "";
                }
                if (request == 'SuperAdmin') {
                    $('#spnUserName').text("Welcome: " + userprefix + " " + userFName + " " + userLName);
                    $('#spnUserEmail').text(email);
                } else if (request == 'Attendee') {
                    $('#spnAtt_UserName').text("Welcome : " + userprefix + " " + userFName + " " + userLName);
                    $('#spnAtt_UserEmail').text(email);
                }
            }
        },
        function (sender, args) {
            // Failure returned from executeQueryAsync
            alert("Error :" + args.get_message());
        });
}

function showEventFeedbackDetails(id)
{
 //   $('#eventFeedbackDetails').dialog(
 //{
 //    width: 'auto',
 //    height: 'auto',
 //    maxHeight: 600,
 //    modal: true,
 //    fluid: true,
 //    show: {
 //        effect: "Scale",
 //        duration: 1000
 //    },
 //    hide: {
 //        effect: "Explode",
 //        duration: 1000
 //    }

 //});

    var _Question1 = "";
    var _Question2 = "";
    var _Question3 = "";
    var _Question4 = "";
    var _Question5 = "";
    var _Comments = "";
    var _commentsHTML = "";
    var _EmpName = "";
    var q1BACount = 0; var q1ACount = 0; var q1GCount = 0; var q1ECount = 0;
    var q2BACount = 0; var q2ACount = 0; var q2GCount = 0; var q2ECount = 0;
    var q3BACount = 0; var q3ACount = 0; var q3GCount = 0; var q3ECount = 0;
    var q4BACount = 0; var q4ACount = 0; var q4GCount = 0; var q4ECount = 0;
    var q5BACount = 0; var q5ACount = 0; var q5GCount = 0; var q5ECount = 0;
    var comenttable = document.createElement("table");
    comenttable.id = "cmntTable";
    comenttable.className = "table";
    comenttable.rules = "rows";
    //rules = "rows"
    var thead=document.createElement("thead");
    var theadtr=document.createElement("tr");
    var th1=document.createElement("th");
    th1.innerText="Name";
    
    var th2 = document.createElement("th");
    th2.innerText = "Comments";
    theadtr.appendChild(th1); theadtr.appendChild(th2);
    thead.appendChild(theadtr);
    comenttable.appendChild(thead);
    var totalRecords = 0;
   // var q1totalRecords = 0; var q2totalRecords = 0; var q3totalRecords = 0; var q4totalRecords = 0; var q5totalRecords = 0;
    var dataset = [];
    var eventFeedQuery = new SP.CamlQuery();

    //<Query><Where><Eq><FieldRef Name='EventID' /><Value Type='Lookup'>1</Value></Eq></Where></Query>


    eventFeedQuery.set_viewXml("<View> <Query><Where><Eq><FieldRef Name='EventID' /><Value Type='Lookup'>"+id+"</Value></Eq></Where></Query></View>");
    list = web.get_lists().getByTitle('EventFeedback');
    var listItems = list.getItems(eventFeedQuery);
    context.load(listItems);
    context.executeQueryAsync(
        function () {
            //var eventFeedTable = document.getElementById("eventFeedbackDetails");
            //while (eventFeedTable.hasChildNodes()) {
            //    eventFeedTable.removeChild(eventFeedTable.lastChild);
            //}
            var listItemEnumerator = listItems.getEnumerator();
        
         
            while (listItemEnumerator.moveNext()) {

                totalRecords++;
                var listItem = listItemEnumerator.get_current();
                _Question1 = listItem.get_fieldValues()["Question1"];
                if (_Question1 != null)

                {
                    if (_Question1.toLowerCase() == "below average")
                        q1BACount++;
                    else if (_Question1.toLowerCase() == "average")
                        q1ACount++;
                    else if (_Question1.toLowerCase() == "good")
                        q1GCount++;
                    else if (_Question1.toLowerCase() == "excellent")
                        q1ECount++;
                }
             
                //Q2
                _Question2 = listItem.get_fieldValues()["Question2"];
                if (_Question2 != null)
                {
                    if (_Question2.toLowerCase() == "below average")
                        q2BACount++;
                    else if (_Question2.toLowerCase() == "average")
                        q2ACount++;
                    else if (_Question2.toLowerCase() == "good")
                        q2GCount++;
                    else if (_Question2.toLowerCase() == "excellent")
                        q2ECount++;
                }
             
                //Q3
                _Question3 = listItem.get_fieldValues()["Question3"];
                if (_Question3 != null)
                {
                    if (_Question3.toLowerCase() == "below average")
                        q3BACount++;
                    else if (_Question3.toLowerCase() == "average")
                        q3ACount++;
                    else if (_Question3.toLowerCase() == "good")
                        q3GCount++;
                    else if (_Question3.toLowerCase() == "excellent")
                        q3ECount++;
                }
              
                //Q4
                _Question4 = listItem.get_fieldValues()["Question4"];
                if (_Question4 != null) {

                    if (_Question4.toLowerCase() == "below average")
                        q4BACount++;
                    else if (_Question4.toLowerCase() == "average")
                        q4ACount++;
                    else if (_Question4.toLowerCase() == "good")
                        q4GCount++;
                    else if (_Question4.toLowerCase() == "excellent")
                        q4ECount++;
                }
             
                //Q5
                _Question5 = listItem.get_fieldValues()["Question5"];
                if (_Question4 != null)
                {
                    if (_Question5.toLowerCase() == "below average")
                        q5BACount++;
                    else if (_Question5.toLowerCase() == "average")
                        q5ACount++;
                    else if (_Question5.toLowerCase() == "good")
                        q5GCount++;
                    else if (_Question5.toLowerCase() == "excellent")
                        q5ECount++;
                }
            



                _EmpName = listItem.get_fieldValues()["EmployeeName"];
                if (_EmpName == null)
                    _EmpName = "Undefined";
                _Comments = listItem.get_fieldValues()["FeedbackComment"];
                if (_Comments == null)
                    _Comments = "N/A";
                //dataset.push({ Name: _EmpName, Comments: _Comments })
                var comentstr = document.createElement("tr");
                var nametd = document.createElement("td");
                nametd.innerText=_EmpName;
                var commnettd = document.createElement("td");
                commnettd.innerText=_Comments;
                comentstr.appendChild(nametd);
                comentstr.appendChild(commnettd);
                comenttable.appendChild(comentstr);
                var hr = document.createElement("hr");
                comenttable.appendChild(hr);
            }
            
            $("#eventsFeedbackComments").html(comenttable);
            //$('#cmntTable').dataTable();
            $("#spComSkillBA").html(getPercentage(q1BACount,totalRecords));
            $("#spComSkillA").html(getPercentage(q1ACount, totalRecords));
            $("#spComSkillG").html(getPercentage(q1GCount,totalRecords));
            $("#spComSkillE").html(getPercentage(q1ECount,totalRecords));

            $("#spComonTopicBA").html(getPercentage(q2BACount,totalRecords));
            $("#spComonTopicA").html(getPercentage(q2ACount,totalRecords));
            $("#spComonTopicG").html(getPercentage(q2GCount,totalRecords));
            $("#spComonTopicE").html(getPercentage(q2ECount,totalRecords));

            $("#spMatQualityBA").html(getPercentage(q3BACount,totalRecords));
            $("#spMatQualityA").html(getPercentage(q3ACount,totalRecords));
            $("#spMatQualityG").html(getPercentage(q3GCount,totalRecords));
            $("#spMatQualityE").html(getPercentage(q3ECount,totalRecords));

            $("#siteEnvBA").html(getPercentage(q4BACount,totalRecords));
            $("#siteEnvA").html(getPercentage(q4ACount,totalRecords));
            $("#siteEnvG").html(getPercentage(q4GCount,totalRecords));
            $("#siteEnvE").html(getPercentage(q4ECount,totalRecords));

            $("#PlevelBA").html(getPercentage(q5BACount,totalRecords));
            $("#PlevelA").html(getPercentage(q5ACount,totalRecords));
            $("#PlevelG").html(getPercentage(q5GCount,totalRecords));
            $("#PlevelE").html(getPercentage(q5ECount,totalRecords));

            $('#eventFeedbackDetails').dialog(
                        {
                            width: 'auto',
                            height: 'auto',
                            modal: true,
                            fluid: true,
                            show: {
                                effect: "Scale",
                                duration: 1000
                            },
                            hide: {
                                effect: "Explode",
                                duration: 1000
                            }

                        });
        

       
        },
        function () {
            alert('Error');
        }
        );

   
}

function getPercentage(val1, total)
{
   
    var res = (val1 / total);
    res = res || 0;
    var p = res * 100;

    return p + "%";

}